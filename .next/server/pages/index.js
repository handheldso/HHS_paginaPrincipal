module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = require('../ssr-module-cache.js');
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./pages/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../next-server/lib/router-context":
/*!**************************************************************!*\
  !*** external "next/dist/next-server/lib/router-context.js" ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/dist/next-server/lib/router-context.js");

/***/ }),

/***/ "../next-server/lib/router/utils/get-asset-path-from-route":
/*!**************************************************************************************!*\
  !*** external "next/dist/next-server/lib/router/utils/get-asset-path-from-route.js" ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/dist/next-server/lib/router/utils/get-asset-path-from-route.js");

/***/ }),

/***/ "./components/ErrorMensaje.js":
/*!************************************!*\
  !*** ./components/ErrorMensaje.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\ErrorMensaje.js";



const Error = ({
  mensaje
}) => {
  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    className: "alert alert-danger text-center p-2 ",
    role: "alert",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 5,
      columnNumber: 5
    }
  }, mensaje);
};

/* harmony default export */ __webpack_exports__["default"] = (Error);

/***/ }),

/***/ "./components/ExitoMensaje.js":
/*!************************************!*\
  !*** ./components/ExitoMensaje.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\ExitoMensaje.js";



const Exito = ({
  mensaje
}) => {
  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    className: "alert alert-success text-center p-2",
    role: "alert",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 5,
      columnNumber: 5
    }
  }, mensaje);
};

/* harmony default export */ __webpack_exports__["default"] = (Exito);

/***/ }),

/***/ "./components/layout/Clientes.js":
/*!***************************************!*\
  !*** ./components/layout/Clientes.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_2__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\Clientes.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }




const Clientes = () => {
  const TituloDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1hn2cxe8",
    label: "TituloDiv"
  })(false ? undefined : {
    name: "1g1e3d3",
    styles: "width:100%;text-align:center;margin:0px auto",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENsaWVudGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUk4QiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxDbGllbnRlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBDbGllbnRlcyA9ICgpID0+IHtcbiAgY29uc3QgVGl0dWxvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgYDtcblxuICBjb25zdCBUaXR1bG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzUwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTUwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDM2cHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBgO1xuXG4gIGNvbnN0IEltYWdlbiA9IHN0eWxlZC5pbWdgXG4gICAgd2lkdGg6IDg1JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBEdW5zSW1nRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTglO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgICAgd2lkdGg6IDIyJTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiAzMiU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICB3aWR0aDogNDUlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc0ltYWdlbiA9IHN0eWxlZC5pbWdgXG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRHVuc1RleERpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDMyJTtcbiAgICBwYWRkaW5nOiAyMHB4O1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDUwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBEdW5zVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBvcGFjaXR5OiAwLjU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzUwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24+XG4gICAgICAgIDxUaXR1bG9EaXYgY2xhc3NOYW1lPVwibXQtNVwiPlxuICAgICAgICAgIDxUaXR1bG8+XG4gICAgICAgICAgICDCoU3DgVMgUVVFIENMSUVOVEVTLCBDUkVBTU9TIFJFTEFDSU9ORVMhXG4gICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgIEFMR1VOQVMgREUgRVNUQVMgUkVMQUNJT05FUyBTT04gQ09OIEVNUFJFU0FTIENPTU86XG4gICAgICAgICAgPC9UaXR1bG8+XG4gICAgICAgIDwvVGl0dWxvRGl2PlxuICAgICAgICA8SW1hZ2VuRGl2PlxuICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgIHNyYz1cIi9pbWcvYW5uZXJfZGVfY2xpZW50ZXNfcDE5NTE2MWdpbmFfd2ViXzRfLndlYnBcIlxuICAgICAgICAgICAgYWx0PVwiY2xpZW50ZXMgZGUgaGFuZCBoZWxkIHNvbHV0aW9uc1wiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9JbWFnZW5EaXY+XG4gICAgICAgIDxEdW5zRGl2IGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICA8RHVuc0ltZ0Rpdj5cbiAgICAgICAgICAgIDxEdW5zSW1hZ2VuXG4gICAgICAgICAgICAgIHNyYz1cIi9pbWcvRGlzZTE5NTE3N29fc2luX3QxOTUxNzN0dWxvLndlYnBcIlxuICAgICAgICAgICAgICBhbHQ9XCJjZXJ0aWZpY2FkbyBkdW5zXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9EdW5zSW1nRGl2PlxuICAgICAgICAgIDxEdW5zVGV4RGl2PlxuICAgICAgICAgICAgPER1bnNUZXh0bz5cbiAgICAgICAgICAgICAgSGFuZCBIZWxkIFNvbHV0aW9ucyBjdWVudGEgY29uIGNlcnRpZmljYWNpw7NuIEQtVS1OLVMgOTUxNTkwOTAzXG4gICAgICAgICAgICAgIChlbWl0aWRvIHBvciBsYSBpbnN0aXR1Y2nDs24gaW50ZXJuYWNpb25hbCBDaWFsIER1biAmIEJyYW5zdHJlZXQsXG4gICAgICAgICAgICAgIHF1acOpbiBldmFsw7phIGxhIGZpYWJpbGlkYWQgeSBlc3RhYmlsaWRhZCBmaW5hbmNpZXJhIGRlIG51ZXN0cmFcbiAgICAgICAgICAgICAgZW1wcmVzYSBwYXJhIHJlYWxpemFyIHVuIGFyY2hpdm8gZGUgY3LDqWRpdG8gY29tZXJjaWFsXG4gICAgICAgICAgICAgIGludGVybmFjaW9uYWwuXG4gICAgICAgICAgICA8L0R1bnNUZXh0bz5cbiAgICAgICAgICA8L0R1bnNUZXhEaXY+XG4gICAgICAgICAgPER1bnNJbWdEaXY+XG4gICAgICAgICAgICA8RHVuc0ltYWdlblxuICAgICAgICAgICAgICBzcmM9XCIvaW1nL0NlcnRpZmljYWRvIElTTi5wbmdcIlxuICAgICAgICAgICAgICBhbHQ9XCJjZXJ0aWZpY2FkbyBJU05cIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0R1bnNJbWdEaXY+XG4gICAgICAgICAgPER1bnNUZXhEaXY+XG4gICAgICAgICAgICA8RHVuc1RleHRvPlxuICAgICAgICAgICAgICBIYW5kIEhlbGQgU29sdXRpb25zIGN1ZW50YSBjb24gY2VydGlmaWNhY2nDs24gSVNOZXR3b3JsZCwgY3VtcGxpZW5kb1xuICAgICAgICAgICAgICByZXF1aXNpdG9zIGludGVybm9zIHkgZ3ViZXJuYW1lbnRhbGVzIGVuIG1hdGVyaWEgZGUgc2FsdWQsIHNlZ3VyaWRhZCxcbiAgICAgICAgICAgICAgY2FsaWRhZCB5IHJpZXNnby5cbiAgICAgICAgICAgIDwvRHVuc1RleHRvPlxuICAgICAgICAgIDwvRHVuc1RleERpdj5cbiAgICAgICAgPC9EdW5zRGl2PlxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2xpZW50ZXM7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Titulo = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "e1hn2cxe7",
    label: "Titulo"
  })(false ? undefined : {
    name: "10s6xfh",
    styles: "font-size:20px;font-weight:bold;@media (max-width: 750px){font-size:16px;}@media (max-width: 550px){font-size:14px;}@media (max-width: 436px){font-size:12px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENsaWVudGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVV5QiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxDbGllbnRlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBDbGllbnRlcyA9ICgpID0+IHtcbiAgY29uc3QgVGl0dWxvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgYDtcblxuICBjb25zdCBUaXR1bG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzUwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTUwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDM2cHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBgO1xuXG4gIGNvbnN0IEltYWdlbiA9IHN0eWxlZC5pbWdgXG4gICAgd2lkdGg6IDg1JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBEdW5zSW1nRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTglO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgICAgd2lkdGg6IDIyJTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiAzMiU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICB3aWR0aDogNDUlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc0ltYWdlbiA9IHN0eWxlZC5pbWdgXG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRHVuc1RleERpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDMyJTtcbiAgICBwYWRkaW5nOiAyMHB4O1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDUwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBEdW5zVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBvcGFjaXR5OiAwLjU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzUwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24+XG4gICAgICAgIDxUaXR1bG9EaXYgY2xhc3NOYW1lPVwibXQtNVwiPlxuICAgICAgICAgIDxUaXR1bG8+XG4gICAgICAgICAgICDCoU3DgVMgUVVFIENMSUVOVEVTLCBDUkVBTU9TIFJFTEFDSU9ORVMhXG4gICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgIEFMR1VOQVMgREUgRVNUQVMgUkVMQUNJT05FUyBTT04gQ09OIEVNUFJFU0FTIENPTU86XG4gICAgICAgICAgPC9UaXR1bG8+XG4gICAgICAgIDwvVGl0dWxvRGl2PlxuICAgICAgICA8SW1hZ2VuRGl2PlxuICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgIHNyYz1cIi9pbWcvYW5uZXJfZGVfY2xpZW50ZXNfcDE5NTE2MWdpbmFfd2ViXzRfLndlYnBcIlxuICAgICAgICAgICAgYWx0PVwiY2xpZW50ZXMgZGUgaGFuZCBoZWxkIHNvbHV0aW9uc1wiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9JbWFnZW5EaXY+XG4gICAgICAgIDxEdW5zRGl2IGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICA8RHVuc0ltZ0Rpdj5cbiAgICAgICAgICAgIDxEdW5zSW1hZ2VuXG4gICAgICAgICAgICAgIHNyYz1cIi9pbWcvRGlzZTE5NTE3N29fc2luX3QxOTUxNzN0dWxvLndlYnBcIlxuICAgICAgICAgICAgICBhbHQ9XCJjZXJ0aWZpY2FkbyBkdW5zXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9EdW5zSW1nRGl2PlxuICAgICAgICAgIDxEdW5zVGV4RGl2PlxuICAgICAgICAgICAgPER1bnNUZXh0bz5cbiAgICAgICAgICAgICAgSGFuZCBIZWxkIFNvbHV0aW9ucyBjdWVudGEgY29uIGNlcnRpZmljYWNpw7NuIEQtVS1OLVMgOTUxNTkwOTAzXG4gICAgICAgICAgICAgIChlbWl0aWRvIHBvciBsYSBpbnN0aXR1Y2nDs24gaW50ZXJuYWNpb25hbCBDaWFsIER1biAmIEJyYW5zdHJlZXQsXG4gICAgICAgICAgICAgIHF1acOpbiBldmFsw7phIGxhIGZpYWJpbGlkYWQgeSBlc3RhYmlsaWRhZCBmaW5hbmNpZXJhIGRlIG51ZXN0cmFcbiAgICAgICAgICAgICAgZW1wcmVzYSBwYXJhIHJlYWxpemFyIHVuIGFyY2hpdm8gZGUgY3LDqWRpdG8gY29tZXJjaWFsXG4gICAgICAgICAgICAgIGludGVybmFjaW9uYWwuXG4gICAgICAgICAgICA8L0R1bnNUZXh0bz5cbiAgICAgICAgICA8L0R1bnNUZXhEaXY+XG4gICAgICAgICAgPER1bnNJbWdEaXY+XG4gICAgICAgICAgICA8RHVuc0ltYWdlblxuICAgICAgICAgICAgICBzcmM9XCIvaW1nL0NlcnRpZmljYWRvIElTTi5wbmdcIlxuICAgICAgICAgICAgICBhbHQ9XCJjZXJ0aWZpY2FkbyBJU05cIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0R1bnNJbWdEaXY+XG4gICAgICAgICAgPER1bnNUZXhEaXY+XG4gICAgICAgICAgICA8RHVuc1RleHRvPlxuICAgICAgICAgICAgICBIYW5kIEhlbGQgU29sdXRpb25zIGN1ZW50YSBjb24gY2VydGlmaWNhY2nDs24gSVNOZXR3b3JsZCwgY3VtcGxpZW5kb1xuICAgICAgICAgICAgICByZXF1aXNpdG9zIGludGVybm9zIHkgZ3ViZXJuYW1lbnRhbGVzIGVuIG1hdGVyaWEgZGUgc2FsdWQsIHNlZ3VyaWRhZCxcbiAgICAgICAgICAgICAgY2FsaWRhZCB5IHJpZXNnby5cbiAgICAgICAgICAgIDwvRHVuc1RleHRvPlxuICAgICAgICAgIDwvRHVuc1RleERpdj5cbiAgICAgICAgPC9EdW5zRGl2PlxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2xpZW50ZXM7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const ImagenDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1hn2cxe6",
    label: "ImagenDiv"
  })(false ? undefined : {
    name: "ih7ruz",
    styles: "display:flex;width:100%;justify-content:center",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENsaWVudGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJCOEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ2xpZW50ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgQ2xpZW50ZXMgPSAoKSA9PiB7XG4gIGNvbnN0IFRpdHVsb0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDU1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDQzNnB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYDtcblxuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiA4NSU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IER1bnNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc0ltZ0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDE4JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpIHtcbiAgICAgIHdpZHRoOiAyMiU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogMzIlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDQ1JTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IER1bnNJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IER1bnNUZXhEaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAzMiU7XG4gICAgcGFkZGluZzogMjBweDtcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA1MCU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgb3BhY2l0eTogMC41O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8VGl0dWxvRGl2IGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICA8VGl0dWxvPlxuICAgICAgICAgICAgwqFNw4FTIFFVRSBDTElFTlRFUywgQ1JFQU1PUyBSRUxBQ0lPTkVTIVxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICBBTEdVTkFTIERFIEVTVEFTIFJFTEFDSU9ORVMgU09OIENPTiBFTVBSRVNBUyBDT01POlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICA8SW1hZ2VuXG4gICAgICAgICAgICBzcmM9XCIvaW1nL2FubmVyX2RlX2NsaWVudGVzX3AxOTUxNjFnaW5hX3dlYl80Xy53ZWJwXCJcbiAgICAgICAgICAgIGFsdD1cImNsaWVudGVzIGRlIGhhbmQgaGVsZCBzb2x1dGlvbnNcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICA8RHVuc0RpdiBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPER1bnNJbWdEaXY+XG4gICAgICAgICAgICA8RHVuc0ltYWdlblxuICAgICAgICAgICAgICBzcmM9XCIvaW1nL0Rpc2UxOTUxNzdvX3Npbl90MTk1MTczdHVsby53ZWJwXCJcbiAgICAgICAgICAgICAgYWx0PVwiY2VydGlmaWNhZG8gZHVuc1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvRHVuc0ltZ0Rpdj5cbiAgICAgICAgICA8RHVuc1RleERpdj5cbiAgICAgICAgICAgIDxEdW5zVGV4dG8+XG4gICAgICAgICAgICAgIEhhbmQgSGVsZCBTb2x1dGlvbnMgY3VlbnRhIGNvbiBjZXJ0aWZpY2FjacOzbiBELVUtTi1TIDk1MTU5MDkwM1xuICAgICAgICAgICAgICAoZW1pdGlkbyBwb3IgbGEgaW5zdGl0dWNpw7NuIGludGVybmFjaW9uYWwgQ2lhbCBEdW4gJiBCcmFuc3RyZWV0LFxuICAgICAgICAgICAgICBxdWnDqW4gZXZhbMO6YSBsYSBmaWFiaWxpZGFkIHkgZXN0YWJpbGlkYWQgZmluYW5jaWVyYSBkZSBudWVzdHJhXG4gICAgICAgICAgICAgIGVtcHJlc2EgcGFyYSByZWFsaXphciB1biBhcmNoaXZvIGRlIGNyw6lkaXRvIGNvbWVyY2lhbFxuICAgICAgICAgICAgICBpbnRlcm5hY2lvbmFsLlxuICAgICAgICAgICAgPC9EdW5zVGV4dG8+XG4gICAgICAgICAgPC9EdW5zVGV4RGl2PlxuICAgICAgICAgIDxEdW5zSW1nRGl2PlxuICAgICAgICAgICAgPER1bnNJbWFnZW5cbiAgICAgICAgICAgICAgc3JjPVwiL2ltZy9DZXJ0aWZpY2FkbyBJU04ucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiY2VydGlmaWNhZG8gSVNOXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9EdW5zSW1nRGl2PlxuICAgICAgICAgIDxEdW5zVGV4RGl2PlxuICAgICAgICAgICAgPER1bnNUZXh0bz5cbiAgICAgICAgICAgICAgSGFuZCBIZWxkIFNvbHV0aW9ucyBjdWVudGEgY29uIGNlcnRpZmljYWNpw7NuIElTTmV0d29ybGQsIGN1bXBsaWVuZG9cbiAgICAgICAgICAgICAgcmVxdWlzaXRvcyBpbnRlcm5vcyB5IGd1YmVybmFtZW50YWxlcyBlbiBtYXRlcmlhIGRlIHNhbHVkLCBzZWd1cmlkYWQsXG4gICAgICAgICAgICAgIGNhbGlkYWQgeSByaWVzZ28uXG4gICAgICAgICAgICA8L0R1bnNUZXh0bz5cbiAgICAgICAgICA8L0R1bnNUZXhEaXY+XG4gICAgICAgIDwvRHVuc0Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENsaWVudGVzO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Imagen = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "e1hn2cxe5",
    label: "Imagen"
  })(false ? undefined : {
    name: "1th9f6t",
    styles: "width:85%;@media (max-width: 1200px){width:100%;height:100%;}@media (max-width: 900px){width:100%;height:100%;}@media (max-width: 600px){width:100%;height:100%;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENsaWVudGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlDMkIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ2xpZW50ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgQ2xpZW50ZXMgPSAoKSA9PiB7XG4gIGNvbnN0IFRpdHVsb0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDU1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDQzNnB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYDtcblxuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiA4NSU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IER1bnNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc0ltZ0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDE4JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpIHtcbiAgICAgIHdpZHRoOiAyMiU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogMzIlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDQ1JTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IER1bnNJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IER1bnNUZXhEaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAzMiU7XG4gICAgcGFkZGluZzogMjBweDtcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA1MCU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgb3BhY2l0eTogMC41O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8VGl0dWxvRGl2IGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICA8VGl0dWxvPlxuICAgICAgICAgICAgwqFNw4FTIFFVRSBDTElFTlRFUywgQ1JFQU1PUyBSRUxBQ0lPTkVTIVxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICBBTEdVTkFTIERFIEVTVEFTIFJFTEFDSU9ORVMgU09OIENPTiBFTVBSRVNBUyBDT01POlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICA8SW1hZ2VuXG4gICAgICAgICAgICBzcmM9XCIvaW1nL2FubmVyX2RlX2NsaWVudGVzX3AxOTUxNjFnaW5hX3dlYl80Xy53ZWJwXCJcbiAgICAgICAgICAgIGFsdD1cImNsaWVudGVzIGRlIGhhbmQgaGVsZCBzb2x1dGlvbnNcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICA8RHVuc0RpdiBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPER1bnNJbWdEaXY+XG4gICAgICAgICAgICA8RHVuc0ltYWdlblxuICAgICAgICAgICAgICBzcmM9XCIvaW1nL0Rpc2UxOTUxNzdvX3Npbl90MTk1MTczdHVsby53ZWJwXCJcbiAgICAgICAgICAgICAgYWx0PVwiY2VydGlmaWNhZG8gZHVuc1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvRHVuc0ltZ0Rpdj5cbiAgICAgICAgICA8RHVuc1RleERpdj5cbiAgICAgICAgICAgIDxEdW5zVGV4dG8+XG4gICAgICAgICAgICAgIEhhbmQgSGVsZCBTb2x1dGlvbnMgY3VlbnRhIGNvbiBjZXJ0aWZpY2FjacOzbiBELVUtTi1TIDk1MTU5MDkwM1xuICAgICAgICAgICAgICAoZW1pdGlkbyBwb3IgbGEgaW5zdGl0dWNpw7NuIGludGVybmFjaW9uYWwgQ2lhbCBEdW4gJiBCcmFuc3RyZWV0LFxuICAgICAgICAgICAgICBxdWnDqW4gZXZhbMO6YSBsYSBmaWFiaWxpZGFkIHkgZXN0YWJpbGlkYWQgZmluYW5jaWVyYSBkZSBudWVzdHJhXG4gICAgICAgICAgICAgIGVtcHJlc2EgcGFyYSByZWFsaXphciB1biBhcmNoaXZvIGRlIGNyw6lkaXRvIGNvbWVyY2lhbFxuICAgICAgICAgICAgICBpbnRlcm5hY2lvbmFsLlxuICAgICAgICAgICAgPC9EdW5zVGV4dG8+XG4gICAgICAgICAgPC9EdW5zVGV4RGl2PlxuICAgICAgICAgIDxEdW5zSW1nRGl2PlxuICAgICAgICAgICAgPER1bnNJbWFnZW5cbiAgICAgICAgICAgICAgc3JjPVwiL2ltZy9DZXJ0aWZpY2FkbyBJU04ucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiY2VydGlmaWNhZG8gSVNOXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9EdW5zSW1nRGl2PlxuICAgICAgICAgIDxEdW5zVGV4RGl2PlxuICAgICAgICAgICAgPER1bnNUZXh0bz5cbiAgICAgICAgICAgICAgSGFuZCBIZWxkIFNvbHV0aW9ucyBjdWVudGEgY29uIGNlcnRpZmljYWNpw7NuIElTTmV0d29ybGQsIGN1bXBsaWVuZG9cbiAgICAgICAgICAgICAgcmVxdWlzaXRvcyBpbnRlcm5vcyB5IGd1YmVybmFtZW50YWxlcyBlbiBtYXRlcmlhIGRlIHNhbHVkLCBzZWd1cmlkYWQsXG4gICAgICAgICAgICAgIGNhbGlkYWQgeSByaWVzZ28uXG4gICAgICAgICAgICA8L0R1bnNUZXh0bz5cbiAgICAgICAgICA8L0R1bnNUZXhEaXY+XG4gICAgICAgIDwvRHVuc0Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENsaWVudGVzO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const DunsDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1hn2cxe4",
    label: "DunsDiv"
  })(false ? undefined : {
    name: "1lxsmp3",
    styles: "display:flex;align-items:center;justify-content:center;width:100%;@media (max-width: 600px){display:grid;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENsaWVudGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9ENEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ2xpZW50ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgQ2xpZW50ZXMgPSAoKSA9PiB7XG4gIGNvbnN0IFRpdHVsb0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDU1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDQzNnB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYDtcblxuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiA4NSU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IER1bnNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc0ltZ0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDE4JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpIHtcbiAgICAgIHdpZHRoOiAyMiU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogMzIlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDQ1JTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IER1bnNJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IER1bnNUZXhEaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAzMiU7XG4gICAgcGFkZGluZzogMjBweDtcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA1MCU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgb3BhY2l0eTogMC41O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8VGl0dWxvRGl2IGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICA8VGl0dWxvPlxuICAgICAgICAgICAgwqFNw4FTIFFVRSBDTElFTlRFUywgQ1JFQU1PUyBSRUxBQ0lPTkVTIVxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICBBTEdVTkFTIERFIEVTVEFTIFJFTEFDSU9ORVMgU09OIENPTiBFTVBSRVNBUyBDT01POlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICA8SW1hZ2VuXG4gICAgICAgICAgICBzcmM9XCIvaW1nL2FubmVyX2RlX2NsaWVudGVzX3AxOTUxNjFnaW5hX3dlYl80Xy53ZWJwXCJcbiAgICAgICAgICAgIGFsdD1cImNsaWVudGVzIGRlIGhhbmQgaGVsZCBzb2x1dGlvbnNcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICA8RHVuc0RpdiBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPER1bnNJbWdEaXY+XG4gICAgICAgICAgICA8RHVuc0ltYWdlblxuICAgICAgICAgICAgICBzcmM9XCIvaW1nL0Rpc2UxOTUxNzdvX3Npbl90MTk1MTczdHVsby53ZWJwXCJcbiAgICAgICAgICAgICAgYWx0PVwiY2VydGlmaWNhZG8gZHVuc1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvRHVuc0ltZ0Rpdj5cbiAgICAgICAgICA8RHVuc1RleERpdj5cbiAgICAgICAgICAgIDxEdW5zVGV4dG8+XG4gICAgICAgICAgICAgIEhhbmQgSGVsZCBTb2x1dGlvbnMgY3VlbnRhIGNvbiBjZXJ0aWZpY2FjacOzbiBELVUtTi1TIDk1MTU5MDkwM1xuICAgICAgICAgICAgICAoZW1pdGlkbyBwb3IgbGEgaW5zdGl0dWNpw7NuIGludGVybmFjaW9uYWwgQ2lhbCBEdW4gJiBCcmFuc3RyZWV0LFxuICAgICAgICAgICAgICBxdWnDqW4gZXZhbMO6YSBsYSBmaWFiaWxpZGFkIHkgZXN0YWJpbGlkYWQgZmluYW5jaWVyYSBkZSBudWVzdHJhXG4gICAgICAgICAgICAgIGVtcHJlc2EgcGFyYSByZWFsaXphciB1biBhcmNoaXZvIGRlIGNyw6lkaXRvIGNvbWVyY2lhbFxuICAgICAgICAgICAgICBpbnRlcm5hY2lvbmFsLlxuICAgICAgICAgICAgPC9EdW5zVGV4dG8+XG4gICAgICAgICAgPC9EdW5zVGV4RGl2PlxuICAgICAgICAgIDxEdW5zSW1nRGl2PlxuICAgICAgICAgICAgPER1bnNJbWFnZW5cbiAgICAgICAgICAgICAgc3JjPVwiL2ltZy9DZXJ0aWZpY2FkbyBJU04ucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiY2VydGlmaWNhZG8gSVNOXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9EdW5zSW1nRGl2PlxuICAgICAgICAgIDxEdW5zVGV4RGl2PlxuICAgICAgICAgICAgPER1bnNUZXh0bz5cbiAgICAgICAgICAgICAgSGFuZCBIZWxkIFNvbHV0aW9ucyBjdWVudGEgY29uIGNlcnRpZmljYWNpw7NuIElTTmV0d29ybGQsIGN1bXBsaWVuZG9cbiAgICAgICAgICAgICAgcmVxdWlzaXRvcyBpbnRlcm5vcyB5IGd1YmVybmFtZW50YWxlcyBlbiBtYXRlcmlhIGRlIHNhbHVkLCBzZWd1cmlkYWQsXG4gICAgICAgICAgICAgIGNhbGlkYWQgeSByaWVzZ28uXG4gICAgICAgICAgICA8L0R1bnNUZXh0bz5cbiAgICAgICAgICA8L0R1bnNUZXhEaXY+XG4gICAgICAgIDwvRHVuc0Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENsaWVudGVzO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const DunsImgDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1hn2cxe3",
    label: "DunsImgDiv"
  })(false ? undefined : {
    name: "k0t7az",
    styles: "width:18%;@media (max-width: 1200px){width:22%;}@media (max-width: 900px){width:32%;}@media (max-width: 600px){width:45%;margin:0px auto;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENsaWVudGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStEK0IiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ2xpZW50ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgQ2xpZW50ZXMgPSAoKSA9PiB7XG4gIGNvbnN0IFRpdHVsb0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDU1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDQzNnB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYDtcblxuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiA4NSU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IER1bnNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc0ltZ0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDE4JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpIHtcbiAgICAgIHdpZHRoOiAyMiU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogMzIlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDQ1JTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IER1bnNJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IER1bnNUZXhEaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAzMiU7XG4gICAgcGFkZGluZzogMjBweDtcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA1MCU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgb3BhY2l0eTogMC41O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8VGl0dWxvRGl2IGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICA8VGl0dWxvPlxuICAgICAgICAgICAgwqFNw4FTIFFVRSBDTElFTlRFUywgQ1JFQU1PUyBSRUxBQ0lPTkVTIVxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICBBTEdVTkFTIERFIEVTVEFTIFJFTEFDSU9ORVMgU09OIENPTiBFTVBSRVNBUyBDT01POlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICA8SW1hZ2VuXG4gICAgICAgICAgICBzcmM9XCIvaW1nL2FubmVyX2RlX2NsaWVudGVzX3AxOTUxNjFnaW5hX3dlYl80Xy53ZWJwXCJcbiAgICAgICAgICAgIGFsdD1cImNsaWVudGVzIGRlIGhhbmQgaGVsZCBzb2x1dGlvbnNcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICA8RHVuc0RpdiBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPER1bnNJbWdEaXY+XG4gICAgICAgICAgICA8RHVuc0ltYWdlblxuICAgICAgICAgICAgICBzcmM9XCIvaW1nL0Rpc2UxOTUxNzdvX3Npbl90MTk1MTczdHVsby53ZWJwXCJcbiAgICAgICAgICAgICAgYWx0PVwiY2VydGlmaWNhZG8gZHVuc1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvRHVuc0ltZ0Rpdj5cbiAgICAgICAgICA8RHVuc1RleERpdj5cbiAgICAgICAgICAgIDxEdW5zVGV4dG8+XG4gICAgICAgICAgICAgIEhhbmQgSGVsZCBTb2x1dGlvbnMgY3VlbnRhIGNvbiBjZXJ0aWZpY2FjacOzbiBELVUtTi1TIDk1MTU5MDkwM1xuICAgICAgICAgICAgICAoZW1pdGlkbyBwb3IgbGEgaW5zdGl0dWNpw7NuIGludGVybmFjaW9uYWwgQ2lhbCBEdW4gJiBCcmFuc3RyZWV0LFxuICAgICAgICAgICAgICBxdWnDqW4gZXZhbMO6YSBsYSBmaWFiaWxpZGFkIHkgZXN0YWJpbGlkYWQgZmluYW5jaWVyYSBkZSBudWVzdHJhXG4gICAgICAgICAgICAgIGVtcHJlc2EgcGFyYSByZWFsaXphciB1biBhcmNoaXZvIGRlIGNyw6lkaXRvIGNvbWVyY2lhbFxuICAgICAgICAgICAgICBpbnRlcm5hY2lvbmFsLlxuICAgICAgICAgICAgPC9EdW5zVGV4dG8+XG4gICAgICAgICAgPC9EdW5zVGV4RGl2PlxuICAgICAgICAgIDxEdW5zSW1nRGl2PlxuICAgICAgICAgICAgPER1bnNJbWFnZW5cbiAgICAgICAgICAgICAgc3JjPVwiL2ltZy9DZXJ0aWZpY2FkbyBJU04ucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiY2VydGlmaWNhZG8gSVNOXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9EdW5zSW1nRGl2PlxuICAgICAgICAgIDxEdW5zVGV4RGl2PlxuICAgICAgICAgICAgPER1bnNUZXh0bz5cbiAgICAgICAgICAgICAgSGFuZCBIZWxkIFNvbHV0aW9ucyBjdWVudGEgY29uIGNlcnRpZmljYWNpw7NuIElTTmV0d29ybGQsIGN1bXBsaWVuZG9cbiAgICAgICAgICAgICAgcmVxdWlzaXRvcyBpbnRlcm5vcyB5IGd1YmVybmFtZW50YWxlcyBlbiBtYXRlcmlhIGRlIHNhbHVkLCBzZWd1cmlkYWQsXG4gICAgICAgICAgICAgIGNhbGlkYWQgeSByaWVzZ28uXG4gICAgICAgICAgICA8L0R1bnNUZXh0bz5cbiAgICAgICAgICA8L0R1bnNUZXhEaXY+XG4gICAgICAgIDwvRHVuc0Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENsaWVudGVzO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const DunsImagen = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "e1hn2cxe2",
    label: "DunsImagen"
  })(false ? undefined : {
    name: "1d3w5wq",
    styles: "width:100%",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENsaWVudGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdGK0IiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ2xpZW50ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgQ2xpZW50ZXMgPSAoKSA9PiB7XG4gIGNvbnN0IFRpdHVsb0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDU1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDQzNnB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYDtcblxuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiA4NSU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IER1bnNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc0ltZ0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDE4JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpIHtcbiAgICAgIHdpZHRoOiAyMiU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogMzIlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDQ1JTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IER1bnNJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IER1bnNUZXhEaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAzMiU7XG4gICAgcGFkZGluZzogMjBweDtcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA1MCU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgb3BhY2l0eTogMC41O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8VGl0dWxvRGl2IGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICA8VGl0dWxvPlxuICAgICAgICAgICAgwqFNw4FTIFFVRSBDTElFTlRFUywgQ1JFQU1PUyBSRUxBQ0lPTkVTIVxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICBBTEdVTkFTIERFIEVTVEFTIFJFTEFDSU9ORVMgU09OIENPTiBFTVBSRVNBUyBDT01POlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICA8SW1hZ2VuXG4gICAgICAgICAgICBzcmM9XCIvaW1nL2FubmVyX2RlX2NsaWVudGVzX3AxOTUxNjFnaW5hX3dlYl80Xy53ZWJwXCJcbiAgICAgICAgICAgIGFsdD1cImNsaWVudGVzIGRlIGhhbmQgaGVsZCBzb2x1dGlvbnNcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICA8RHVuc0RpdiBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPER1bnNJbWdEaXY+XG4gICAgICAgICAgICA8RHVuc0ltYWdlblxuICAgICAgICAgICAgICBzcmM9XCIvaW1nL0Rpc2UxOTUxNzdvX3Npbl90MTk1MTczdHVsby53ZWJwXCJcbiAgICAgICAgICAgICAgYWx0PVwiY2VydGlmaWNhZG8gZHVuc1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvRHVuc0ltZ0Rpdj5cbiAgICAgICAgICA8RHVuc1RleERpdj5cbiAgICAgICAgICAgIDxEdW5zVGV4dG8+XG4gICAgICAgICAgICAgIEhhbmQgSGVsZCBTb2x1dGlvbnMgY3VlbnRhIGNvbiBjZXJ0aWZpY2FjacOzbiBELVUtTi1TIDk1MTU5MDkwM1xuICAgICAgICAgICAgICAoZW1pdGlkbyBwb3IgbGEgaW5zdGl0dWNpw7NuIGludGVybmFjaW9uYWwgQ2lhbCBEdW4gJiBCcmFuc3RyZWV0LFxuICAgICAgICAgICAgICBxdWnDqW4gZXZhbMO6YSBsYSBmaWFiaWxpZGFkIHkgZXN0YWJpbGlkYWQgZmluYW5jaWVyYSBkZSBudWVzdHJhXG4gICAgICAgICAgICAgIGVtcHJlc2EgcGFyYSByZWFsaXphciB1biBhcmNoaXZvIGRlIGNyw6lkaXRvIGNvbWVyY2lhbFxuICAgICAgICAgICAgICBpbnRlcm5hY2lvbmFsLlxuICAgICAgICAgICAgPC9EdW5zVGV4dG8+XG4gICAgICAgICAgPC9EdW5zVGV4RGl2PlxuICAgICAgICAgIDxEdW5zSW1nRGl2PlxuICAgICAgICAgICAgPER1bnNJbWFnZW5cbiAgICAgICAgICAgICAgc3JjPVwiL2ltZy9DZXJ0aWZpY2FkbyBJU04ucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiY2VydGlmaWNhZG8gSVNOXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9EdW5zSW1nRGl2PlxuICAgICAgICAgIDxEdW5zVGV4RGl2PlxuICAgICAgICAgICAgPER1bnNUZXh0bz5cbiAgICAgICAgICAgICAgSGFuZCBIZWxkIFNvbHV0aW9ucyBjdWVudGEgY29uIGNlcnRpZmljYWNpw7NuIElTTmV0d29ybGQsIGN1bXBsaWVuZG9cbiAgICAgICAgICAgICAgcmVxdWlzaXRvcyBpbnRlcm5vcyB5IGd1YmVybmFtZW50YWxlcyBlbiBtYXRlcmlhIGRlIHNhbHVkLCBzZWd1cmlkYWQsXG4gICAgICAgICAgICAgIGNhbGlkYWQgeSByaWVzZ28uXG4gICAgICAgICAgICA8L0R1bnNUZXh0bz5cbiAgICAgICAgICA8L0R1bnNUZXhEaXY+XG4gICAgICAgIDwvRHVuc0Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENsaWVudGVzO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const DunsTexDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1hn2cxe1",
    label: "DunsTexDiv"
  })(false ? undefined : {
    name: "17oghdr",
    styles: "width:32%;padding:20px;@media (max-width: 600px){width:50%;margin:0px auto;margin-top:10px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENsaWVudGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9GK0IiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ2xpZW50ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgQ2xpZW50ZXMgPSAoKSA9PiB7XG4gIGNvbnN0IFRpdHVsb0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDU1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDQzNnB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYDtcblxuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiA4NSU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IER1bnNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc0ltZ0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDE4JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpIHtcbiAgICAgIHdpZHRoOiAyMiU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogMzIlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDQ1JTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IER1bnNJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IER1bnNUZXhEaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAzMiU7XG4gICAgcGFkZGluZzogMjBweDtcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA1MCU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgb3BhY2l0eTogMC41O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8VGl0dWxvRGl2IGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICA8VGl0dWxvPlxuICAgICAgICAgICAgwqFNw4FTIFFVRSBDTElFTlRFUywgQ1JFQU1PUyBSRUxBQ0lPTkVTIVxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICBBTEdVTkFTIERFIEVTVEFTIFJFTEFDSU9ORVMgU09OIENPTiBFTVBSRVNBUyBDT01POlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICA8SW1hZ2VuXG4gICAgICAgICAgICBzcmM9XCIvaW1nL2FubmVyX2RlX2NsaWVudGVzX3AxOTUxNjFnaW5hX3dlYl80Xy53ZWJwXCJcbiAgICAgICAgICAgIGFsdD1cImNsaWVudGVzIGRlIGhhbmQgaGVsZCBzb2x1dGlvbnNcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICA8RHVuc0RpdiBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPER1bnNJbWdEaXY+XG4gICAgICAgICAgICA8RHVuc0ltYWdlblxuICAgICAgICAgICAgICBzcmM9XCIvaW1nL0Rpc2UxOTUxNzdvX3Npbl90MTk1MTczdHVsby53ZWJwXCJcbiAgICAgICAgICAgICAgYWx0PVwiY2VydGlmaWNhZG8gZHVuc1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvRHVuc0ltZ0Rpdj5cbiAgICAgICAgICA8RHVuc1RleERpdj5cbiAgICAgICAgICAgIDxEdW5zVGV4dG8+XG4gICAgICAgICAgICAgIEhhbmQgSGVsZCBTb2x1dGlvbnMgY3VlbnRhIGNvbiBjZXJ0aWZpY2FjacOzbiBELVUtTi1TIDk1MTU5MDkwM1xuICAgICAgICAgICAgICAoZW1pdGlkbyBwb3IgbGEgaW5zdGl0dWNpw7NuIGludGVybmFjaW9uYWwgQ2lhbCBEdW4gJiBCcmFuc3RyZWV0LFxuICAgICAgICAgICAgICBxdWnDqW4gZXZhbMO6YSBsYSBmaWFiaWxpZGFkIHkgZXN0YWJpbGlkYWQgZmluYW5jaWVyYSBkZSBudWVzdHJhXG4gICAgICAgICAgICAgIGVtcHJlc2EgcGFyYSByZWFsaXphciB1biBhcmNoaXZvIGRlIGNyw6lkaXRvIGNvbWVyY2lhbFxuICAgICAgICAgICAgICBpbnRlcm5hY2lvbmFsLlxuICAgICAgICAgICAgPC9EdW5zVGV4dG8+XG4gICAgICAgICAgPC9EdW5zVGV4RGl2PlxuICAgICAgICAgIDxEdW5zSW1nRGl2PlxuICAgICAgICAgICAgPER1bnNJbWFnZW5cbiAgICAgICAgICAgICAgc3JjPVwiL2ltZy9DZXJ0aWZpY2FkbyBJU04ucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiY2VydGlmaWNhZG8gSVNOXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9EdW5zSW1nRGl2PlxuICAgICAgICAgIDxEdW5zVGV4RGl2PlxuICAgICAgICAgICAgPER1bnNUZXh0bz5cbiAgICAgICAgICAgICAgSGFuZCBIZWxkIFNvbHV0aW9ucyBjdWVudGEgY29uIGNlcnRpZmljYWNpw7NuIElTTmV0d29ybGQsIGN1bXBsaWVuZG9cbiAgICAgICAgICAgICAgcmVxdWlzaXRvcyBpbnRlcm5vcyB5IGd1YmVybmFtZW50YWxlcyBlbiBtYXRlcmlhIGRlIHNhbHVkLCBzZWd1cmlkYWQsXG4gICAgICAgICAgICAgIGNhbGlkYWQgeSByaWVzZ28uXG4gICAgICAgICAgICA8L0R1bnNUZXh0bz5cbiAgICAgICAgICA8L0R1bnNUZXhEaXY+XG4gICAgICAgIDwvRHVuc0Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENsaWVudGVzO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const DunsTexto = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "e1hn2cxe0",
    label: "DunsTexto"
  })(false ? undefined : {
    name: "182z7k0",
    styles: "font-size:16px;text-align:justify;font-weight:bold;opacity:0.5;@media (max-width: 750px){font-size:16px;}@media (max-width: 600px){font-size:14px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENsaWVudGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThGNEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ2xpZW50ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgQ2xpZW50ZXMgPSAoKSA9PiB7XG4gIGNvbnN0IFRpdHVsb0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDU1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDQzNnB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYDtcblxuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiA4NSU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IER1bnNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc0ltZ0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDE4JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpIHtcbiAgICAgIHdpZHRoOiAyMiU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogMzIlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDQ1JTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IER1bnNJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IER1bnNUZXhEaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAzMiU7XG4gICAgcGFkZGluZzogMjBweDtcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA1MCU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRHVuc1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgb3BhY2l0eTogMC41O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8VGl0dWxvRGl2IGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICA8VGl0dWxvPlxuICAgICAgICAgICAgwqFNw4FTIFFVRSBDTElFTlRFUywgQ1JFQU1PUyBSRUxBQ0lPTkVTIVxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICBBTEdVTkFTIERFIEVTVEFTIFJFTEFDSU9ORVMgU09OIENPTiBFTVBSRVNBUyBDT01POlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICA8SW1hZ2VuXG4gICAgICAgICAgICBzcmM9XCIvaW1nL2FubmVyX2RlX2NsaWVudGVzX3AxOTUxNjFnaW5hX3dlYl80Xy53ZWJwXCJcbiAgICAgICAgICAgIGFsdD1cImNsaWVudGVzIGRlIGhhbmQgaGVsZCBzb2x1dGlvbnNcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICA8RHVuc0RpdiBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPER1bnNJbWdEaXY+XG4gICAgICAgICAgICA8RHVuc0ltYWdlblxuICAgICAgICAgICAgICBzcmM9XCIvaW1nL0Rpc2UxOTUxNzdvX3Npbl90MTk1MTczdHVsby53ZWJwXCJcbiAgICAgICAgICAgICAgYWx0PVwiY2VydGlmaWNhZG8gZHVuc1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvRHVuc0ltZ0Rpdj5cbiAgICAgICAgICA8RHVuc1RleERpdj5cbiAgICAgICAgICAgIDxEdW5zVGV4dG8+XG4gICAgICAgICAgICAgIEhhbmQgSGVsZCBTb2x1dGlvbnMgY3VlbnRhIGNvbiBjZXJ0aWZpY2FjacOzbiBELVUtTi1TIDk1MTU5MDkwM1xuICAgICAgICAgICAgICAoZW1pdGlkbyBwb3IgbGEgaW5zdGl0dWNpw7NuIGludGVybmFjaW9uYWwgQ2lhbCBEdW4gJiBCcmFuc3RyZWV0LFxuICAgICAgICAgICAgICBxdWnDqW4gZXZhbMO6YSBsYSBmaWFiaWxpZGFkIHkgZXN0YWJpbGlkYWQgZmluYW5jaWVyYSBkZSBudWVzdHJhXG4gICAgICAgICAgICAgIGVtcHJlc2EgcGFyYSByZWFsaXphciB1biBhcmNoaXZvIGRlIGNyw6lkaXRvIGNvbWVyY2lhbFxuICAgICAgICAgICAgICBpbnRlcm5hY2lvbmFsLlxuICAgICAgICAgICAgPC9EdW5zVGV4dG8+XG4gICAgICAgICAgPC9EdW5zVGV4RGl2PlxuICAgICAgICAgIDxEdW5zSW1nRGl2PlxuICAgICAgICAgICAgPER1bnNJbWFnZW5cbiAgICAgICAgICAgICAgc3JjPVwiL2ltZy9DZXJ0aWZpY2FkbyBJU04ucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiY2VydGlmaWNhZG8gSVNOXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9EdW5zSW1nRGl2PlxuICAgICAgICAgIDxEdW5zVGV4RGl2PlxuICAgICAgICAgICAgPER1bnNUZXh0bz5cbiAgICAgICAgICAgICAgSGFuZCBIZWxkIFNvbHV0aW9ucyBjdWVudGEgY29uIGNlcnRpZmljYWNpw7NuIElTTmV0d29ybGQsIGN1bXBsaWVuZG9cbiAgICAgICAgICAgICAgcmVxdWlzaXRvcyBpbnRlcm5vcyB5IGd1YmVybmFtZW50YWxlcyBlbiBtYXRlcmlhIGRlIHNhbHVkLCBzZWd1cmlkYWQsXG4gICAgICAgICAgICAgIGNhbGlkYWQgeSByaWVzZ28uXG4gICAgICAgICAgICA8L0R1bnNUZXh0bz5cbiAgICAgICAgICA8L0R1bnNUZXhEaXY+XG4gICAgICAgIDwvRHVuc0Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENsaWVudGVzO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("section", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 112,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TituloDiv, {
    className: "mt-5",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 113,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Titulo, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 114,
      columnNumber: 11
    }
  }, "\xA1M\xC1S QUE CLIENTES, CREAMOS RELACIONES!", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 116,
      columnNumber: 13
    }
  }), "ALGUNAS DE ESTAS RELACIONES SON CON EMPRESAS COMO:")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(ImagenDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 120,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Imagen, {
    src: "/img/anner_de_clientes_p195161gina_web_4_.webp",
    alt: "clientes de hand held solutions",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 121,
      columnNumber: 11
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(DunsDiv, {
    className: "mt-5",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 126,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(DunsImgDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 127,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(DunsImagen, {
    src: "/img/Dise195177o_sin_t195173tulo.webp",
    alt: "certificado duns",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 128,
      columnNumber: 13
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(DunsTexDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 133,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(DunsTexto, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 134,
      columnNumber: 13
    }
  }, "Hand Held Solutions cuenta con certificaci\xF3n D-U-N-S 951590903 (emitido por la instituci\xF3n internacional Cial Dun & Branstreet, qui\xE9n eval\xFAa la fiabilidad y estabilidad financiera de nuestra empresa para realizar un archivo de cr\xE9dito comercial internacional.")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(DunsImgDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 142,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(DunsImagen, {
    src: "/img/Certificado ISN.png",
    alt: "certificado ISN",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 143,
      columnNumber: 13
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(DunsTexDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 148,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(DunsTexto, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 149,
      columnNumber: 13
    }
  }, "Hand Held Solutions cuenta con certificaci\xF3n ISNetworld, cumpliendo requisitos internos y gubernamentales en materia de salud, seguridad, calidad y riesgo.")))));
};

/* harmony default export */ __webpack_exports__["default"] = (Clientes);

/***/ }),

/***/ "./components/layout/Contacto.js":
/*!***************************************!*\
  !*** ./components/layout/Contacto.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _config_FormEmail__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config/FormEmail */ "./config/FormEmail.js");
/* harmony import */ var react_iframe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-iframe */ "react-iframe");
/* harmony import */ var react_iframe__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_iframe__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-bootstrap */ "react-bootstrap");
/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _static_PoliticaTex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../static/PoliticaTex */ "./static/PoliticaTex.js");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_6__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\Contacto.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }








const Contacto = () => {
  const Contenedor = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1a4nrk98",
    label: "Contenedor"
  })(false ? undefined : {
    name: "5llyum",
    styles: "display:flex;width:100%;@media (max-width: 805px){display:grid;width:100%;justify-content:center;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENvbnRhY3RvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVMrQiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxDb250YWN0by5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5pbXBvcnQgRm9ybUVtYWlsIGZyb20gXCIuLi8uLi9jb25maWcvRm9ybUVtYWlsXCI7XG5pbXBvcnQgSWZyYW1lIGZyb20gXCJyZWFjdC1pZnJhbWVcIjtcbmltcG9ydCB7IE1vZGFsLCBCdXR0b24gfSBmcm9tIFwicmVhY3QtYm9vdHN0cmFwXCI7XG5cbmltcG9ydCBQb2xpdGljYXMgZnJvbSBcIi4uLy4uL3N0YXRpYy9Qb2xpdGljYVRleFwiO1xuXG5jb25zdCBDb250YWN0byA9ICgpID0+IHtcbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4MDVweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEZvcm11bGFyaW9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiA0NCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNzZjMDtcbiAgICBtYXJnaW4tdG9wOiA0cmVtO1xuICAgIGJvcmRlci1yYWRpdXM6IDFyZW07XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgbWFyZ2luLWxlZnQ6IDUuM3JlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMzUwcHgpIHtcbiAgICAgIHdpZHRoOiA0MCU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDExMTBweCkge1xuICAgICAgd2lkdGg6IDM3JTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogODA1cHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDcwMHB4KSB7XG4gICAgICB3aWR0aDogNzAlO1xuICAgICAgbWFyZ2luOiA0cmVtIGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFBvbGl0aWNhc0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgbWFyZ2luLXRvcDogMXJlbTtcbiAgICB3aWR0aDogMTAwJTtcbiAgYDtcblxuICBjb25zdCBEaXJlID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgYDtcblxuICBjb25zdCBEaXJlVGl0RGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgYDtcblxuICBjb25zdCBEaXJlVGl0ID0gc3R5bGVkLmgxYFxuICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgYDtcblxuICBjb25zdCBEaXJlRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcbiAgYDtcblxuICBjb25zdCBEaXJlVGV4ID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxNHB4O1xuICAgIG1hcmdpbjogMHB4O1xuICBgO1xuXG4gIGNvbnN0IE1hcERpdiA9IHN0eWxlZC5kaXZgXG4gICAgbWFyZ2luLXRvcDogNHJlbTtcbiAgICB3aWR0aDogNDYlO1xuICAgIG1hcmdpbi1sZWZ0OiAyLjVyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogODA1cHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDcwMHB4KSB7XG4gICAgICB3aWR0aDogNzAlO1xuICAgICAgbWFyZ2luOiAwcmVtIGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFthYmllcnRvQW51bmNpb3MsIGNhbWJpYXJBYmllcnRvQW51bmNpb3NdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGFicmlyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBjZXJyYXJNb2RhbCA9ICgpID0+IHtcbiAgICBjYW1iaWFyQWJpZXJ0b0FudW5jaW9zKGZhbHNlKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8c2VjdGlvbiBpZD1cImNvbnRhY3RvXCIgY2xhc3NOYW1lPVwiY29uXCI+XG4gICAgICAgIDxDb250ZW5lZG9yPlxuICAgICAgICAgIDxGb3JtdWxhcmlvRGl2PlxuICAgICAgICAgICAgPEZvcm1FbWFpbCAvPlxuICAgICAgICAgICAgPFBvbGl0aWNhc0Rpdj5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicG9saXRpY2FzXCI+XG4gICAgICAgICAgICAgICAgQWwgZGFyIGNsaWNrIGVuIGVsIGJvdMOzbiBkZSBlbnZpYXIgc2UgZXN0YSBhY2VwdGFuZG8gbnVlc3RyYXtcIiBcIn1cbiAgICAgICAgICAgICAgICA8YSBvbkNsaWNrPXthYnJpck1vZGFsfT5wb2zDrXRpY2EgZGUgcHJpdmFjaWRhZC48L2E+XG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDwvUG9saXRpY2FzRGl2PlxuICAgICAgICAgIDwvRm9ybXVsYXJpb0Rpdj5cbiAgICAgICAgICA8TWFwRGl2PlxuICAgICAgICAgICAgPERpcmU+XG4gICAgICAgICAgICAgIDxEaXJlVGl0RGl2PlxuICAgICAgICAgICAgICAgIDxEaXJlVGl0PlViaWNhY2nDs248L0RpcmVUaXQ+XG4gICAgICAgICAgICAgIDwvRGlyZVRpdERpdj5cbiAgICAgICAgICAgICAgPERpcmVEaXY+XG4gICAgICAgICAgICAgICAgPERpcmVUZXg+XG4gICAgICAgICAgICAgICAgICBDYWxsZS4gUGFsZW5xdWUsIExldHJhbiBWYWxsZSwgQmVuaXRvIEp1w6FyZXosIDAzNjUwIENETVhcbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgVGVsw6lmb25vOiAoKzUyKSA1NSA3NTk5IDYyNzIgLyAoKzUyKSA1NSA1MTE1IDYwNDM8YnIgLz5cbiAgICAgICAgICAgICAgICAgIEhvcmFyaW9zIGRlIGF0ZW5jacOzbiBkZSBMdW5lcyBhIFZpZXJuZXMgZGUgOTowMCBBTSBhIDY6MDAgUE1cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICBUZW5lbW9zIGNvYmVydHVyYSBhIHRvZGEgbGEgUmVww7pibGljYSBNZXhpY2FuYTogQ2l1ZGFkIGRlIE3DqXhpY28sIEphbGlzY28sIFRvbHVjYSwgTnVldm8gTGXDs24sIEd1YW5hanVhdG8sIFB1ZWJsYSwgVmVyYWNydXosIFF1ZXJldGFybywgTWljaG9hY2FuLCBDb2FodWlsYSwgWXVjYXRhbiwgQ2hpaHVhaHVhLCBUYWJhc2NvLCBDaGlhcGFzLCBTYW4gTHVpcyBQb3Rvc8OtXG4gICAgICAgICAgICBIaWRhbGdvLCBBZ3Vhc2NhbGllbnRlcywgR3VlcnJlcm8sIE1vcmVsb3MsIFF1aW50YW5hIFJvbywgT2F4YWNhLCBUYW1hdWxpcGFzLCBTaW5hbG9hLCBTb25vcmEsIEJhamEgQ2FsaWZvcm5pYSwgQ2FtcGVjaGUsIFRsYXhjYWxhLCBDb2xpbWEsIER1cmFuZ28sIE5heWFyaXQsIFphY2F0ZWNhcywgQmFqYSBDYWxpZm9ybmlhIFN1ci4gXG4gICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8L0RpcmVUZXg+XG4gICAgICAgICAgICAgIDwvRGlyZURpdj5cbiAgICAgICAgICAgIDwvRGlyZT5cbiAgICAgICAgICAgIDxJZnJhbWVcbiAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL2VtYmVkP3BiPSExbTE4ITFtMTIhMW0zITFkOTQwLjk2NDgwMTY5MTQwNTUhMmQtOTkuMTU1NDE2MzcwNzcyMDQhM2QxOS4zNzUyNDgwNjQzMzUxMTghMm0zITFmMCEyZjAhM2YwITNtMiExaTEwMjQhMmk3NjghNGYxMy4xITNtMyExbTIhMXMweDg1ZDFmYzRhZDAyYmU1MzklM0EweDJlYWRiMzdjMjkwZGVhNTIhMnNIYW5kJTIwSGVsZCUyMFNvbHV0aW9ucyE1ZTAhM20yITFzZXMtNDE5ITJzbXghNHYxNTk0MTg4MzkzMjIwITVtMiExc2VzLTQxOSEyc214XCJcbiAgICAgICAgICAgICAgd2lkdGg9XCIxMDAlXCJcbiAgICAgICAgICAgICAgaGVpZ2h0PVwiMzUwXCJcbiAgICAgICAgICAgICAgZnJhbWVib3JkZXI9XCIwXCJcbiAgICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJmYWxzZVwiXG4gICAgICAgICAgICAgIHRhYmluZGV4PVwiMFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvTWFwRGl2PlxuICAgICAgICA8L0NvbnRlbmVkb3I+XG4gICAgICAgIDxNb2RhbFxuICAgICAgICAgIHNob3c9e2FiaWVydG9BbnVuY2lvc31cbiAgICAgICAgICBvbkhpZGU9e2NlcnJhck1vZGFsfVxuICAgICAgICAgIGtleWJvYXJkPXtmYWxzZX1cbiAgICAgICAgICBzaXplPVwibGdcIlxuICAgICAgICA+XG4gICAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cbiAgICAgICAgICAgIDxNb2RhbC5UaXRsZT5BbnVuY2lvczwvTW9kYWwuVGl0bGU+XG4gICAgICAgICAgPC9Nb2RhbC5IZWFkZXI+XG4gICAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgICA8UG9saXRpY2FzIC8+XG4gICAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICAgIDxNb2RhbC5Gb290ZXI+XG4gICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJsaWdodFwiIG9uQ2xpY2s9e2NlcnJhck1vZGFsfT5cbiAgICAgICAgICAgICAgQ2VycmFyXG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L01vZGFsLkZvb3Rlcj5cbiAgICAgICAgPC9Nb2RhbD5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRhY3RvO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const FormularioDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1a4nrk97",
    label: "FormularioDiv"
  })(false ? undefined : {
    name: "1aufl7w",
    styles: "width:44%;background-color:#0076c0;margin-top:4rem;border-radius:1rem;color:white;padding:10px;margin-left:5.3rem;@media (max-width: 1350px){width:40%;}@media (max-width: 1110px){width:37%;}@media (max-width: 805px){margin-left:0;width:100%;}@media (max-width: 700px){width:70%;margin:4rem auto;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENvbnRhY3RvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9Ca0MiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ29udGFjdG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IEZvcm1FbWFpbCBmcm9tIFwiLi4vLi4vY29uZmlnL0Zvcm1FbWFpbFwiO1xuaW1wb3J0IElmcmFtZSBmcm9tIFwicmVhY3QtaWZyYW1lXCI7XG5pbXBvcnQgeyBNb2RhbCwgQnV0dG9uIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuXG5pbXBvcnQgUG9saXRpY2FzIGZyb20gXCIuLi8uLi9zdGF0aWMvUG9saXRpY2FUZXhcIjtcblxuY29uc3QgQ29udGFjdG8gPSAoKSA9PiB7XG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogODA1cHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBGb3JtdWxhcmlvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNDQlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgbWFyZ2luLXRvcDogNHJlbTtcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiA1LjNyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTM1MHB4KSB7XG4gICAgICB3aWR0aDogNDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTEwcHgpIHtcbiAgICAgIHdpZHRoOiAzNyU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogNHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBQb2xpdGljYXNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZSA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdERpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdCA9IHN0eWxlZC5oMWBcbiAgICBmb250LXNpemU6IDI0cHg7XG4gIGA7XG5cbiAgY29uc3QgRGlyZURpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDJyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRleCA9IHN0eWxlZC5wYFxuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBsaW5lLWhlaWdodDogMTRweDtcbiAgICBtYXJnaW46IDBweDtcbiAgYDtcblxuICBjb25zdCBNYXBEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDRyZW07XG4gICAgd2lkdGg6IDQ2JTtcbiAgICBtYXJnaW4tbGVmdDogMi41cmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogMHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBbYWJpZXJ0b0FudW5jaW9zLCBjYW1iaWFyQWJpZXJ0b0FudW5jaW9zXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBhYnJpck1vZGFsID0gKCkgPT4ge1xuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3ModHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgY2VycmFyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyhmYWxzZSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJjb250YWN0b1wiIGNsYXNzTmFtZT1cImNvblwiPlxuICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICA8Rm9ybXVsYXJpb0Rpdj5cbiAgICAgICAgICAgIDxGb3JtRW1haWwgLz5cbiAgICAgICAgICAgIDxQb2xpdGljYXNEaXY+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInBvbGl0aWNhc1wiPlxuICAgICAgICAgICAgICAgIEFsIGRhciBjbGljayBlbiBlbCBib3TDs24gZGUgZW52aWFyIHNlIGVzdGEgYWNlcHRhbmRvIG51ZXN0cmF7XCIgXCJ9XG4gICAgICAgICAgICAgICAgPGEgb25DbGljaz17YWJyaXJNb2RhbH0+cG9sw610aWNhIGRlIHByaXZhY2lkYWQuPC9hPlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8L1BvbGl0aWNhc0Rpdj5cbiAgICAgICAgICA8L0Zvcm11bGFyaW9EaXY+XG4gICAgICAgICAgPE1hcERpdj5cbiAgICAgICAgICAgIDxEaXJlPlxuICAgICAgICAgICAgICA8RGlyZVRpdERpdj5cbiAgICAgICAgICAgICAgICA8RGlyZVRpdD5VYmljYWNpw7NuPC9EaXJlVGl0PlxuICAgICAgICAgICAgICA8L0RpcmVUaXREaXY+XG4gICAgICAgICAgICAgIDxEaXJlRGl2PlxuICAgICAgICAgICAgICAgIDxEaXJlVGV4PlxuICAgICAgICAgICAgICAgICAgQ2FsbGUuIFBhbGVucXVlLCBMZXRyYW4gVmFsbGUsIEJlbml0byBKdcOhcmV6LCAwMzY1MCBDRE1YXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIFRlbMOpZm9ubzogKCs1MikgNTUgNzU5OSA2MjcyIC8gKCs1MikgNTUgNTExNSA2MDQzPGJyIC8+XG4gICAgICAgICAgICAgICAgICBIb3JhcmlvcyBkZSBhdGVuY2nDs24gZGUgTHVuZXMgYSBWaWVybmVzIGRlIDk6MDAgQU0gYSA2OjAwIFBNXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgVGVuZW1vcyBjb2JlcnR1cmEgYSB0b2RhIGxhIFJlcMO6YmxpY2EgTWV4aWNhbmE6IENpdWRhZCBkZSBNw6l4aWNvLCBKYWxpc2NvLCBUb2x1Y2EsIE51ZXZvIExlw7NuLCBHdWFuYWp1YXRvLCBQdWVibGEsIFZlcmFjcnV6LCBRdWVyZXRhcm8sIE1pY2hvYWNhbiwgQ29haHVpbGEsIFl1Y2F0YW4sIENoaWh1YWh1YSwgVGFiYXNjbywgQ2hpYXBhcywgU2FuIEx1aXMgUG90b3PDrVxuICAgICAgICAgICAgSGlkYWxnbywgQWd1YXNjYWxpZW50ZXMsIEd1ZXJyZXJvLCBNb3JlbG9zLCBRdWludGFuYSBSb28sIE9heGFjYSwgVGFtYXVsaXBhcywgU2luYWxvYSwgU29ub3JhLCBCYWphIENhbGlmb3JuaWEsIENhbXBlY2hlLCBUbGF4Y2FsYSwgQ29saW1hLCBEdXJhbmdvLCBOYXlhcml0LCBaYWNhdGVjYXMsIEJhamEgQ2FsaWZvcm5pYSBTdXIuIFxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPC9EaXJlVGV4PlxuICAgICAgICAgICAgICA8L0RpcmVEaXY+XG4gICAgICAgICAgICA8L0RpcmU+XG4gICAgICAgICAgICA8SWZyYW1lXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9lbWJlZD9wYj0hMW0xOCExbTEyITFtMyExZDk0MC45NjQ4MDE2OTE0MDU1ITJkLTk5LjE1NTQxNjM3MDc3MjA0ITNkMTkuMzc1MjQ4MDY0MzM1MTE4ITJtMyExZjAhMmYwITNmMCEzbTIhMWkxMDI0ITJpNzY4ITRmMTMuMSEzbTMhMW0yITFzMHg4NWQxZmM0YWQwMmJlNTM5JTNBMHgyZWFkYjM3YzI5MGRlYTUyITJzSGFuZCUyMEhlbGQlMjBTb2x1dGlvbnMhNWUwITNtMiExc2VzLTQxOSEyc214ITR2MTU5NDE4ODM5MzIyMCE1bTIhMXNlcy00MTkhMnNteFwiXG4gICAgICAgICAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICAgICAgICAgIGhlaWdodD1cIjM1MFwiXG4gICAgICAgICAgICAgIGZyYW1lYm9yZGVyPVwiMFwiXG4gICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwiZmFsc2VcIlxuICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L01hcERpdj5cbiAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8TW9kYWxcbiAgICAgICAgICBzaG93PXthYmllcnRvQW51bmNpb3N9XG4gICAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbH1cbiAgICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxNb2RhbC5IZWFkZXIgY2xvc2VCdXR0b24+XG4gICAgICAgICAgICA8TW9kYWwuVGl0bGU+QW51bmNpb3M8L01vZGFsLlRpdGxlPlxuICAgICAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPFBvbGl0aWNhcyAvPlxuICAgICAgICAgIDwvTW9kYWwuQm9keT5cbiAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBvbkNsaWNrPXtjZXJyYXJNb2RhbH0+XG4gICAgICAgICAgICAgIENlcnJhclxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgIDwvTW9kYWw+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb250YWN0bztcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const PoliticasDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1a4nrk96",
    label: "PoliticasDiv"
  })(false ? undefined : {
    name: "12dms0z",
    styles: "margin-top:1rem;width:100%",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENvbnRhY3RvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdEaUMiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ29udGFjdG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IEZvcm1FbWFpbCBmcm9tIFwiLi4vLi4vY29uZmlnL0Zvcm1FbWFpbFwiO1xuaW1wb3J0IElmcmFtZSBmcm9tIFwicmVhY3QtaWZyYW1lXCI7XG5pbXBvcnQgeyBNb2RhbCwgQnV0dG9uIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuXG5pbXBvcnQgUG9saXRpY2FzIGZyb20gXCIuLi8uLi9zdGF0aWMvUG9saXRpY2FUZXhcIjtcblxuY29uc3QgQ29udGFjdG8gPSAoKSA9PiB7XG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogODA1cHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBGb3JtdWxhcmlvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNDQlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgbWFyZ2luLXRvcDogNHJlbTtcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiA1LjNyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTM1MHB4KSB7XG4gICAgICB3aWR0aDogNDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTEwcHgpIHtcbiAgICAgIHdpZHRoOiAzNyU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogNHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBQb2xpdGljYXNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZSA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdERpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdCA9IHN0eWxlZC5oMWBcbiAgICBmb250LXNpemU6IDI0cHg7XG4gIGA7XG5cbiAgY29uc3QgRGlyZURpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDJyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRleCA9IHN0eWxlZC5wYFxuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBsaW5lLWhlaWdodDogMTRweDtcbiAgICBtYXJnaW46IDBweDtcbiAgYDtcblxuICBjb25zdCBNYXBEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDRyZW07XG4gICAgd2lkdGg6IDQ2JTtcbiAgICBtYXJnaW4tbGVmdDogMi41cmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogMHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBbYWJpZXJ0b0FudW5jaW9zLCBjYW1iaWFyQWJpZXJ0b0FudW5jaW9zXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBhYnJpck1vZGFsID0gKCkgPT4ge1xuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3ModHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgY2VycmFyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyhmYWxzZSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJjb250YWN0b1wiIGNsYXNzTmFtZT1cImNvblwiPlxuICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICA8Rm9ybXVsYXJpb0Rpdj5cbiAgICAgICAgICAgIDxGb3JtRW1haWwgLz5cbiAgICAgICAgICAgIDxQb2xpdGljYXNEaXY+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInBvbGl0aWNhc1wiPlxuICAgICAgICAgICAgICAgIEFsIGRhciBjbGljayBlbiBlbCBib3TDs24gZGUgZW52aWFyIHNlIGVzdGEgYWNlcHRhbmRvIG51ZXN0cmF7XCIgXCJ9XG4gICAgICAgICAgICAgICAgPGEgb25DbGljaz17YWJyaXJNb2RhbH0+cG9sw610aWNhIGRlIHByaXZhY2lkYWQuPC9hPlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8L1BvbGl0aWNhc0Rpdj5cbiAgICAgICAgICA8L0Zvcm11bGFyaW9EaXY+XG4gICAgICAgICAgPE1hcERpdj5cbiAgICAgICAgICAgIDxEaXJlPlxuICAgICAgICAgICAgICA8RGlyZVRpdERpdj5cbiAgICAgICAgICAgICAgICA8RGlyZVRpdD5VYmljYWNpw7NuPC9EaXJlVGl0PlxuICAgICAgICAgICAgICA8L0RpcmVUaXREaXY+XG4gICAgICAgICAgICAgIDxEaXJlRGl2PlxuICAgICAgICAgICAgICAgIDxEaXJlVGV4PlxuICAgICAgICAgICAgICAgICAgQ2FsbGUuIFBhbGVucXVlLCBMZXRyYW4gVmFsbGUsIEJlbml0byBKdcOhcmV6LCAwMzY1MCBDRE1YXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIFRlbMOpZm9ubzogKCs1MikgNTUgNzU5OSA2MjcyIC8gKCs1MikgNTUgNTExNSA2MDQzPGJyIC8+XG4gICAgICAgICAgICAgICAgICBIb3JhcmlvcyBkZSBhdGVuY2nDs24gZGUgTHVuZXMgYSBWaWVybmVzIGRlIDk6MDAgQU0gYSA2OjAwIFBNXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgVGVuZW1vcyBjb2JlcnR1cmEgYSB0b2RhIGxhIFJlcMO6YmxpY2EgTWV4aWNhbmE6IENpdWRhZCBkZSBNw6l4aWNvLCBKYWxpc2NvLCBUb2x1Y2EsIE51ZXZvIExlw7NuLCBHdWFuYWp1YXRvLCBQdWVibGEsIFZlcmFjcnV6LCBRdWVyZXRhcm8sIE1pY2hvYWNhbiwgQ29haHVpbGEsIFl1Y2F0YW4sIENoaWh1YWh1YSwgVGFiYXNjbywgQ2hpYXBhcywgU2FuIEx1aXMgUG90b3PDrVxuICAgICAgICAgICAgSGlkYWxnbywgQWd1YXNjYWxpZW50ZXMsIEd1ZXJyZXJvLCBNb3JlbG9zLCBRdWludGFuYSBSb28sIE9heGFjYSwgVGFtYXVsaXBhcywgU2luYWxvYSwgU29ub3JhLCBCYWphIENhbGlmb3JuaWEsIENhbXBlY2hlLCBUbGF4Y2FsYSwgQ29saW1hLCBEdXJhbmdvLCBOYXlhcml0LCBaYWNhdGVjYXMsIEJhamEgQ2FsaWZvcm5pYSBTdXIuIFxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPC9EaXJlVGV4PlxuICAgICAgICAgICAgICA8L0RpcmVEaXY+XG4gICAgICAgICAgICA8L0RpcmU+XG4gICAgICAgICAgICA8SWZyYW1lXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9lbWJlZD9wYj0hMW0xOCExbTEyITFtMyExZDk0MC45NjQ4MDE2OTE0MDU1ITJkLTk5LjE1NTQxNjM3MDc3MjA0ITNkMTkuMzc1MjQ4MDY0MzM1MTE4ITJtMyExZjAhMmYwITNmMCEzbTIhMWkxMDI0ITJpNzY4ITRmMTMuMSEzbTMhMW0yITFzMHg4NWQxZmM0YWQwMmJlNTM5JTNBMHgyZWFkYjM3YzI5MGRlYTUyITJzSGFuZCUyMEhlbGQlMjBTb2x1dGlvbnMhNWUwITNtMiExc2VzLTQxOSEyc214ITR2MTU5NDE4ODM5MzIyMCE1bTIhMXNlcy00MTkhMnNteFwiXG4gICAgICAgICAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICAgICAgICAgIGhlaWdodD1cIjM1MFwiXG4gICAgICAgICAgICAgIGZyYW1lYm9yZGVyPVwiMFwiXG4gICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwiZmFsc2VcIlxuICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L01hcERpdj5cbiAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8TW9kYWxcbiAgICAgICAgICBzaG93PXthYmllcnRvQW51bmNpb3N9XG4gICAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbH1cbiAgICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxNb2RhbC5IZWFkZXIgY2xvc2VCdXR0b24+XG4gICAgICAgICAgICA8TW9kYWwuVGl0bGU+QW51bmNpb3M8L01vZGFsLlRpdGxlPlxuICAgICAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPFBvbGl0aWNhcyAvPlxuICAgICAgICAgIDwvTW9kYWwuQm9keT5cbiAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBvbkNsaWNrPXtjZXJyYXJNb2RhbH0+XG4gICAgICAgICAgICAgIENlcnJhclxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgIDwvTW9kYWw+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb250YWN0bztcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Dire = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1a4nrk95",
    label: "Dire"
  })(false ? undefined : {
    name: "1d3w5wq",
    styles: "width:100%",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENvbnRhY3RvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFEeUIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ29udGFjdG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IEZvcm1FbWFpbCBmcm9tIFwiLi4vLi4vY29uZmlnL0Zvcm1FbWFpbFwiO1xuaW1wb3J0IElmcmFtZSBmcm9tIFwicmVhY3QtaWZyYW1lXCI7XG5pbXBvcnQgeyBNb2RhbCwgQnV0dG9uIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuXG5pbXBvcnQgUG9saXRpY2FzIGZyb20gXCIuLi8uLi9zdGF0aWMvUG9saXRpY2FUZXhcIjtcblxuY29uc3QgQ29udGFjdG8gPSAoKSA9PiB7XG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogODA1cHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBGb3JtdWxhcmlvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNDQlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgbWFyZ2luLXRvcDogNHJlbTtcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiA1LjNyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTM1MHB4KSB7XG4gICAgICB3aWR0aDogNDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTEwcHgpIHtcbiAgICAgIHdpZHRoOiAzNyU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogNHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBQb2xpdGljYXNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZSA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdERpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdCA9IHN0eWxlZC5oMWBcbiAgICBmb250LXNpemU6IDI0cHg7XG4gIGA7XG5cbiAgY29uc3QgRGlyZURpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDJyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRleCA9IHN0eWxlZC5wYFxuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBsaW5lLWhlaWdodDogMTRweDtcbiAgICBtYXJnaW46IDBweDtcbiAgYDtcblxuICBjb25zdCBNYXBEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDRyZW07XG4gICAgd2lkdGg6IDQ2JTtcbiAgICBtYXJnaW4tbGVmdDogMi41cmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogMHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBbYWJpZXJ0b0FudW5jaW9zLCBjYW1iaWFyQWJpZXJ0b0FudW5jaW9zXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBhYnJpck1vZGFsID0gKCkgPT4ge1xuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3ModHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgY2VycmFyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyhmYWxzZSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJjb250YWN0b1wiIGNsYXNzTmFtZT1cImNvblwiPlxuICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICA8Rm9ybXVsYXJpb0Rpdj5cbiAgICAgICAgICAgIDxGb3JtRW1haWwgLz5cbiAgICAgICAgICAgIDxQb2xpdGljYXNEaXY+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInBvbGl0aWNhc1wiPlxuICAgICAgICAgICAgICAgIEFsIGRhciBjbGljayBlbiBlbCBib3TDs24gZGUgZW52aWFyIHNlIGVzdGEgYWNlcHRhbmRvIG51ZXN0cmF7XCIgXCJ9XG4gICAgICAgICAgICAgICAgPGEgb25DbGljaz17YWJyaXJNb2RhbH0+cG9sw610aWNhIGRlIHByaXZhY2lkYWQuPC9hPlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8L1BvbGl0aWNhc0Rpdj5cbiAgICAgICAgICA8L0Zvcm11bGFyaW9EaXY+XG4gICAgICAgICAgPE1hcERpdj5cbiAgICAgICAgICAgIDxEaXJlPlxuICAgICAgICAgICAgICA8RGlyZVRpdERpdj5cbiAgICAgICAgICAgICAgICA8RGlyZVRpdD5VYmljYWNpw7NuPC9EaXJlVGl0PlxuICAgICAgICAgICAgICA8L0RpcmVUaXREaXY+XG4gICAgICAgICAgICAgIDxEaXJlRGl2PlxuICAgICAgICAgICAgICAgIDxEaXJlVGV4PlxuICAgICAgICAgICAgICAgICAgQ2FsbGUuIFBhbGVucXVlLCBMZXRyYW4gVmFsbGUsIEJlbml0byBKdcOhcmV6LCAwMzY1MCBDRE1YXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIFRlbMOpZm9ubzogKCs1MikgNTUgNzU5OSA2MjcyIC8gKCs1MikgNTUgNTExNSA2MDQzPGJyIC8+XG4gICAgICAgICAgICAgICAgICBIb3JhcmlvcyBkZSBhdGVuY2nDs24gZGUgTHVuZXMgYSBWaWVybmVzIGRlIDk6MDAgQU0gYSA2OjAwIFBNXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgVGVuZW1vcyBjb2JlcnR1cmEgYSB0b2RhIGxhIFJlcMO6YmxpY2EgTWV4aWNhbmE6IENpdWRhZCBkZSBNw6l4aWNvLCBKYWxpc2NvLCBUb2x1Y2EsIE51ZXZvIExlw7NuLCBHdWFuYWp1YXRvLCBQdWVibGEsIFZlcmFjcnV6LCBRdWVyZXRhcm8sIE1pY2hvYWNhbiwgQ29haHVpbGEsIFl1Y2F0YW4sIENoaWh1YWh1YSwgVGFiYXNjbywgQ2hpYXBhcywgU2FuIEx1aXMgUG90b3PDrVxuICAgICAgICAgICAgSGlkYWxnbywgQWd1YXNjYWxpZW50ZXMsIEd1ZXJyZXJvLCBNb3JlbG9zLCBRdWludGFuYSBSb28sIE9heGFjYSwgVGFtYXVsaXBhcywgU2luYWxvYSwgU29ub3JhLCBCYWphIENhbGlmb3JuaWEsIENhbXBlY2hlLCBUbGF4Y2FsYSwgQ29saW1hLCBEdXJhbmdvLCBOYXlhcml0LCBaYWNhdGVjYXMsIEJhamEgQ2FsaWZvcm5pYSBTdXIuIFxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPC9EaXJlVGV4PlxuICAgICAgICAgICAgICA8L0RpcmVEaXY+XG4gICAgICAgICAgICA8L0RpcmU+XG4gICAgICAgICAgICA8SWZyYW1lXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9lbWJlZD9wYj0hMW0xOCExbTEyITFtMyExZDk0MC45NjQ4MDE2OTE0MDU1ITJkLTk5LjE1NTQxNjM3MDc3MjA0ITNkMTkuMzc1MjQ4MDY0MzM1MTE4ITJtMyExZjAhMmYwITNmMCEzbTIhMWkxMDI0ITJpNzY4ITRmMTMuMSEzbTMhMW0yITFzMHg4NWQxZmM0YWQwMmJlNTM5JTNBMHgyZWFkYjM3YzI5MGRlYTUyITJzSGFuZCUyMEhlbGQlMjBTb2x1dGlvbnMhNWUwITNtMiExc2VzLTQxOSEyc214ITR2MTU5NDE4ODM5MzIyMCE1bTIhMXNlcy00MTkhMnNteFwiXG4gICAgICAgICAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICAgICAgICAgIGhlaWdodD1cIjM1MFwiXG4gICAgICAgICAgICAgIGZyYW1lYm9yZGVyPVwiMFwiXG4gICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwiZmFsc2VcIlxuICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L01hcERpdj5cbiAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8TW9kYWxcbiAgICAgICAgICBzaG93PXthYmllcnRvQW51bmNpb3N9XG4gICAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbH1cbiAgICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxNb2RhbC5IZWFkZXIgY2xvc2VCdXR0b24+XG4gICAgICAgICAgICA8TW9kYWwuVGl0bGU+QW51bmNpb3M8L01vZGFsLlRpdGxlPlxuICAgICAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPFBvbGl0aWNhcyAvPlxuICAgICAgICAgIDwvTW9kYWwuQm9keT5cbiAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBvbkNsaWNrPXtjZXJyYXJNb2RhbH0+XG4gICAgICAgICAgICAgIENlcnJhclxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgIDwvTW9kYWw+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb250YWN0bztcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const DireTitDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1a4nrk94",
    label: "DireTitDiv"
  })(false ? undefined : {
    name: "1bubblz",
    styles: "width:100%;text-align:center;margin-bottom:1rem",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENvbnRhY3RvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlEK0IiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ29udGFjdG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IEZvcm1FbWFpbCBmcm9tIFwiLi4vLi4vY29uZmlnL0Zvcm1FbWFpbFwiO1xuaW1wb3J0IElmcmFtZSBmcm9tIFwicmVhY3QtaWZyYW1lXCI7XG5pbXBvcnQgeyBNb2RhbCwgQnV0dG9uIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuXG5pbXBvcnQgUG9saXRpY2FzIGZyb20gXCIuLi8uLi9zdGF0aWMvUG9saXRpY2FUZXhcIjtcblxuY29uc3QgQ29udGFjdG8gPSAoKSA9PiB7XG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogODA1cHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBGb3JtdWxhcmlvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNDQlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgbWFyZ2luLXRvcDogNHJlbTtcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiA1LjNyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTM1MHB4KSB7XG4gICAgICB3aWR0aDogNDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTEwcHgpIHtcbiAgICAgIHdpZHRoOiAzNyU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogNHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBQb2xpdGljYXNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZSA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdERpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdCA9IHN0eWxlZC5oMWBcbiAgICBmb250LXNpemU6IDI0cHg7XG4gIGA7XG5cbiAgY29uc3QgRGlyZURpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDJyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRleCA9IHN0eWxlZC5wYFxuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBsaW5lLWhlaWdodDogMTRweDtcbiAgICBtYXJnaW46IDBweDtcbiAgYDtcblxuICBjb25zdCBNYXBEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDRyZW07XG4gICAgd2lkdGg6IDQ2JTtcbiAgICBtYXJnaW4tbGVmdDogMi41cmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogMHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBbYWJpZXJ0b0FudW5jaW9zLCBjYW1iaWFyQWJpZXJ0b0FudW5jaW9zXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBhYnJpck1vZGFsID0gKCkgPT4ge1xuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3ModHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgY2VycmFyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyhmYWxzZSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJjb250YWN0b1wiIGNsYXNzTmFtZT1cImNvblwiPlxuICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICA8Rm9ybXVsYXJpb0Rpdj5cbiAgICAgICAgICAgIDxGb3JtRW1haWwgLz5cbiAgICAgICAgICAgIDxQb2xpdGljYXNEaXY+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInBvbGl0aWNhc1wiPlxuICAgICAgICAgICAgICAgIEFsIGRhciBjbGljayBlbiBlbCBib3TDs24gZGUgZW52aWFyIHNlIGVzdGEgYWNlcHRhbmRvIG51ZXN0cmF7XCIgXCJ9XG4gICAgICAgICAgICAgICAgPGEgb25DbGljaz17YWJyaXJNb2RhbH0+cG9sw610aWNhIGRlIHByaXZhY2lkYWQuPC9hPlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8L1BvbGl0aWNhc0Rpdj5cbiAgICAgICAgICA8L0Zvcm11bGFyaW9EaXY+XG4gICAgICAgICAgPE1hcERpdj5cbiAgICAgICAgICAgIDxEaXJlPlxuICAgICAgICAgICAgICA8RGlyZVRpdERpdj5cbiAgICAgICAgICAgICAgICA8RGlyZVRpdD5VYmljYWNpw7NuPC9EaXJlVGl0PlxuICAgICAgICAgICAgICA8L0RpcmVUaXREaXY+XG4gICAgICAgICAgICAgIDxEaXJlRGl2PlxuICAgICAgICAgICAgICAgIDxEaXJlVGV4PlxuICAgICAgICAgICAgICAgICAgQ2FsbGUuIFBhbGVucXVlLCBMZXRyYW4gVmFsbGUsIEJlbml0byBKdcOhcmV6LCAwMzY1MCBDRE1YXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIFRlbMOpZm9ubzogKCs1MikgNTUgNzU5OSA2MjcyIC8gKCs1MikgNTUgNTExNSA2MDQzPGJyIC8+XG4gICAgICAgICAgICAgICAgICBIb3JhcmlvcyBkZSBhdGVuY2nDs24gZGUgTHVuZXMgYSBWaWVybmVzIGRlIDk6MDAgQU0gYSA2OjAwIFBNXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgVGVuZW1vcyBjb2JlcnR1cmEgYSB0b2RhIGxhIFJlcMO6YmxpY2EgTWV4aWNhbmE6IENpdWRhZCBkZSBNw6l4aWNvLCBKYWxpc2NvLCBUb2x1Y2EsIE51ZXZvIExlw7NuLCBHdWFuYWp1YXRvLCBQdWVibGEsIFZlcmFjcnV6LCBRdWVyZXRhcm8sIE1pY2hvYWNhbiwgQ29haHVpbGEsIFl1Y2F0YW4sIENoaWh1YWh1YSwgVGFiYXNjbywgQ2hpYXBhcywgU2FuIEx1aXMgUG90b3PDrVxuICAgICAgICAgICAgSGlkYWxnbywgQWd1YXNjYWxpZW50ZXMsIEd1ZXJyZXJvLCBNb3JlbG9zLCBRdWludGFuYSBSb28sIE9heGFjYSwgVGFtYXVsaXBhcywgU2luYWxvYSwgU29ub3JhLCBCYWphIENhbGlmb3JuaWEsIENhbXBlY2hlLCBUbGF4Y2FsYSwgQ29saW1hLCBEdXJhbmdvLCBOYXlhcml0LCBaYWNhdGVjYXMsIEJhamEgQ2FsaWZvcm5pYSBTdXIuIFxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPC9EaXJlVGV4PlxuICAgICAgICAgICAgICA8L0RpcmVEaXY+XG4gICAgICAgICAgICA8L0RpcmU+XG4gICAgICAgICAgICA8SWZyYW1lXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9lbWJlZD9wYj0hMW0xOCExbTEyITFtMyExZDk0MC45NjQ4MDE2OTE0MDU1ITJkLTk5LjE1NTQxNjM3MDc3MjA0ITNkMTkuMzc1MjQ4MDY0MzM1MTE4ITJtMyExZjAhMmYwITNmMCEzbTIhMWkxMDI0ITJpNzY4ITRmMTMuMSEzbTMhMW0yITFzMHg4NWQxZmM0YWQwMmJlNTM5JTNBMHgyZWFkYjM3YzI5MGRlYTUyITJzSGFuZCUyMEhlbGQlMjBTb2x1dGlvbnMhNWUwITNtMiExc2VzLTQxOSEyc214ITR2MTU5NDE4ODM5MzIyMCE1bTIhMXNlcy00MTkhMnNteFwiXG4gICAgICAgICAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICAgICAgICAgIGhlaWdodD1cIjM1MFwiXG4gICAgICAgICAgICAgIGZyYW1lYm9yZGVyPVwiMFwiXG4gICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwiZmFsc2VcIlxuICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L01hcERpdj5cbiAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8TW9kYWxcbiAgICAgICAgICBzaG93PXthYmllcnRvQW51bmNpb3N9XG4gICAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbH1cbiAgICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxNb2RhbC5IZWFkZXIgY2xvc2VCdXR0b24+XG4gICAgICAgICAgICA8TW9kYWwuVGl0bGU+QW51bmNpb3M8L01vZGFsLlRpdGxlPlxuICAgICAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPFBvbGl0aWNhcyAvPlxuICAgICAgICAgIDwvTW9kYWwuQm9keT5cbiAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBvbkNsaWNrPXtjZXJyYXJNb2RhbH0+XG4gICAgICAgICAgICAgIENlcnJhclxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgIDwvTW9kYWw+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb250YWN0bztcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const DireTit = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("h1", false ? undefined : {
    target: "e1a4nrk93",
    label: "DireTit"
  })(false ? undefined : {
    name: "1qg6oif",
    styles: "font-size:24px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENvbnRhY3RvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStEMkIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ29udGFjdG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IEZvcm1FbWFpbCBmcm9tIFwiLi4vLi4vY29uZmlnL0Zvcm1FbWFpbFwiO1xuaW1wb3J0IElmcmFtZSBmcm9tIFwicmVhY3QtaWZyYW1lXCI7XG5pbXBvcnQgeyBNb2RhbCwgQnV0dG9uIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuXG5pbXBvcnQgUG9saXRpY2FzIGZyb20gXCIuLi8uLi9zdGF0aWMvUG9saXRpY2FUZXhcIjtcblxuY29uc3QgQ29udGFjdG8gPSAoKSA9PiB7XG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogODA1cHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBGb3JtdWxhcmlvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNDQlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgbWFyZ2luLXRvcDogNHJlbTtcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiA1LjNyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTM1MHB4KSB7XG4gICAgICB3aWR0aDogNDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTEwcHgpIHtcbiAgICAgIHdpZHRoOiAzNyU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogNHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBQb2xpdGljYXNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZSA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdERpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdCA9IHN0eWxlZC5oMWBcbiAgICBmb250LXNpemU6IDI0cHg7XG4gIGA7XG5cbiAgY29uc3QgRGlyZURpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDJyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRleCA9IHN0eWxlZC5wYFxuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBsaW5lLWhlaWdodDogMTRweDtcbiAgICBtYXJnaW46IDBweDtcbiAgYDtcblxuICBjb25zdCBNYXBEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDRyZW07XG4gICAgd2lkdGg6IDQ2JTtcbiAgICBtYXJnaW4tbGVmdDogMi41cmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogMHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBbYWJpZXJ0b0FudW5jaW9zLCBjYW1iaWFyQWJpZXJ0b0FudW5jaW9zXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBhYnJpck1vZGFsID0gKCkgPT4ge1xuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3ModHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgY2VycmFyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyhmYWxzZSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJjb250YWN0b1wiIGNsYXNzTmFtZT1cImNvblwiPlxuICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICA8Rm9ybXVsYXJpb0Rpdj5cbiAgICAgICAgICAgIDxGb3JtRW1haWwgLz5cbiAgICAgICAgICAgIDxQb2xpdGljYXNEaXY+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInBvbGl0aWNhc1wiPlxuICAgICAgICAgICAgICAgIEFsIGRhciBjbGljayBlbiBlbCBib3TDs24gZGUgZW52aWFyIHNlIGVzdGEgYWNlcHRhbmRvIG51ZXN0cmF7XCIgXCJ9XG4gICAgICAgICAgICAgICAgPGEgb25DbGljaz17YWJyaXJNb2RhbH0+cG9sw610aWNhIGRlIHByaXZhY2lkYWQuPC9hPlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8L1BvbGl0aWNhc0Rpdj5cbiAgICAgICAgICA8L0Zvcm11bGFyaW9EaXY+XG4gICAgICAgICAgPE1hcERpdj5cbiAgICAgICAgICAgIDxEaXJlPlxuICAgICAgICAgICAgICA8RGlyZVRpdERpdj5cbiAgICAgICAgICAgICAgICA8RGlyZVRpdD5VYmljYWNpw7NuPC9EaXJlVGl0PlxuICAgICAgICAgICAgICA8L0RpcmVUaXREaXY+XG4gICAgICAgICAgICAgIDxEaXJlRGl2PlxuICAgICAgICAgICAgICAgIDxEaXJlVGV4PlxuICAgICAgICAgICAgICAgICAgQ2FsbGUuIFBhbGVucXVlLCBMZXRyYW4gVmFsbGUsIEJlbml0byBKdcOhcmV6LCAwMzY1MCBDRE1YXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIFRlbMOpZm9ubzogKCs1MikgNTUgNzU5OSA2MjcyIC8gKCs1MikgNTUgNTExNSA2MDQzPGJyIC8+XG4gICAgICAgICAgICAgICAgICBIb3JhcmlvcyBkZSBhdGVuY2nDs24gZGUgTHVuZXMgYSBWaWVybmVzIGRlIDk6MDAgQU0gYSA2OjAwIFBNXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgVGVuZW1vcyBjb2JlcnR1cmEgYSB0b2RhIGxhIFJlcMO6YmxpY2EgTWV4aWNhbmE6IENpdWRhZCBkZSBNw6l4aWNvLCBKYWxpc2NvLCBUb2x1Y2EsIE51ZXZvIExlw7NuLCBHdWFuYWp1YXRvLCBQdWVibGEsIFZlcmFjcnV6LCBRdWVyZXRhcm8sIE1pY2hvYWNhbiwgQ29haHVpbGEsIFl1Y2F0YW4sIENoaWh1YWh1YSwgVGFiYXNjbywgQ2hpYXBhcywgU2FuIEx1aXMgUG90b3PDrVxuICAgICAgICAgICAgSGlkYWxnbywgQWd1YXNjYWxpZW50ZXMsIEd1ZXJyZXJvLCBNb3JlbG9zLCBRdWludGFuYSBSb28sIE9heGFjYSwgVGFtYXVsaXBhcywgU2luYWxvYSwgU29ub3JhLCBCYWphIENhbGlmb3JuaWEsIENhbXBlY2hlLCBUbGF4Y2FsYSwgQ29saW1hLCBEdXJhbmdvLCBOYXlhcml0LCBaYWNhdGVjYXMsIEJhamEgQ2FsaWZvcm5pYSBTdXIuIFxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPC9EaXJlVGV4PlxuICAgICAgICAgICAgICA8L0RpcmVEaXY+XG4gICAgICAgICAgICA8L0RpcmU+XG4gICAgICAgICAgICA8SWZyYW1lXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9lbWJlZD9wYj0hMW0xOCExbTEyITFtMyExZDk0MC45NjQ4MDE2OTE0MDU1ITJkLTk5LjE1NTQxNjM3MDc3MjA0ITNkMTkuMzc1MjQ4MDY0MzM1MTE4ITJtMyExZjAhMmYwITNmMCEzbTIhMWkxMDI0ITJpNzY4ITRmMTMuMSEzbTMhMW0yITFzMHg4NWQxZmM0YWQwMmJlNTM5JTNBMHgyZWFkYjM3YzI5MGRlYTUyITJzSGFuZCUyMEhlbGQlMjBTb2x1dGlvbnMhNWUwITNtMiExc2VzLTQxOSEyc214ITR2MTU5NDE4ODM5MzIyMCE1bTIhMXNlcy00MTkhMnNteFwiXG4gICAgICAgICAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICAgICAgICAgIGhlaWdodD1cIjM1MFwiXG4gICAgICAgICAgICAgIGZyYW1lYm9yZGVyPVwiMFwiXG4gICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwiZmFsc2VcIlxuICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L01hcERpdj5cbiAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8TW9kYWxcbiAgICAgICAgICBzaG93PXthYmllcnRvQW51bmNpb3N9XG4gICAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbH1cbiAgICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxNb2RhbC5IZWFkZXIgY2xvc2VCdXR0b24+XG4gICAgICAgICAgICA8TW9kYWwuVGl0bGU+QW51bmNpb3M8L01vZGFsLlRpdGxlPlxuICAgICAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPFBvbGl0aWNhcyAvPlxuICAgICAgICAgIDwvTW9kYWwuQm9keT5cbiAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBvbkNsaWNrPXtjZXJyYXJNb2RhbH0+XG4gICAgICAgICAgICAgIENlcnJhclxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgIDwvTW9kYWw+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb250YWN0bztcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const DireDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1a4nrk92",
    label: "DireDiv"
  })(false ? undefined : {
    name: "pizyai",
    styles: "width:100%;text-align:center;margin-bottom:2rem",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENvbnRhY3RvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1FNEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ29udGFjdG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IEZvcm1FbWFpbCBmcm9tIFwiLi4vLi4vY29uZmlnL0Zvcm1FbWFpbFwiO1xuaW1wb3J0IElmcmFtZSBmcm9tIFwicmVhY3QtaWZyYW1lXCI7XG5pbXBvcnQgeyBNb2RhbCwgQnV0dG9uIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuXG5pbXBvcnQgUG9saXRpY2FzIGZyb20gXCIuLi8uLi9zdGF0aWMvUG9saXRpY2FUZXhcIjtcblxuY29uc3QgQ29udGFjdG8gPSAoKSA9PiB7XG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogODA1cHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBGb3JtdWxhcmlvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNDQlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgbWFyZ2luLXRvcDogNHJlbTtcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiA1LjNyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTM1MHB4KSB7XG4gICAgICB3aWR0aDogNDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTEwcHgpIHtcbiAgICAgIHdpZHRoOiAzNyU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogNHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBQb2xpdGljYXNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZSA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdERpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdCA9IHN0eWxlZC5oMWBcbiAgICBmb250LXNpemU6IDI0cHg7XG4gIGA7XG5cbiAgY29uc3QgRGlyZURpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDJyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRleCA9IHN0eWxlZC5wYFxuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBsaW5lLWhlaWdodDogMTRweDtcbiAgICBtYXJnaW46IDBweDtcbiAgYDtcblxuICBjb25zdCBNYXBEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDRyZW07XG4gICAgd2lkdGg6IDQ2JTtcbiAgICBtYXJnaW4tbGVmdDogMi41cmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogMHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBbYWJpZXJ0b0FudW5jaW9zLCBjYW1iaWFyQWJpZXJ0b0FudW5jaW9zXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBhYnJpck1vZGFsID0gKCkgPT4ge1xuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3ModHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgY2VycmFyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyhmYWxzZSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJjb250YWN0b1wiIGNsYXNzTmFtZT1cImNvblwiPlxuICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICA8Rm9ybXVsYXJpb0Rpdj5cbiAgICAgICAgICAgIDxGb3JtRW1haWwgLz5cbiAgICAgICAgICAgIDxQb2xpdGljYXNEaXY+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInBvbGl0aWNhc1wiPlxuICAgICAgICAgICAgICAgIEFsIGRhciBjbGljayBlbiBlbCBib3TDs24gZGUgZW52aWFyIHNlIGVzdGEgYWNlcHRhbmRvIG51ZXN0cmF7XCIgXCJ9XG4gICAgICAgICAgICAgICAgPGEgb25DbGljaz17YWJyaXJNb2RhbH0+cG9sw610aWNhIGRlIHByaXZhY2lkYWQuPC9hPlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8L1BvbGl0aWNhc0Rpdj5cbiAgICAgICAgICA8L0Zvcm11bGFyaW9EaXY+XG4gICAgICAgICAgPE1hcERpdj5cbiAgICAgICAgICAgIDxEaXJlPlxuICAgICAgICAgICAgICA8RGlyZVRpdERpdj5cbiAgICAgICAgICAgICAgICA8RGlyZVRpdD5VYmljYWNpw7NuPC9EaXJlVGl0PlxuICAgICAgICAgICAgICA8L0RpcmVUaXREaXY+XG4gICAgICAgICAgICAgIDxEaXJlRGl2PlxuICAgICAgICAgICAgICAgIDxEaXJlVGV4PlxuICAgICAgICAgICAgICAgICAgQ2FsbGUuIFBhbGVucXVlLCBMZXRyYW4gVmFsbGUsIEJlbml0byBKdcOhcmV6LCAwMzY1MCBDRE1YXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIFRlbMOpZm9ubzogKCs1MikgNTUgNzU5OSA2MjcyIC8gKCs1MikgNTUgNTExNSA2MDQzPGJyIC8+XG4gICAgICAgICAgICAgICAgICBIb3JhcmlvcyBkZSBhdGVuY2nDs24gZGUgTHVuZXMgYSBWaWVybmVzIGRlIDk6MDAgQU0gYSA2OjAwIFBNXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgVGVuZW1vcyBjb2JlcnR1cmEgYSB0b2RhIGxhIFJlcMO6YmxpY2EgTWV4aWNhbmE6IENpdWRhZCBkZSBNw6l4aWNvLCBKYWxpc2NvLCBUb2x1Y2EsIE51ZXZvIExlw7NuLCBHdWFuYWp1YXRvLCBQdWVibGEsIFZlcmFjcnV6LCBRdWVyZXRhcm8sIE1pY2hvYWNhbiwgQ29haHVpbGEsIFl1Y2F0YW4sIENoaWh1YWh1YSwgVGFiYXNjbywgQ2hpYXBhcywgU2FuIEx1aXMgUG90b3PDrVxuICAgICAgICAgICAgSGlkYWxnbywgQWd1YXNjYWxpZW50ZXMsIEd1ZXJyZXJvLCBNb3JlbG9zLCBRdWludGFuYSBSb28sIE9heGFjYSwgVGFtYXVsaXBhcywgU2luYWxvYSwgU29ub3JhLCBCYWphIENhbGlmb3JuaWEsIENhbXBlY2hlLCBUbGF4Y2FsYSwgQ29saW1hLCBEdXJhbmdvLCBOYXlhcml0LCBaYWNhdGVjYXMsIEJhamEgQ2FsaWZvcm5pYSBTdXIuIFxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPC9EaXJlVGV4PlxuICAgICAgICAgICAgICA8L0RpcmVEaXY+XG4gICAgICAgICAgICA8L0RpcmU+XG4gICAgICAgICAgICA8SWZyYW1lXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9lbWJlZD9wYj0hMW0xOCExbTEyITFtMyExZDk0MC45NjQ4MDE2OTE0MDU1ITJkLTk5LjE1NTQxNjM3MDc3MjA0ITNkMTkuMzc1MjQ4MDY0MzM1MTE4ITJtMyExZjAhMmYwITNmMCEzbTIhMWkxMDI0ITJpNzY4ITRmMTMuMSEzbTMhMW0yITFzMHg4NWQxZmM0YWQwMmJlNTM5JTNBMHgyZWFkYjM3YzI5MGRlYTUyITJzSGFuZCUyMEhlbGQlMjBTb2x1dGlvbnMhNWUwITNtMiExc2VzLTQxOSEyc214ITR2MTU5NDE4ODM5MzIyMCE1bTIhMXNlcy00MTkhMnNteFwiXG4gICAgICAgICAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICAgICAgICAgIGhlaWdodD1cIjM1MFwiXG4gICAgICAgICAgICAgIGZyYW1lYm9yZGVyPVwiMFwiXG4gICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwiZmFsc2VcIlxuICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L01hcERpdj5cbiAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8TW9kYWxcbiAgICAgICAgICBzaG93PXthYmllcnRvQW51bmNpb3N9XG4gICAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbH1cbiAgICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxNb2RhbC5IZWFkZXIgY2xvc2VCdXR0b24+XG4gICAgICAgICAgICA8TW9kYWwuVGl0bGU+QW51bmNpb3M8L01vZGFsLlRpdGxlPlxuICAgICAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPFBvbGl0aWNhcyAvPlxuICAgICAgICAgIDwvTW9kYWwuQm9keT5cbiAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBvbkNsaWNrPXtjZXJyYXJNb2RhbH0+XG4gICAgICAgICAgICAgIENlcnJhclxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgIDwvTW9kYWw+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb250YWN0bztcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const DireTex = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "e1a4nrk91",
    label: "DireTex"
  })(false ? undefined : {
    name: "m73xzs",
    styles: "font-size:12px;line-height:14px;margin:0px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENvbnRhY3RvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlFMEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ29udGFjdG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IEZvcm1FbWFpbCBmcm9tIFwiLi4vLi4vY29uZmlnL0Zvcm1FbWFpbFwiO1xuaW1wb3J0IElmcmFtZSBmcm9tIFwicmVhY3QtaWZyYW1lXCI7XG5pbXBvcnQgeyBNb2RhbCwgQnV0dG9uIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuXG5pbXBvcnQgUG9saXRpY2FzIGZyb20gXCIuLi8uLi9zdGF0aWMvUG9saXRpY2FUZXhcIjtcblxuY29uc3QgQ29udGFjdG8gPSAoKSA9PiB7XG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogODA1cHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBGb3JtdWxhcmlvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNDQlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgbWFyZ2luLXRvcDogNHJlbTtcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiA1LjNyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTM1MHB4KSB7XG4gICAgICB3aWR0aDogNDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTEwcHgpIHtcbiAgICAgIHdpZHRoOiAzNyU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogNHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBQb2xpdGljYXNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZSA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdERpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdCA9IHN0eWxlZC5oMWBcbiAgICBmb250LXNpemU6IDI0cHg7XG4gIGA7XG5cbiAgY29uc3QgRGlyZURpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDJyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRleCA9IHN0eWxlZC5wYFxuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBsaW5lLWhlaWdodDogMTRweDtcbiAgICBtYXJnaW46IDBweDtcbiAgYDtcblxuICBjb25zdCBNYXBEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDRyZW07XG4gICAgd2lkdGg6IDQ2JTtcbiAgICBtYXJnaW4tbGVmdDogMi41cmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogMHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBbYWJpZXJ0b0FudW5jaW9zLCBjYW1iaWFyQWJpZXJ0b0FudW5jaW9zXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBhYnJpck1vZGFsID0gKCkgPT4ge1xuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3ModHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgY2VycmFyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyhmYWxzZSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJjb250YWN0b1wiIGNsYXNzTmFtZT1cImNvblwiPlxuICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICA8Rm9ybXVsYXJpb0Rpdj5cbiAgICAgICAgICAgIDxGb3JtRW1haWwgLz5cbiAgICAgICAgICAgIDxQb2xpdGljYXNEaXY+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInBvbGl0aWNhc1wiPlxuICAgICAgICAgICAgICAgIEFsIGRhciBjbGljayBlbiBlbCBib3TDs24gZGUgZW52aWFyIHNlIGVzdGEgYWNlcHRhbmRvIG51ZXN0cmF7XCIgXCJ9XG4gICAgICAgICAgICAgICAgPGEgb25DbGljaz17YWJyaXJNb2RhbH0+cG9sw610aWNhIGRlIHByaXZhY2lkYWQuPC9hPlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8L1BvbGl0aWNhc0Rpdj5cbiAgICAgICAgICA8L0Zvcm11bGFyaW9EaXY+XG4gICAgICAgICAgPE1hcERpdj5cbiAgICAgICAgICAgIDxEaXJlPlxuICAgICAgICAgICAgICA8RGlyZVRpdERpdj5cbiAgICAgICAgICAgICAgICA8RGlyZVRpdD5VYmljYWNpw7NuPC9EaXJlVGl0PlxuICAgICAgICAgICAgICA8L0RpcmVUaXREaXY+XG4gICAgICAgICAgICAgIDxEaXJlRGl2PlxuICAgICAgICAgICAgICAgIDxEaXJlVGV4PlxuICAgICAgICAgICAgICAgICAgQ2FsbGUuIFBhbGVucXVlLCBMZXRyYW4gVmFsbGUsIEJlbml0byBKdcOhcmV6LCAwMzY1MCBDRE1YXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIFRlbMOpZm9ubzogKCs1MikgNTUgNzU5OSA2MjcyIC8gKCs1MikgNTUgNTExNSA2MDQzPGJyIC8+XG4gICAgICAgICAgICAgICAgICBIb3JhcmlvcyBkZSBhdGVuY2nDs24gZGUgTHVuZXMgYSBWaWVybmVzIGRlIDk6MDAgQU0gYSA2OjAwIFBNXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgVGVuZW1vcyBjb2JlcnR1cmEgYSB0b2RhIGxhIFJlcMO6YmxpY2EgTWV4aWNhbmE6IENpdWRhZCBkZSBNw6l4aWNvLCBKYWxpc2NvLCBUb2x1Y2EsIE51ZXZvIExlw7NuLCBHdWFuYWp1YXRvLCBQdWVibGEsIFZlcmFjcnV6LCBRdWVyZXRhcm8sIE1pY2hvYWNhbiwgQ29haHVpbGEsIFl1Y2F0YW4sIENoaWh1YWh1YSwgVGFiYXNjbywgQ2hpYXBhcywgU2FuIEx1aXMgUG90b3PDrVxuICAgICAgICAgICAgSGlkYWxnbywgQWd1YXNjYWxpZW50ZXMsIEd1ZXJyZXJvLCBNb3JlbG9zLCBRdWludGFuYSBSb28sIE9heGFjYSwgVGFtYXVsaXBhcywgU2luYWxvYSwgU29ub3JhLCBCYWphIENhbGlmb3JuaWEsIENhbXBlY2hlLCBUbGF4Y2FsYSwgQ29saW1hLCBEdXJhbmdvLCBOYXlhcml0LCBaYWNhdGVjYXMsIEJhamEgQ2FsaWZvcm5pYSBTdXIuIFxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPC9EaXJlVGV4PlxuICAgICAgICAgICAgICA8L0RpcmVEaXY+XG4gICAgICAgICAgICA8L0RpcmU+XG4gICAgICAgICAgICA8SWZyYW1lXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9lbWJlZD9wYj0hMW0xOCExbTEyITFtMyExZDk0MC45NjQ4MDE2OTE0MDU1ITJkLTk5LjE1NTQxNjM3MDc3MjA0ITNkMTkuMzc1MjQ4MDY0MzM1MTE4ITJtMyExZjAhMmYwITNmMCEzbTIhMWkxMDI0ITJpNzY4ITRmMTMuMSEzbTMhMW0yITFzMHg4NWQxZmM0YWQwMmJlNTM5JTNBMHgyZWFkYjM3YzI5MGRlYTUyITJzSGFuZCUyMEhlbGQlMjBTb2x1dGlvbnMhNWUwITNtMiExc2VzLTQxOSEyc214ITR2MTU5NDE4ODM5MzIyMCE1bTIhMXNlcy00MTkhMnNteFwiXG4gICAgICAgICAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICAgICAgICAgIGhlaWdodD1cIjM1MFwiXG4gICAgICAgICAgICAgIGZyYW1lYm9yZGVyPVwiMFwiXG4gICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwiZmFsc2VcIlxuICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L01hcERpdj5cbiAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8TW9kYWxcbiAgICAgICAgICBzaG93PXthYmllcnRvQW51bmNpb3N9XG4gICAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbH1cbiAgICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxNb2RhbC5IZWFkZXIgY2xvc2VCdXR0b24+XG4gICAgICAgICAgICA8TW9kYWwuVGl0bGU+QW51bmNpb3M8L01vZGFsLlRpdGxlPlxuICAgICAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPFBvbGl0aWNhcyAvPlxuICAgICAgICAgIDwvTW9kYWwuQm9keT5cbiAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBvbkNsaWNrPXtjZXJyYXJNb2RhbH0+XG4gICAgICAgICAgICAgIENlcnJhclxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgIDwvTW9kYWw+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb250YWN0bztcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const MapDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1a4nrk90",
    label: "MapDiv"
  })(false ? undefined : {
    name: "rk43id",
    styles: "margin-top:4rem;width:46%;margin-left:2.5rem;@media (max-width: 805px){margin-left:0;width:100%;}@media (max-width: 700px){width:70%;margin:0rem auto;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXENvbnRhY3RvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStFMkIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcQ29udGFjdG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IEZvcm1FbWFpbCBmcm9tIFwiLi4vLi4vY29uZmlnL0Zvcm1FbWFpbFwiO1xuaW1wb3J0IElmcmFtZSBmcm9tIFwicmVhY3QtaWZyYW1lXCI7XG5pbXBvcnQgeyBNb2RhbCwgQnV0dG9uIH0gZnJvbSBcInJlYWN0LWJvb3RzdHJhcFwiO1xuXG5pbXBvcnQgUG9saXRpY2FzIGZyb20gXCIuLi8uLi9zdGF0aWMvUG9saXRpY2FUZXhcIjtcblxuY29uc3QgQ29udGFjdG8gPSAoKSA9PiB7XG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogODA1cHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBGb3JtdWxhcmlvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNDQlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgbWFyZ2luLXRvcDogNHJlbTtcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiA1LjNyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTM1MHB4KSB7XG4gICAgICB3aWR0aDogNDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTEwcHgpIHtcbiAgICAgIHdpZHRoOiAzNyU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogNHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBQb2xpdGljYXNEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZSA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdERpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRpdCA9IHN0eWxlZC5oMWBcbiAgICBmb250LXNpemU6IDI0cHg7XG4gIGA7XG5cbiAgY29uc3QgRGlyZURpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDJyZW07XG4gIGA7XG5cbiAgY29uc3QgRGlyZVRleCA9IHN0eWxlZC5wYFxuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBsaW5lLWhlaWdodDogMTRweDtcbiAgICBtYXJnaW46IDBweDtcbiAgYDtcblxuICBjb25zdCBNYXBEaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDRyZW07XG4gICAgd2lkdGg6IDQ2JTtcbiAgICBtYXJnaW4tbGVmdDogMi41cmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDgwNXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAgICAgd2lkdGg6IDcwJTtcbiAgICAgIG1hcmdpbjogMHJlbSBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBbYWJpZXJ0b0FudW5jaW9zLCBjYW1iaWFyQWJpZXJ0b0FudW5jaW9zXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBhYnJpck1vZGFsID0gKCkgPT4ge1xuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3ModHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgY2VycmFyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyhmYWxzZSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJjb250YWN0b1wiIGNsYXNzTmFtZT1cImNvblwiPlxuICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICA8Rm9ybXVsYXJpb0Rpdj5cbiAgICAgICAgICAgIDxGb3JtRW1haWwgLz5cbiAgICAgICAgICAgIDxQb2xpdGljYXNEaXY+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInBvbGl0aWNhc1wiPlxuICAgICAgICAgICAgICAgIEFsIGRhciBjbGljayBlbiBlbCBib3TDs24gZGUgZW52aWFyIHNlIGVzdGEgYWNlcHRhbmRvIG51ZXN0cmF7XCIgXCJ9XG4gICAgICAgICAgICAgICAgPGEgb25DbGljaz17YWJyaXJNb2RhbH0+cG9sw610aWNhIGRlIHByaXZhY2lkYWQuPC9hPlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8L1BvbGl0aWNhc0Rpdj5cbiAgICAgICAgICA8L0Zvcm11bGFyaW9EaXY+XG4gICAgICAgICAgPE1hcERpdj5cbiAgICAgICAgICAgIDxEaXJlPlxuICAgICAgICAgICAgICA8RGlyZVRpdERpdj5cbiAgICAgICAgICAgICAgICA8RGlyZVRpdD5VYmljYWNpw7NuPC9EaXJlVGl0PlxuICAgICAgICAgICAgICA8L0RpcmVUaXREaXY+XG4gICAgICAgICAgICAgIDxEaXJlRGl2PlxuICAgICAgICAgICAgICAgIDxEaXJlVGV4PlxuICAgICAgICAgICAgICAgICAgQ2FsbGUuIFBhbGVucXVlLCBMZXRyYW4gVmFsbGUsIEJlbml0byBKdcOhcmV6LCAwMzY1MCBDRE1YXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIFRlbMOpZm9ubzogKCs1MikgNTUgNzU5OSA2MjcyIC8gKCs1MikgNTUgNTExNSA2MDQzPGJyIC8+XG4gICAgICAgICAgICAgICAgICBIb3JhcmlvcyBkZSBhdGVuY2nDs24gZGUgTHVuZXMgYSBWaWVybmVzIGRlIDk6MDAgQU0gYSA2OjAwIFBNXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgVGVuZW1vcyBjb2JlcnR1cmEgYSB0b2RhIGxhIFJlcMO6YmxpY2EgTWV4aWNhbmE6IENpdWRhZCBkZSBNw6l4aWNvLCBKYWxpc2NvLCBUb2x1Y2EsIE51ZXZvIExlw7NuLCBHdWFuYWp1YXRvLCBQdWVibGEsIFZlcmFjcnV6LCBRdWVyZXRhcm8sIE1pY2hvYWNhbiwgQ29haHVpbGEsIFl1Y2F0YW4sIENoaWh1YWh1YSwgVGFiYXNjbywgQ2hpYXBhcywgU2FuIEx1aXMgUG90b3PDrVxuICAgICAgICAgICAgSGlkYWxnbywgQWd1YXNjYWxpZW50ZXMsIEd1ZXJyZXJvLCBNb3JlbG9zLCBRdWludGFuYSBSb28sIE9heGFjYSwgVGFtYXVsaXBhcywgU2luYWxvYSwgU29ub3JhLCBCYWphIENhbGlmb3JuaWEsIENhbXBlY2hlLCBUbGF4Y2FsYSwgQ29saW1hLCBEdXJhbmdvLCBOYXlhcml0LCBaYWNhdGVjYXMsIEJhamEgQ2FsaWZvcm5pYSBTdXIuIFxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPC9EaXJlVGV4PlxuICAgICAgICAgICAgICA8L0RpcmVEaXY+XG4gICAgICAgICAgICA8L0RpcmU+XG4gICAgICAgICAgICA8SWZyYW1lXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9lbWJlZD9wYj0hMW0xOCExbTEyITFtMyExZDk0MC45NjQ4MDE2OTE0MDU1ITJkLTk5LjE1NTQxNjM3MDc3MjA0ITNkMTkuMzc1MjQ4MDY0MzM1MTE4ITJtMyExZjAhMmYwITNmMCEzbTIhMWkxMDI0ITJpNzY4ITRmMTMuMSEzbTMhMW0yITFzMHg4NWQxZmM0YWQwMmJlNTM5JTNBMHgyZWFkYjM3YzI5MGRlYTUyITJzSGFuZCUyMEhlbGQlMjBTb2x1dGlvbnMhNWUwITNtMiExc2VzLTQxOSEyc214ITR2MTU5NDE4ODM5MzIyMCE1bTIhMXNlcy00MTkhMnNteFwiXG4gICAgICAgICAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICAgICAgICAgIGhlaWdodD1cIjM1MFwiXG4gICAgICAgICAgICAgIGZyYW1lYm9yZGVyPVwiMFwiXG4gICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwiZmFsc2VcIlxuICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L01hcERpdj5cbiAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8TW9kYWxcbiAgICAgICAgICBzaG93PXthYmllcnRvQW51bmNpb3N9XG4gICAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbH1cbiAgICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxNb2RhbC5IZWFkZXIgY2xvc2VCdXR0b24+XG4gICAgICAgICAgICA8TW9kYWwuVGl0bGU+QW51bmNpb3M8L01vZGFsLlRpdGxlPlxuICAgICAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgICAgPFBvbGl0aWNhcyAvPlxuICAgICAgICAgIDwvTW9kYWwuQm9keT5cbiAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBvbkNsaWNrPXtjZXJyYXJNb2RhbH0+XG4gICAgICAgICAgICAgIENlcnJhclxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgIDwvTW9kYWw+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb250YWN0bztcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const {
    0: abiertoAnuncios,
    1: cambiarAbiertoAnuncios
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);

  const abrirModal = () => {
    cambiarAbiertoAnuncios(true);
  };

  const cerrarModal = () => {
    cambiarAbiertoAnuncios(false);
  };

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("section", {
    id: "contacto",
    className: "con",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 108,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(Contenedor, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 109,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(FormularioDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 110,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(_config_FormEmail__WEBPACK_IMPORTED_MODULE_2__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 111,
      columnNumber: 13
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(PoliticasDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 112,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("p", {
    className: "politicas",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 113,
      columnNumber: 15
    }
  }, "Al dar click en el bot\xF3n de enviar se esta aceptando nuestra", " ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("a", {
    onClick: abrirModal,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 115,
      columnNumber: 17
    }
  }, "pol\xEDtica de privacidad.")))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(MapDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 119,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(Dire, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 120,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(DireTitDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 121,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(DireTit, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 122,
      columnNumber: 17
    }
  }, "Ubicaci\xF3n")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(DireDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 124,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(DireTex, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 125,
      columnNumber: 17
    }
  }, "Calle. Palenque, Letran Valle, Benito Ju\xE1rez, 03650 CDMX", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 127,
      columnNumber: 19
    }
  }), "Tel\xE9fono: (+52) 55 7599 6272 / (+52) 55 5115 6043", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 128,
      columnNumber: 68
    }
  }), "Horarios de atenci\xF3n de Lunes a Viernes de 9:00 AM a 6:00 PM", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 130,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 131,
      columnNumber: 19
    }
  }), "Tenemos cobertura a toda la Rep\xFAblica Mexicana: Ciudad de M\xE9xico, Jalisco, Toluca, Nuevo Le\xF3n, Guanajuato, Puebla, Veracruz, Queretaro, Michoacan, Coahuila, Yucatan, Chihuahua, Tabasco, Chiapas, San Luis Potos\xED Hidalgo, Aguascalientes, Guerrero, Morelos, Quintana Roo, Oaxaca, Tamaulipas, Sinaloa, Sonora, Baja California, Campeche, Tlaxcala, Colima, Durango, Nayarit, Zacatecas, Baja California Sur.", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 134,
      columnNumber: 13
    }
  })))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(react_iframe__WEBPACK_IMPORTED_MODULE_3___default.a, {
    src: "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d940.9648016914055!2d-99.15541637077204!3d19.375248064335118!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x85d1fc4ad02be539%3A0x2eadb37c290dea52!2sHand%20Held%20Solutions!5e0!3m2!1ses-419!2smx!4v1594188393220!5m2!1ses-419!2smx",
    width: "100%",
    height: "350",
    frameborder: "0",
    "aria-hidden": "false",
    tabindex: "0",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 138,
      columnNumber: 13
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__["Modal"], {
    show: abiertoAnuncios,
    onHide: cerrarModal,
    keyboard: false,
    size: "lg",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 148,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__["Modal"].Header, {
    closeButton: true,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 154,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__["Modal"].Title, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 155,
      columnNumber: 13
    }
  }, "Anuncios")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__["Modal"].Body, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 157,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(_static_PoliticaTex__WEBPACK_IMPORTED_MODULE_5__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 158,
      columnNumber: 13
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__["Modal"].Footer, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 160,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__["Button"], {
    variant: "light",
    onClick: cerrarModal,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 161,
      columnNumber: 13
    }
  }, "Cerrar")))));
};

/* harmony default export */ __webpack_exports__["default"] = (Contacto);

/***/ }),

/***/ "./components/layout/Footer.js":
/*!*************************************!*\
  !*** ./components/layout/Footer.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_2__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\Footer.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }




const Footer = () => {
  const Contenedor = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "enyr2ro1",
    label: "Contenedor"
  })(false ? undefined : {
    name: "c76e0g",
    styles: "color:#f0f9ff;background-color:black;min-height:2rem",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXEZvb3Rlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJK0IiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcRm9vdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IEZvb3RlciA9ICgpID0+IHtcbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgY29sb3I6ICNmMGY5ZmY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XG4gICAgbWluLWhlaWdodDogMnJlbTtcbiAgYDtcblxuICBjb25zdCBGb29UZXggPSBzdHlsZWQucGBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgZm9udC1zaXplOiAxM3B4O1xuICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIHBhZGRpbmctYm90dG9tOiA1cHg7XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPENvbnRlbmVkb3IgY2xhc3NOYW1lPVwiIG10LTVcIj5cbiAgICAgICAgPGZvb3Rlcj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPEZvb1RleD5cbiAgICAgICAgICAgICAgSEFORCBIRUxEIFNPTFVUSU9OUyAyMDIxIC0gVG9kb3MgbG9zIGRlcmVjaG9zIHJlc2VydmFkb3MuXG4gICAgICAgICAgICA8L0Zvb1RleD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9mb290ZXI+XG4gICAgICA8L0NvbnRlbmVkb3I+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb290ZXI7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const FooTex = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "enyr2ro0",
    label: "FooTex"
  })(false ? undefined : {
    name: "1pq80kk",
    styles: "text-align:center;padding-top:10px;font-size:13px;margin-bottom:0;color:white;padding-bottom:5px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXEZvb3Rlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFVeUIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcRm9vdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IEZvb3RlciA9ICgpID0+IHtcbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgY29sb3I6ICNmMGY5ZmY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XG4gICAgbWluLWhlaWdodDogMnJlbTtcbiAgYDtcblxuICBjb25zdCBGb29UZXggPSBzdHlsZWQucGBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgZm9udC1zaXplOiAxM3B4O1xuICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIHBhZGRpbmctYm90dG9tOiA1cHg7XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPENvbnRlbmVkb3IgY2xhc3NOYW1lPVwiIG10LTVcIj5cbiAgICAgICAgPGZvb3Rlcj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPEZvb1RleD5cbiAgICAgICAgICAgICAgSEFORCBIRUxEIFNPTFVUSU9OUyAyMDIxIC0gVG9kb3MgbG9zIGRlcmVjaG9zIHJlc2VydmFkb3MuXG4gICAgICAgICAgICA8L0Zvb1RleD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9mb290ZXI+XG4gICAgICA8L0NvbnRlbmVkb3I+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb290ZXI7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Contenedor, {
    className: " mt-5",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 22,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("footer", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 23,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("div", {
    className: "container",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 24,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(FooTex, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 25,
      columnNumber: 13
    }
  }, "HAND HELD SOLUTIONS 2021 - Todos los derechos reservados.")))));
};

/* harmony default export */ __webpack_exports__["default"] = (Footer);

/***/ }),

/***/ "./components/layout/Header.js":
/*!*************************************!*\
  !*** ./components/layout/Header.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/head */ "next/head");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _layout_Tarjeta__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../layout/Tarjeta */ "./components/layout/Tarjeta.js");
/* harmony import */ var _layout_TarjetaDos__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../layout/TarjetaDos */ "./components/layout/TarjetaDos.js");
/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-bootstrap */ "react-bootstrap");
/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _hooks_useWindowSize__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useWindowSize */ "./hooks/useWindowSize.js");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_9__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\Header.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }











const Header = () => {
  const Bienvenido = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "ea6yc6s20",
    label: "Bienvenido"
  })(false ? undefined : {
    name: "pq3keu",
    styles: "min-width:100%!important;background-color:#0076c0;display:flex;padding-top:11px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const TextoBienvenido = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("h1", false ? undefined : {
    target: "ea6yc6s19",
    label: "TextoBienvenido"
  })(false ? undefined : {
    name: "jagj6i",
    styles: "color:white;font-size:25px;font-weight:bold;margin-left:25px;margin-top:4px;font-family:\"Raleway\",sans-serif;@media (max-width: 1950px){font-size:19px;}@media (max-width: 881px){margin-top:0px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const SocialMedia = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "ea6yc6s18",
    label: "SocialMedia"
  })(false ? undefined : {
    name: "x2u97t",
    styles: "height:100%;display:flex;margin-bottom:10px;@media (max-width: 481px){margin-bottom:0px;}@media (max-width: 428px){margin-bottom:8px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const LogoRedes = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "ea6yc6s17",
    label: "LogoRedes"
  })(false ? undefined : {
    name: "s3yf4g",
    styles: "width:40px;height:40px;margin-right:25px;@media (max-width: 1950px){width:25px;height:25px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const LogoRedesYT = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "ea6yc6s16",
    label: "LogoRedesYT"
  })(false ? undefined : {
    name: "q8yu1w",
    styles: "width:50px;height:40px;margin-right:25px;@media (max-width: 1950px){width:30px;height:25px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const HeaderContacto = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "ea6yc6s15",
    label: "HeaderContacto"
  })(false ? undefined : {
    name: "raobkm",
    styles: "background-color:white;min-width:100%!important",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Logo = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "ea6yc6s14",
    label: "Logo"
  })(false ? undefined : {
    name: "6nsv97",
    styles: "height:93px;@media (max-width: 1950px){height:120px;}@media (max-width: 450px){height:80px;}@media (max-width: 350px){height:65px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const LogoC = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "ea6yc6s13",
    label: "LogoC"
  })(false ? undefined : {
    name: "15gsnyh",
    styles: "height:93px;@media (max-width: 1950px){height:120px;}@media (max-width: 450px){height:80px;}@media (max-width: 350px){height:60px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Llamanos = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "ea6yc6s12",
    label: "Llamanos"
  })(false ? undefined : {
    name: "odja5w",
    styles: "font-size:20px;color:black;font-weight:bold;text-align:center;padding-top:5px;@media (max-width: 1950px){font-size:18px;padding-top:0px;}@media (max-width: 991px){margin-right:11px;margin-left:32px;}@media (max-width: 781px){font-size:18px;margin-right:11px;margin-left:22px;}@media (max-width: 450px){font-size:12px;margin-right:5px;margin-left:19px;}@media (max-width: 300px){margin-right:5px;margin-left:0px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Numero = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("a", false ? undefined : {
    target: "ea6yc6s11",
    label: "Numero"
  })(false ? undefined : {
    name: "1gkzyv6",
    styles: "margin-top:-15px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const NumeroResponsive = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("a", false ? undefined : {
    target: "ea6yc6s10",
    label: "NumeroResponsive"
  })(false ? undefined : {
    name: "knfnx4",
    styles: "margin-top:0px;margin-bottom:10px;@media (max-width: 781px){width:44%;font-size:13px!important;}@media (max-width: 540px){width:45%;font-size:11px!important;}@media (max-width: 450px){width:46%;font-size:9px!important;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const BotonCorreo = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("a", false ? undefined : {
    target: "ea6yc6s9",
    label: "BotonCorreo"
  })(false ? undefined : {
    name: "4y5ajl",
    styles: "text-align:center;font-size:17px;height:38px;width:64%;margin:0px auto;font-weight:bold;@media (max-width: 1950px){font-size:16px!important;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const BotonCorreoResponsive = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("a", false ? undefined : {
    target: "ea6yc6s8",
    label: "BotonCorreoResponsive"
  })(false ? undefined : {
    name: "9x144n",
    styles: "text-align:center;font-size:17px;height:38px;width:64%;margin:0px auto;font-weight:bold;@media (max-width: 781px){width:43%;font-size:13px!important;height:32px;}@media (max-width: 540px){width:39%;font-size:11px!important;}@media (max-width: 450px){width:40%;font-size:9px!important;height:26px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Direccion = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "ea6yc6s7",
    label: "Direccion"
  })(false ? undefined : {
    name: "dj70dl",
    styles: "font-size:14px;padding-top:11px;text-align:center;width:100%;margin:0px auto;@media (max-width: 1950px){font-size:14px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });
  /* const Autorizado = styled.p`
      font-size: 10px;
      padding-top: 11px;
      text-align: left;
      width: 20%;
      margin: 15px auto;
  
      @media (max-width: 1950px) {
        font-size: 10px;
      }
    `; */


  const Menu = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "ea6yc6s6",
    label: "Menu"
  })(false ? undefined : {
    name: "cg9k2k",
    styles: "height:auto;background-color:black;padding-top:5px;@media (max-width: 1950px){height:auto;padding-top:3px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const MenuRes = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "ea6yc6s5",
    label: "MenuRes"
  })(false ? undefined : {
    name: "gocyy4",
    styles: "height:37px;background-color:black;padding-top:5px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Pestanas = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("nav", false ? undefined : {
    target: "ea6yc6s4",
    label: "Pestanas"
  })(false ? undefined : {
    name: "17ynatk",
    styles: "justify-content:center;margin-top:-4px;max-height:50px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const PestanasLista = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("ul", false ? undefined : {
    target: "ea6yc6s3",
    label: "PestanasLista"
  })(false ? undefined : {
    name: "wioeha",
    styles: "display:flex;height:auto;justify-content:center;text-decoration:none;list-style:none",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Puntero = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("a", false ? undefined : {
    target: "ea6yc6s2",
    label: "Puntero"
  })(false ? undefined : {
    name: "e0dnmk",
    styles: "cursor:pointer",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const ImgModal = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "ea6yc6s1",
    label: "ImgModal"
  })(false ? undefined : {
    name: "16na1d5",
    styles: "max-width:100%!important;min-width:100%!important;max-height:100%!important;min-height:100%!important",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const TitulosHeader = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "ea6yc6s0",
    label: "TitulosHeader"
  })(false ? undefined : {
    name: "1u81noh",
    styles: "margin-top:0px!important",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const size = Object(_hooks_useWindowSize__WEBPACK_IMPORTED_MODULE_8__["default"])();
  const {
    0: abiertoAnuncios,
    1: cambiarAbiertoAnuncios
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const {
    0: abiertoPromociones,
    1: cambiarPromociones
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);

  const abrirModal = () => {
    cambiarAbiertoAnuncios(true);
  };

  const cerrarModal = () => {
    cambiarAbiertoAnuncios(false);
  };

  const abrirModalPromociones = () => {
    cambiarPromociones(true);
  };

  const cerrarModalPromociones = () => {
    cambiarPromociones(false);
  };

  const Redirigir = e => {
    e.preventDefault();
    cambiarAbiertoAnuncios(false);
    document.location.href = "/#reparacion";
  };

  const RedirigirContacto = e => {
    e.preventDefault();
    cambiarAbiertoAnuncios(false);
    document.location.href = "/#contacto";
    next_router__WEBPACK_IMPORTED_MODULE_7___default.a.push("#home");
  };

  const RedirigirVideos = e => {
    e.preventDefault();
    cambiarAbiertoAnuncios(false);
    document.location.href = "/#videos";
    next_router__WEBPACK_IMPORTED_MODULE_7___default.a.push("#home");
  };

  const RedirigirIMG = e => {
    e.preventDefault();
    cambiarAbiertoAnuncios(false);
    document.location.href = "/#puntoa";
    next_router__WEBPACK_IMPORTED_MODULE_7___default.a.push("#home");
  };

  const RedirigirInicio = e => {
    e.preventDefault();
    cambiarAbiertoAnuncios(false);
    document.location.href = "/#puntoa";
    next_router__WEBPACK_IMPORTED_MODULE_7___default.a.push("#home");
  };

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_head__WEBPACK_IMPORTED_MODULE_3___default.a, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 350,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("link", {
    rel: "stylesheet preload",
    as: "style",
    href: "https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css",
    integrity: "sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l",
    crossOrigin: "anonymous",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 351,
      columnNumber: 9
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("span", {
    id: "puntoa",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 359,
      columnNumber: 7
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("section", {
    id: "header",
    className: "sticky-top",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 360,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "headerdos",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 361,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Bienvenido, {
    className: "justify-content-between",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 362,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    className: "divBienvenido",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 363,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TextoBienvenido, {
    id: "welcome",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 364,
      columnNumber: 15
    }
  }, "Bienvenido a Hand Held Solutions")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(SocialMedia, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 368,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "wa",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 369,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://wa.me/message/KZSHX5FOWASGF1",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 370,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoRedes, {
    className: "redes",
    src: "/img/whats_lstqed.webp",
    alt: "logo whatsapp",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 375,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "fb",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 382,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://www.facebook.com/HandHeldSolutionsOficial",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 383,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoRedes, {
    className: "redes",
    src: "/img/2_rr6fgz.webp",
    alt: "logo facebook",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 388,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "in",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 395,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://www.linkedin.com/company/handheldsolutions/",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 396,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoRedes, {
    className: "redes",
    src: "/img/in_wfa2x2.webp",
    alt: "logo linkedin",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 401,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "yt",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 408,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://www.youtube.com/channel/UCjVPKTVVs0N-oVpuLizEFaw",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 409,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoRedesYT, {
    className: "redes",
    src: "/img/youtube_o75y4f.webp",
    alt: "logo youtube",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 414,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "tiktok",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 422,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://www.tiktok.com/@handheldsolutionshhs",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 423,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoRedes, {
    className: "redes",
    src: "/img/tiktok-icon.webp",
    alt: "logo tiktok",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 428,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "instagram",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 436,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://www.instagram.com/hand_held_solutions/",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 437,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoRedes, {
    className: "redes",
    src: "/img/instagram-icon.webp",
    alt: "logo instagram",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 442,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "Twitter",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 449,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://twitter.com/HandHSolutions",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 450,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoRedes, {
    className: "redes",
    src: "/img/Twitter-logo.webp",
    alt: "logo instagram",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 455,
      columnNumber: 19
    }
  }))))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(HeaderContacto, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 465,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    className: "separacion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 466,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 467,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    onClick: RedirigirIMG,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 468,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Logo, {
    src: "/img/LOGO-HHS.webp"
    /* src="/img/LOGO-ANIVERSARIO.png" */
    ,
    alt: "Logo hand held solutions",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 469,
      columnNumber: 19
    }
  }))), size < 991 ? Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    className: "address",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 477,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    className: "haber",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 478,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Llamanos, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 479,
      columnNumber: 21
    }
  }, "\xA1Ll\xE1manos!"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(NumeroResponsive, {
    className: "btn btn-primary",
    role: "button",
    href: "tel: (55) 55 5115 6043",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 480,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 485,
      columnNumber: 23
    }
  }, "(+52) 55 5115 6043"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoC, {
    src: "/img/Logotipo Centro de Servicio Autorizado.png",
    alt: "Centro de Servicio Autorizado",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 488,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(BotonCorreoResponsive, {
    className: "btn btn-primary btn-block b-cont",
    href: "#contacto",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 492,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 496,
      columnNumber: 21
    }
  }, "contacto@handheldsolutions.com.mx"))) : Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, "\xA0\xA0\xA0\xA0\xA0\xA0", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    className: "llamanos",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 502,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Llamanos, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 503,
      columnNumber: 21
    }
  }, "\xA1Ll\xE1manos!"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Numero, {
    className: "btn btn-primary numno",
    role: "button",
    href: "tel:(55) 55 5115 6043",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 504,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 509,
      columnNumber: 23
    }
  }, "(+52) 55 5115 6043"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoC, {
    src: "/img/Logotipo Centro de Servicio Autorizado.png",
    alt: "Centro de Servicio Autorizado",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 512,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    className: "address",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 525,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(BotonCorreo, {
    href: "#contacto",
    className: "btn btn-primary btn-block b-cont tam",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 526,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 530,
      columnNumber: 23
    }
  }, "contacto@handheldsolutions.com.mx")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Direccion, {
    className: "le",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 532,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 533,
      columnNumber: 23
    }
  }, "Calle. Palenque,\xA0Col. Letr\xE1n Valle, Alcald\xEDa Benito Ju\xE1rez"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 537,
      columnNumber: 23
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 538,
      columnNumber: 23
    }
  }, "\xA0CDMX, C.P. 03650, M\xE9xico"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 539,
      columnNumber: 23
    }
  })))))), size < 800 ? Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_layout_TarjetaDos__WEBPACK_IMPORTED_MODULE_5__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 546,
      columnNumber: 25
    }
  }) : Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_layout_Tarjeta__WEBPACK_IMPORTED_MODULE_4__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 546,
      columnNumber: 42
    }
  }), size < 995 ? Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(MenuRes, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 549,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Navbar"], {
    collapseOnSelect: true,
    expand: "xxl",
    bg: "dark",
    variant: "dark",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 550,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Navbar"].Toggle, {
    "aria-controls": "responsive-navbar-nav",
    className: "navbau",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 551,
      columnNumber: 17
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Navbar"].Collapse, {
    id: "responsive-navbar-nav",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 552,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 553,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"].Link, {
    href: "/",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 554,
      columnNumber: 21
    }
  }, "Inicio"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"], {
    title: "Renta",
    id: "basic-nav-dropdown",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 555,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "renta-de-handhelds",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 556,
      columnNumber: 23
    }
  }, "Handhelds"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "renta-de-impresoras-de-etiquetas",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 557,
      columnNumber: 23
    }
  }, "Impresoras"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "renta-de-lectores-de-codigos-de-barras",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 558,
      columnNumber: 23
    }
  }, "Lectores")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"], {
    title: "Reparaci\xF3n",
    id: "basic-nav-dropdown",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 560,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "reparacion-de-handhelds",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 561,
      columnNumber: 23
    }
  }, "Handhelds"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "reparacion-de-impresoras-de-etiquetas",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 562,
      columnNumber: 23
    }
  }, "Impresoras"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "reparacion-de-lectores-de-codigos-de-barras",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 563,
      columnNumber: 23
    }
  }, "Lectores")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"], {
    title: "Venta",
    id: "basic-nav-dropdown",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 565,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "venta-de-handhelds",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 566,
      columnNumber: 23
    }
  }, "Handhelds"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "venta-de-impresoras-de-etiquetas",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 567,
      columnNumber: 23
    }
  }, "Impresoras"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "venta-de-lectores-de-codigos-de-barras",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 568,
      columnNumber: 23
    }
  }, "Lectores"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "venta-de-accesorios-y-consumibles",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 569,
      columnNumber: 23
    }
  }, "Accesorios y Consumibles"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "venta-fundas-handheld-impresora-portatil",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 570,
      columnNumber: 23
    }
  }, "Fundas")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"].Link, {
    href: "/DSD-venta-en-ruta",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 573,
      columnNumber: 21
    }
  }, "Soluci\xF3n DSD"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"].Link, {
    href: "/venta-fundas-handheld-impresora-portatil",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 574,
      columnNumber: 21
    }
  }, "Fundas"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"].Link, {
    href: "/impresion-credenciales-tarjetas-gafetes-pvc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 575,
      columnNumber: 21
    }
  }, "Impresi\xF3n de credenciales"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"].Link, {
    href: "/impresion-etiquetas",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 576,
      columnNumber: 21
    }
  }, "Impresi\xF3n de etiquetas"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"], {
    className: "responmenu",
    onClick: abrirModalPromociones,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 577,
      columnNumber: 21
    }
  }, "Promociones"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"], {
    className: "responmenu",
    onClick: abrirModal,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 578,
      columnNumber: 21
    }
  }, "Anuncios"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"], {
    className: "responmenu",
    onClick: RedirigirVideos,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 579,
      columnNumber: 21
    }
  }, "Videos"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"], {
    className: "responmenu",
    onClick: RedirigirContacto,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 580,
      columnNumber: 21
    }
  }, "Contacto"))))) : Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Menu, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 586,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Pestanas, {
    id: "menu",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 587,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(PestanasLista, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 588,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 589,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    onClick: RedirigirInicio,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 590,
      columnNumber: 19
    }
  }, "Inicio")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 594,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 595,
      columnNumber: 19
    }
  }, "Renta"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("ul", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 596,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 597,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/renta-de-handhelds",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 598,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 599,
      columnNumber: 25
    }
  }, "Handhelds"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 602,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/renta-de-impresoras-de-etiquetas",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 603,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 604,
      columnNumber: 25
    }
  }, "Impresoras"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 607,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/renta-de-lectores-de-codigos-de-barras",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 608,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 609,
      columnNumber: 25
    }
  }, "Lectores"))))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 614,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 615,
      columnNumber: 19
    }
  }, "Reparaci\xF3n"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("ul", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 616,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 617,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/reparacion-de-handhelds",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 618,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 619,
      columnNumber: 25
    }
  }, "Handhelds"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 622,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/reparacion-de-impresoras-de-etiquetas",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 623,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 624,
      columnNumber: 25
    }
  }, "Impresoras"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 627,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/reparacion-de-lectores-de-codigos-de-barras",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 628,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 629,
      columnNumber: 25
    }
  }, "Lectores"))))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 634,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 635,
      columnNumber: 19
    }
  }, "Venta"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("ul", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 636,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 637,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/venta-de-handhelds",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 638,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 639,
      columnNumber: 25
    }
  }, "Handhelds"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 642,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/venta-de-impresoras-de-etiquetas",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 643,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 644,
      columnNumber: 25
    }
  }, "Impresoras"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 647,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/venta-de-lectores-de-codigos-de-barras",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 648,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 649,
      columnNumber: 25
    }
  }, "Lectores"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 652,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/venta-de-accesorios-y-consumibles",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 653,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 654,
      columnNumber: 25
    }
  }, "Accesorios y Consumibles"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 657,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/venta-fundas-handheld-impresora-portatil",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 658,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 659,
      columnNumber: 25
    }
  }, "Fundas"))))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 664,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/DSD-venta-en-ruta",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 665,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 666,
      columnNumber: 21
    }
  }, "Soluci\xF3n DSD"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 671,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/venta-fundas-handheld-impresora-portatil",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 672,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 673,
      columnNumber: 21
    }
  }, "Fundas"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 678,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/impresion-credenciales-tarjetas-gafetes-pvc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 679,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 680,
      columnNumber: 21
    }
  }, "Impresi\xF3n credenciales"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 685,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/impresion-etiquetas",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 686,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 687,
      columnNumber: 21
    }
  }, "Impresi\xF3n etiquetas"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 692,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    onClick: abrirModalPromociones,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 693,
      columnNumber: 19
    }
  }, "Promociones")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 700,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    onClick: abrirModal,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 701,
      columnNumber: 19
    }
  }, "Anuncios")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 705,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    onClick: RedirigirVideos,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 706,
      columnNumber: 19
    }
  }, "Videos")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 714,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    onClick: RedirigirContacto,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 715,
      columnNumber: 19
    }
  }, "Contacto")))))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"], {
    show: abiertoAnuncios,
    onHide: cerrarModal,
    keyboard: false,
    size: "lg",
    className: "modal-altura",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 729,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Header, {
    closeButton: true,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 736,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Title, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 737,
      columnNumber: 13
    }
  }, " Anuncios")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Body, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 739,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 740,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 741,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Lector Syble XB-6266MBT.png",
    alt: "Lector de c\xF3digos XB-6266MBT",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 742,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 748,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/CT40 Honeywell.png",
    alt: "Handheld CT40",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 749,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 776,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Renta de handheld MC33.webp",
    alt: "Renta de handheld MC33",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 777,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 783,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Renta de handheld CK65.webp",
    alt: "Renta de handheld CK65",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 784,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 790,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/impresoras_epson.webp",
    alt: "Impresoras Epson",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 791,
      columnNumber: 17
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 797,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/evolis_adikio.webp",
    alt: "evolis adikio",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 798,
      columnNumber: 17
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 804,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/evolis_impresoras.webp",
    alt: "evolis impresoras",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 805,
      columnNumber: 17
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 818,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/IMAGEN_ZEBRA_BANNER_800X500_lyqnpu.webp",
    alt: "Zebra Hand Held Impresoras Lectores",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 819,
      columnNumber: 17
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 825,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Puntero, {
    onClick: Redirigir,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 826,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(ImgModal, {
    className: "d-block ",
    src: "/img/Copia_de_p\xF3lizas_reparaci\xF3n_sg0xim.webp",
    alt: "Polizas de reparacion handheld impresoras de etiquetas y lectores",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 827,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 848,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(ImgModal, {
    className: "d-block ",
    src: "/img/IMAGEN_ZEBRA_BANNER_800X500_vr6p1d.webp",
    alt: "Zebra Hand Held Impresoras Lectores",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 849,
      columnNumber: 17
    }
  })))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Footer, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 883,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Button"], {
    variant: "light",
    onClick: cerrarModal,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 884,
      columnNumber: 13
    }
  }, "Cerrar"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"], {
    show: abiertoPromociones,
    onHide: cerrarModalPromociones,
    keyboard: false,
    size: "lg",
    className: "modal-altura",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 890,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Header, {
    closeButton: true,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 897,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Title, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 898,
      columnNumber: 13
    }
  }, "Promociones")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Body, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 900,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 901,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 902,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Handheld EDA52.png",
    alt: "Handheld EDA52",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 903,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 909,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/CT40 Honeywell.png",
    alt: "Handheld CT40",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 910,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 937,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Renta de handheld CK65.webp",
    alt: "Renta de handheld CK65",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 938,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 944,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Renta de handheld MC33.webp",
    alt: "Renta de handheld MC33",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 945,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 951,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Promoci\xF3n_mc9090_funcional_po83sk.webp",
    alt: "Hand Held MC9090",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 952,
      columnNumber: 17
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 965,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Promoci\xF3n_CN51.webp",
    alt: "Hand Held Intermec Honeywell CN51",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 966,
      columnNumber: 17
    }
  })))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Footer, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 995,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Button"], {
    variant: "light",
    onClick: cerrarModalPromociones,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 996,
      columnNumber: 13
    }
  }, "Cerrar")))));
};

/* harmony default export */ __webpack_exports__["default"] = (Header);

/***/ }),

/***/ "./components/layout/ImagenPrincipal.js":
/*!**********************************************!*\
  !*** ./components/layout/ImagenPrincipal.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_2__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\ImagenPrincipal.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }




const ImagenPrincipal = () => {
  const Imagen = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "ebfd96s2",
    label: "Imagen"
  })(false ? undefined : {
    name: "1d3w5wq",
    styles: "width:100%",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXEltYWdlblByaW5jaXBhbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLMkIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcSW1hZ2VuUHJpbmNpcGFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cblxuY29uc3QgSW1hZ2VuUHJpbmNpcGFsID0gKCkgPT4ge1xuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuICBjb25zdCBWaWRlb0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDA7XG4gIHBhZGRpbmctYm90dG9tOiA1MCU7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luOiBhdXRvO1xuICBgO1xuICBjb25zdCBWaWRlbyA9IHN0eWxlZC5pZnJhbWVgXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgYDtcblxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uPlxuICAgIDxzZWN0aW9uPlxuICAgIDxJbWFnZW5cbiAgICAgICAgICBzcmM9XCIvaW1nL0p1bGlvIHJlZ2FsYWRvIGhhbmQgaGVsZC5wbmdcIlxuICAgICAgICAgIGFsdD1cIkp1bGlvIHJlZ2FsYWRvIGhhbmQgaGVsZCBzb2x1dGlvbnNcIlxuICAgICAgICAvPlxuICAgIHsvKiA8SW1hZ2VuXG4gICAgICAgICAgc3JjPVwiL2ltZy9CYW5uZXIgQW5pdmVyc2FyaW8gSEhTLnBuZ1wiXG4gICAgICAgICAgYWx0PVwiQW5pdmVyc2FyaW8gSEhTXCJcbiAgICAgICAgLz4gKi99XG4gICAgICAgIDxiciAvPlxuICAgICAgICA8YnIgLz5cbiAgICAgIDxWaWRlb0NvbnRhaW5lcj5cbiAgICAgIDxWaWRlb1xuICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvNjZyQXV2Q1dNbXc/YXV0b3BsYXk9MSZjb250cm9scz0wJnNob3dpbmZvPTAmcmVsPTBcIlxuICAgICAgICAgICAgZnJhbWVib3JkZXI9XCIwXCJcbiAgICAgICAgICAgIGFsbG93PVwiYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmVcIlxuICAgICAgICAgICAgYWxsb3dmdWxsc2NyZWVuXG4gICAgICAgICAgPjwvVmlkZW8+XG4gICAgICA8L1ZpZGVvQ29udGFpbmVyPlxuICAgIDwvc2VjdGlvbj5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxJbWFnZW5cbiAgICAgICAgICBzcmM9XCIvaW1nL0hhbmRoZWxkLnBuZ1wiXG4gICAgICAgICAgYWx0PVwiSW1wcmVzb3JhcyBkZSBjcmVkZW5jaWFsZXNcIlxuICAgICAgICAvPlxuICAgICAgICA8YnIgLz5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxJbWFnZW5cbiAgICAgICAgICBzcmM9XCIvaW1nL0Jhbm5lciBjYW1wYcOxYSBldm9saXMucG5nXCJcbiAgICAgICAgICBhbHQ9XCJSZW50YSBIYW5kaGVsZFwiXG4gICAgICAgIC8+XG4gICAgICAgIHsvKiA8SW1hZ2VuXG4gICAgICAgICAgc3JjPVwiL2ltZy9GYWJyaWNhbnRlcyBiYW5uZXIgcGFnaW5hIHdlYi5naWZcIlxuICAgICAgICAgIGFsdD1cIkhvbmV5d2VsbCBJbnRlcm1lYyBTeW1ib2wgTW90b3JvbGEgWmVicmEgUmVudGEgUmVwYXJhY2nDs24gVmVudGEgSGFuZGhlbGRcIlxuICAgICAgICAvPiAqL31cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEltYWdlblByaW5jaXBhbDtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const VideoContainer = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "ebfd96s1",
    label: "VideoContainer"
  })(false ? undefined : {
    name: "e0f1z",
    styles: "width:100%;height:0;padding-bottom:50%;position:relative;margin:auto",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXEltYWdlblByaW5jaXBhbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRbUMiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcSW1hZ2VuUHJpbmNpcGFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cblxuY29uc3QgSW1hZ2VuUHJpbmNpcGFsID0gKCkgPT4ge1xuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuICBjb25zdCBWaWRlb0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDA7XG4gIHBhZGRpbmctYm90dG9tOiA1MCU7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luOiBhdXRvO1xuICBgO1xuICBjb25zdCBWaWRlbyA9IHN0eWxlZC5pZnJhbWVgXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgYDtcblxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uPlxuICAgIDxzZWN0aW9uPlxuICAgIDxJbWFnZW5cbiAgICAgICAgICBzcmM9XCIvaW1nL0p1bGlvIHJlZ2FsYWRvIGhhbmQgaGVsZC5wbmdcIlxuICAgICAgICAgIGFsdD1cIkp1bGlvIHJlZ2FsYWRvIGhhbmQgaGVsZCBzb2x1dGlvbnNcIlxuICAgICAgICAvPlxuICAgIHsvKiA8SW1hZ2VuXG4gICAgICAgICAgc3JjPVwiL2ltZy9CYW5uZXIgQW5pdmVyc2FyaW8gSEhTLnBuZ1wiXG4gICAgICAgICAgYWx0PVwiQW5pdmVyc2FyaW8gSEhTXCJcbiAgICAgICAgLz4gKi99XG4gICAgICAgIDxiciAvPlxuICAgICAgICA8YnIgLz5cbiAgICAgIDxWaWRlb0NvbnRhaW5lcj5cbiAgICAgIDxWaWRlb1xuICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvNjZyQXV2Q1dNbXc/YXV0b3BsYXk9MSZjb250cm9scz0wJnNob3dpbmZvPTAmcmVsPTBcIlxuICAgICAgICAgICAgZnJhbWVib3JkZXI9XCIwXCJcbiAgICAgICAgICAgIGFsbG93PVwiYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmVcIlxuICAgICAgICAgICAgYWxsb3dmdWxsc2NyZWVuXG4gICAgICAgICAgPjwvVmlkZW8+XG4gICAgICA8L1ZpZGVvQ29udGFpbmVyPlxuICAgIDwvc2VjdGlvbj5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxJbWFnZW5cbiAgICAgICAgICBzcmM9XCIvaW1nL0hhbmRoZWxkLnBuZ1wiXG4gICAgICAgICAgYWx0PVwiSW1wcmVzb3JhcyBkZSBjcmVkZW5jaWFsZXNcIlxuICAgICAgICAvPlxuICAgICAgICA8YnIgLz5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxJbWFnZW5cbiAgICAgICAgICBzcmM9XCIvaW1nL0Jhbm5lciBjYW1wYcOxYSBldm9saXMucG5nXCJcbiAgICAgICAgICBhbHQ9XCJSZW50YSBIYW5kaGVsZFwiXG4gICAgICAgIC8+XG4gICAgICAgIHsvKiA8SW1hZ2VuXG4gICAgICAgICAgc3JjPVwiL2ltZy9GYWJyaWNhbnRlcyBiYW5uZXIgcGFnaW5hIHdlYi5naWZcIlxuICAgICAgICAgIGFsdD1cIkhvbmV5d2VsbCBJbnRlcm1lYyBTeW1ib2wgTW90b3JvbGEgWmVicmEgUmVudGEgUmVwYXJhY2nDs24gVmVudGEgSGFuZGhlbGRcIlxuICAgICAgICAvPiAqL31cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEltYWdlblByaW5jaXBhbDtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Video = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("iframe", false ? undefined : {
    target: "ebfd96s0",
    label: "Video"
  })(false ? undefined : {
    name: "1b4920d",
    styles: "position:absolute;top:0;left:0;width:100%;height:100%",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXEltYWdlblByaW5jaXBhbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFlNkIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcSW1hZ2VuUHJpbmNpcGFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cblxuY29uc3QgSW1hZ2VuUHJpbmNpcGFsID0gKCkgPT4ge1xuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuICBjb25zdCBWaWRlb0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDA7XG4gIHBhZGRpbmctYm90dG9tOiA1MCU7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luOiBhdXRvO1xuICBgO1xuICBjb25zdCBWaWRlbyA9IHN0eWxlZC5pZnJhbWVgXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgYDtcblxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uPlxuICAgIDxzZWN0aW9uPlxuICAgIDxJbWFnZW5cbiAgICAgICAgICBzcmM9XCIvaW1nL0p1bGlvIHJlZ2FsYWRvIGhhbmQgaGVsZC5wbmdcIlxuICAgICAgICAgIGFsdD1cIkp1bGlvIHJlZ2FsYWRvIGhhbmQgaGVsZCBzb2x1dGlvbnNcIlxuICAgICAgICAvPlxuICAgIHsvKiA8SW1hZ2VuXG4gICAgICAgICAgc3JjPVwiL2ltZy9CYW5uZXIgQW5pdmVyc2FyaW8gSEhTLnBuZ1wiXG4gICAgICAgICAgYWx0PVwiQW5pdmVyc2FyaW8gSEhTXCJcbiAgICAgICAgLz4gKi99XG4gICAgICAgIDxiciAvPlxuICAgICAgICA8YnIgLz5cbiAgICAgIDxWaWRlb0NvbnRhaW5lcj5cbiAgICAgIDxWaWRlb1xuICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvNjZyQXV2Q1dNbXc/YXV0b3BsYXk9MSZjb250cm9scz0wJnNob3dpbmZvPTAmcmVsPTBcIlxuICAgICAgICAgICAgZnJhbWVib3JkZXI9XCIwXCJcbiAgICAgICAgICAgIGFsbG93PVwiYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmVcIlxuICAgICAgICAgICAgYWxsb3dmdWxsc2NyZWVuXG4gICAgICAgICAgPjwvVmlkZW8+XG4gICAgICA8L1ZpZGVvQ29udGFpbmVyPlxuICAgIDwvc2VjdGlvbj5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxJbWFnZW5cbiAgICAgICAgICBzcmM9XCIvaW1nL0hhbmRoZWxkLnBuZ1wiXG4gICAgICAgICAgYWx0PVwiSW1wcmVzb3JhcyBkZSBjcmVkZW5jaWFsZXNcIlxuICAgICAgICAvPlxuICAgICAgICA8YnIgLz5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxJbWFnZW5cbiAgICAgICAgICBzcmM9XCIvaW1nL0Jhbm5lciBjYW1wYcOxYSBldm9saXMucG5nXCJcbiAgICAgICAgICBhbHQ9XCJSZW50YSBIYW5kaGVsZFwiXG4gICAgICAgIC8+XG4gICAgICAgIHsvKiA8SW1hZ2VuXG4gICAgICAgICAgc3JjPVwiL2ltZy9GYWJyaWNhbnRlcyBiYW5uZXIgcGFnaW5hIHdlYi5naWZcIlxuICAgICAgICAgIGFsdD1cIkhvbmV5d2VsbCBJbnRlcm1lYyBTeW1ib2wgTW90b3JvbGEgWmVicmEgUmVudGEgUmVwYXJhY2nDs24gVmVudGEgSGFuZGhlbGRcIlxuICAgICAgICAvPiAqL31cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEltYWdlblByaW5jaXBhbDtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("section", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 27,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("section", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 28,
      columnNumber: 5
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Imagen, {
    src: "/img/Julio regalado hand held.png",
    alt: "Julio regalado hand held solutions",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 29,
      columnNumber: 5
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 37,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 38,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(VideoContainer, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 39,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Video, {
    src: "https://www.youtube.com/embed/66rAuvCWMmw?autoplay=1&controls=0&showinfo=0&rel=0",
    frameborder: "0",
    allow: "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",
    allowfullscreen: true,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 40,
      columnNumber: 7
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 48,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Imagen, {
    src: "/img/Handheld.png",
    alt: "Impresoras de credenciales",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 49,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 53,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 54,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Imagen, {
    src: "/img/Banner campa\xF1a evolis.png",
    alt: "Renta Handheld",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 55,
      columnNumber: 9
    }
  })));
};

/* harmony default export */ __webpack_exports__["default"] = (ImagenPrincipal);

/***/ }),

/***/ "./components/layout/Layout.js":
/*!*************************************!*\
  !*** ./components/layout/Layout.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Header__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Header */ "./components/layout/Header.js");
/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-bootstrap */ "react-bootstrap");
/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/router */ "next/router");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_5__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\Layout.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }







const Layout = props => {
  const Puntero = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("a", false ? undefined : {
    target: "e1cnj55j1",
    label: "Puntero"
  })(false ? undefined : {
    name: "e0dnmk",
    styles: "cursor:pointer",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const ImgModal = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "e1cnj55j0",
    label: "ImgModal"
  })(false ? undefined : {
    name: "16na1d5",
    styles: "max-width:100%!important;min-width:100%!important;max-height:100%!important;min-height:100%!important",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const {
    0: abiertoAnuncios,
    1: cambiarAbiertoAnuncios
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const {
    0: abiertoCupon,
    1: cambiarAbiertoCupon
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(true);

  const cerrarModal = () => {
    cambiarAbiertoAnuncios(false);
  };

  const cerrarModalCupon = () => {
    cambiarAbiertoCupon(false);
    setTimeout(() => {
      cambiarAbiertoAnuncios(true);
    }, 6000);
  };

  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    const URLactual = window.location;
    const primera = URLactual.hash;

    const redirigirH = () => {
      next_router__WEBPACK_IMPORTED_MODULE_4___default.a.push("#home");
    };
    /* const LS = () => { codigo para cuando se quiten los cupones se descomenta esto
             if(!sessionStorage.getItem('mostrarModal')){
                sessionStorage.setItem("mostrarModal","no");
                //cambiarAbiertoCupon(true);
                 setTimeout(() => {
                    cambiarAbiertoAnuncios(true);
                }, 10000);
                
                return;
            }
        }*/


    if (primera === "#renta" || primera === "#reparacion" || primera === "#venta") {
      return;
    } else {
      redirigirH();
    } //LS();

  }, []);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    setTimeout(() => {
      cambiarAbiertoAnuncios(true);
    }, 7000);
  }, []);

  const Redirigir = e => {
    e.preventDefault();
    cambiarAbiertoAnuncios(false);
    document.location.href = "/#reparacion";
  };

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(_Header__WEBPACK_IMPORTED_MODULE_2__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 87,
      columnNumber: 7
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Modal"], {
    show: abiertoAnuncios,
    onHide: cerrarModal,
    keyboard: false,
    size: "lg",
    className: "modal-altura ppp",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 89,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Modal"].Header, {
    closeButton: true,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 96,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Modal"].Title, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 97,
      columnNumber: 11
    }
  }, "Noticias")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Modal"].Body, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 99,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 100,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 101,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Lector Syble XB-6266MBT.png",
    alt: "Lector de c\xF3digos XB-6266MBT",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 102,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 108,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Handheld EDA52.png",
    alt: "Handheld EDA52",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 109,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 115,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/CT40 Honeywell.png",
    alt: "Handheld CT40",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 116,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 122,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("a", {
    className: "clicks",
    href: "https://www.youtube.com/embed/X8g7RBSSzCc",
    target: "_blank",
    rel: "noopener noreferrer",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 123,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(ImgModal, {
    className: "d-block ",
    src: "/img/Impresora de credenciales Primacy 2.png",
    alt: "Impresora de credenciales",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 129,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 150,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("a", {
    className: "clicks",
    href: "https://www.youtube.com/embed/_N1aq8YJkc4",
    target: "_blank",
    rel: "noopener noreferrer",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 151,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(ImgModal, {
    className: "d-block ",
    src: "/img/Handheld MC2200 y MC2700.gif",
    alt: "Handhelds MC2200 y MC2700",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 157,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 164,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Renta de handheld MC33.webp",
    alt: "Renta de handheld MC33",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 165,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 171,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Renta de handheld CK65.webp",
    alt: "Renta de handheld CK65",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 172,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 178,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Promoci\xF3n_mc9090_funcional_po83sk.webp",
    alt: "Hand Held MC9090",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 179,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 192,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(ImgModal, {
    className: "d-block ",
    src: "/img/Promoci\xF3n_CN51.webp",
    alt: "Hand Held Intermec Honeywell CN51",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 193,
      columnNumber: 15
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 206,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/evolis_adikio.webp",
    alt: "evolis adikio",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 207,
      columnNumber: 17
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 213,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/evolis_impresoras.webp",
    alt: "evolis impresoras de credenciales",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 214,
      columnNumber: 17
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 235,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/IMAGEN_ZEBRA_BANNER_800X500_lyqnpu.webp",
    alt: "Zebra Hand Held Impresoras Lectores",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 236,
      columnNumber: 15
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 242,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(Puntero, {
    onClick: Redirigir,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 243,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(ImgModal, {
    className: "d-block ",
    src: "/img/Copia_de_p\xF3lizas_reparaci\xF3n_sg0xim.webp",
    alt: "Polizas de reparacion handheld impresoras de etiquetas y lectores",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 244,
      columnNumber: 17
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Carousel"].Item, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 265,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(ImgModal, {
    className: "d-block ",
    src: "/img/IMAGEN_ZEBRA_BANNER_800X500_vr6p1d.webp",
    alt: "Zebra Hand Held Impresoras Lectores",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 266,
      columnNumber: 15
    }
  })))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Modal"].Footer, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 300,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_3__["Button"], {
    variant: "light",
    onClick: cerrarModal,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 301,
      columnNumber: 11
    }
  }, "Cerrar"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("main", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 323,
      columnNumber: 7
    }
  }, props.children));
};

/* harmony default export */ __webpack_exports__["default"] = (Layout);

/***/ }),

/***/ "./components/layout/Perfil.js":
/*!*************************************!*\
  !*** ./components/layout/Perfil.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_2__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\Perfil.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }




const Perfil = () => {
  const Fondo = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e15szz2v11",
    label: "Fondo"
  })(false ? undefined : {
    name: "7snzz6",
    styles: "background-color:#0076c0;width:100%;color:white",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJMEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcUGVyZmlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IFBlcmZpbCA9ICgpID0+IHtcbiAgY29uc3QgRm9uZG8gPSBzdHlsZWQuZGl2YFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgY29sb3I6IHdoaXRlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMzNweDtcbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDI2cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleFRpRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogMDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRpID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAxLjI1cmVtO1xuICBgO1xuXG4gIGNvbnN0IEluZm8gPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1sZWZ0OiA1LjNyZW07XG4gICAgbWFyZ2luLXRvcDogNHJlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgbWFyZ2luLWxlZnQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogODAlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgbGluZS1oZWlnaHQ6IDE0cHg7XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogODQlO1xuICAgIG1hcmdpbi1yaWdodDogNnJlbTtcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW07XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHBhZGRpbmctbGVmdDogNnJlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjkwcHgpIHtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICAgIHBhZGRpbmctbGVmdDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICAgIHBhZGRpbmctbGVmdDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiAxNXB4IDE1cHggMTVweCAxNXB4O1xuICAgIHdpZHRoOiA5NCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiA3NCU7XG4gICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDc1JTtcbiAgICAgIG1hcmdpbi10b3A6IDJyZW07XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDQ1MHB4KSB7XG4gICAgICB3aWR0aDogODUlO1xuICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgQm90b25EZXNjYXJnYSA9IHN0eWxlZC5hYFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIGNvbG9yOiAjMGQ3M2E3ICFpbXBvcnRhbnQ7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwibXQtNVwiPlxuICAgICAgICA8Rm9uZG8+XG4gICAgICAgICAgPFRpdHVsb0RpdiBjbGFzc05hbWU9XCJwdC0zXCI+XG4gICAgICAgICAgICA8VGl0dWxvPlBlcmZpbCBDb3Jwb3JhdGl2bzwvVGl0dWxvPlxuICAgICAgICAgIDwvVGl0dWxvRGl2PlxuICAgICAgICAgIDxDb250ZW5lZG9yPlxuICAgICAgICAgICAgPEluZm8+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+T0JKRVRJVk88L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgIFNlciBsYSBlbXByZXNhIGRlIGhhcmR3YXJlIGVuIGxhIGluZHVzdHJpYSBkZSBzb2x1Y2lvbmVzIGVuXG4gICAgICAgICAgICAgICAgICBoYW5kaGVsZCBlIGltcHJlc29yYXMgcG9ydMOhdGlsZXMgeSBkZSBldGlxdWV0YXMsIHByZWRpbGVjdGEgZW5cbiAgICAgICAgICAgICAgICAgIGVsIG1lcmNhZG8gbWV4aWNhbm8uIFBhcmEgbG9ncmFyIGVzdGEgY29uZGljacOzbiwgY3JlY2VyZW1vcyBhXG4gICAgICAgICAgICAgICAgICB0cmF2w6lzIGRlbCBjdW1wbGltaWVudG8gZGUgbG9zIG9iamV0aXZvcyBkZSBudWVzdHJvcyBjbGllbnRlcyxcbiAgICAgICAgICAgICAgICAgIGNvbiB1bmEgY29tcHJvbWV0aWRhIGFjdGl0dWQgZGUgc2VydmljaW8geSBhZGFwdMOhbmRvbm9zIGEgbGFzXG4gICAgICAgICAgICAgICAgICBuZWNlc2lkYWRlcyBxdWUgZWwgc2VjdG9yIGluZHVzdHJpYWwgaGEgdmVuaWRvIGRlc2Fycm9sbGFuZG8uXG4gICAgICAgICAgICAgICAgICBOdWVzdHJvcyBkaWZlcmVuY2lhZG9yZXMgZXN0YXLDoW4gZW4gZWwgc2VydmljaW8geSBhdGVuY2nDs24gYWxcbiAgICAgICAgICAgICAgICAgIGNsaWVudGUuXG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleFRpRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0aT5NSVNJw5NOPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIFNvbW9zIGxhIGVtcHJlc2EgbWV4aWNhbmEgZGVkaWNhZGEgYSBicmluZGFyIHNvbHVjaW9uZXNcbiAgICAgICAgICAgICAgICAgIGlubm92YWRvcmFzIGVuIG5lY2VzaWRhZGVzIGRlIGhhbmRoZWxkcyBlIGltcHJlc29yYXNcbiAgICAgICAgICAgICAgICAgIHBvcnTDoXRpbGVzLCBjb250YW5kbyBjb24gcGVyc29uYWwgYXBhc2lvbmFkbyB5IGFsaW5lYWRvIGFcbiAgICAgICAgICAgICAgICAgIGVxdWlsaWJyaW8gbGFib3JhbC5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlZJU0nDk048L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgU2VyIGxhIGVtcHJlc2EgZW4gbGEgaW5kdXN0cmlhIGRlIHNvbHVjaW9uZXMgZW4gaGFuZGVsZHMgZVxuICAgICAgICAgICAgICAgICAgaW1wcmVzb3JhcyBwb3J0w6F0aWxlcyBwcmVkaWxlY3RhLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+VkFMT1JFUzwvVGV4dGk+XG4gICAgICAgICAgICAgIDwvVGV4VGlEaXY+XG4gICAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgICA8VGV4dG8+XG4gICAgICAgICAgICAgICAgICBSZXNwb25zYWJpbGlkYWQsIENvbXByb21pc28sIENvbmdydWVuY2lhLCBFbXBhdMOtYSB5XG4gICAgICAgICAgICAgICAgICBGbGV4aWJpbGlkYWQuXG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJib3RvXCI+XG4gICAgICAgICAgICAgICAgPEJvdG9uRGVzY2FyZ2FcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1saWdodCBtdC0yIG1iLTNcIlxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9maWxlL2QvMTN6UXpMbU8zM3prR0NXenJ5M3RVdWZkNHZqeFB3OUM4L3ZpZXc/dXNwPXNoYXJpbmdcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIMKhRGVzY2FyZ3VlIG51ZXN0cm9zIHNlcnZpY2lvcyFcbiAgICAgICAgICAgICAgICA8L0JvdG9uRGVzY2FyZ2E+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9JbmZvPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvSGFuZCBIZWxkIFNvbHV0aW9ucy53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJIYW5kIEhlbGQgU29sdXRpb25zXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBlcmZpbDtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const TituloDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e15szz2v10",
    label: "TituloDiv"
  })(false ? undefined : {
    name: "1g1e3d3",
    styles: "width:100%;text-align:center;margin:0px auto",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFVOEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcUGVyZmlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IFBlcmZpbCA9ICgpID0+IHtcbiAgY29uc3QgRm9uZG8gPSBzdHlsZWQuZGl2YFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgY29sb3I6IHdoaXRlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMzNweDtcbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDI2cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleFRpRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogMDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRpID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAxLjI1cmVtO1xuICBgO1xuXG4gIGNvbnN0IEluZm8gPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1sZWZ0OiA1LjNyZW07XG4gICAgbWFyZ2luLXRvcDogNHJlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgbWFyZ2luLWxlZnQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogODAlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgbGluZS1oZWlnaHQ6IDE0cHg7XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogODQlO1xuICAgIG1hcmdpbi1yaWdodDogNnJlbTtcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW07XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHBhZGRpbmctbGVmdDogNnJlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjkwcHgpIHtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICAgIHBhZGRpbmctbGVmdDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICAgIHBhZGRpbmctbGVmdDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiAxNXB4IDE1cHggMTVweCAxNXB4O1xuICAgIHdpZHRoOiA5NCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiA3NCU7XG4gICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDc1JTtcbiAgICAgIG1hcmdpbi10b3A6IDJyZW07XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDQ1MHB4KSB7XG4gICAgICB3aWR0aDogODUlO1xuICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgQm90b25EZXNjYXJnYSA9IHN0eWxlZC5hYFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIGNvbG9yOiAjMGQ3M2E3ICFpbXBvcnRhbnQ7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwibXQtNVwiPlxuICAgICAgICA8Rm9uZG8+XG4gICAgICAgICAgPFRpdHVsb0RpdiBjbGFzc05hbWU9XCJwdC0zXCI+XG4gICAgICAgICAgICA8VGl0dWxvPlBlcmZpbCBDb3Jwb3JhdGl2bzwvVGl0dWxvPlxuICAgICAgICAgIDwvVGl0dWxvRGl2PlxuICAgICAgICAgIDxDb250ZW5lZG9yPlxuICAgICAgICAgICAgPEluZm8+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+T0JKRVRJVk88L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgIFNlciBsYSBlbXByZXNhIGRlIGhhcmR3YXJlIGVuIGxhIGluZHVzdHJpYSBkZSBzb2x1Y2lvbmVzIGVuXG4gICAgICAgICAgICAgICAgICBoYW5kaGVsZCBlIGltcHJlc29yYXMgcG9ydMOhdGlsZXMgeSBkZSBldGlxdWV0YXMsIHByZWRpbGVjdGEgZW5cbiAgICAgICAgICAgICAgICAgIGVsIG1lcmNhZG8gbWV4aWNhbm8uIFBhcmEgbG9ncmFyIGVzdGEgY29uZGljacOzbiwgY3JlY2VyZW1vcyBhXG4gICAgICAgICAgICAgICAgICB0cmF2w6lzIGRlbCBjdW1wbGltaWVudG8gZGUgbG9zIG9iamV0aXZvcyBkZSBudWVzdHJvcyBjbGllbnRlcyxcbiAgICAgICAgICAgICAgICAgIGNvbiB1bmEgY29tcHJvbWV0aWRhIGFjdGl0dWQgZGUgc2VydmljaW8geSBhZGFwdMOhbmRvbm9zIGEgbGFzXG4gICAgICAgICAgICAgICAgICBuZWNlc2lkYWRlcyBxdWUgZWwgc2VjdG9yIGluZHVzdHJpYWwgaGEgdmVuaWRvIGRlc2Fycm9sbGFuZG8uXG4gICAgICAgICAgICAgICAgICBOdWVzdHJvcyBkaWZlcmVuY2lhZG9yZXMgZXN0YXLDoW4gZW4gZWwgc2VydmljaW8geSBhdGVuY2nDs24gYWxcbiAgICAgICAgICAgICAgICAgIGNsaWVudGUuXG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleFRpRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0aT5NSVNJw5NOPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIFNvbW9zIGxhIGVtcHJlc2EgbWV4aWNhbmEgZGVkaWNhZGEgYSBicmluZGFyIHNvbHVjaW9uZXNcbiAgICAgICAgICAgICAgICAgIGlubm92YWRvcmFzIGVuIG5lY2VzaWRhZGVzIGRlIGhhbmRoZWxkcyBlIGltcHJlc29yYXNcbiAgICAgICAgICAgICAgICAgIHBvcnTDoXRpbGVzLCBjb250YW5kbyBjb24gcGVyc29uYWwgYXBhc2lvbmFkbyB5IGFsaW5lYWRvIGFcbiAgICAgICAgICAgICAgICAgIGVxdWlsaWJyaW8gbGFib3JhbC5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlZJU0nDk048L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgU2VyIGxhIGVtcHJlc2EgZW4gbGEgaW5kdXN0cmlhIGRlIHNvbHVjaW9uZXMgZW4gaGFuZGVsZHMgZVxuICAgICAgICAgICAgICAgICAgaW1wcmVzb3JhcyBwb3J0w6F0aWxlcyBwcmVkaWxlY3RhLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+VkFMT1JFUzwvVGV4dGk+XG4gICAgICAgICAgICAgIDwvVGV4VGlEaXY+XG4gICAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgICA8VGV4dG8+XG4gICAgICAgICAgICAgICAgICBSZXNwb25zYWJpbGlkYWQsIENvbXByb21pc28sIENvbmdydWVuY2lhLCBFbXBhdMOtYSB5XG4gICAgICAgICAgICAgICAgICBGbGV4aWJpbGlkYWQuXG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJib3RvXCI+XG4gICAgICAgICAgICAgICAgPEJvdG9uRGVzY2FyZ2FcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1saWdodCBtdC0yIG1iLTNcIlxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9maWxlL2QvMTN6UXpMbU8zM3prR0NXenJ5M3RVdWZkNHZqeFB3OUM4L3ZpZXc/dXNwPXNoYXJpbmdcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIMKhRGVzY2FyZ3VlIG51ZXN0cm9zIHNlcnZpY2lvcyFcbiAgICAgICAgICAgICAgICA8L0JvdG9uRGVzY2FyZ2E+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9JbmZvPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvSGFuZCBIZWxkIFNvbHV0aW9ucy53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJIYW5kIEhlbGQgU29sdXRpb25zXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBlcmZpbDtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Titulo = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "e15szz2v9",
    label: "Titulo"
  })(false ? undefined : {
    name: "1jdehpd",
    styles: "color:white;font-weight:bold;font-size:33px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnQnlCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBQZXJmaWwgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5wYFxuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDMzcHg7XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctYm90dG9tOiAyNnB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXhUaURpdiA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiA4MCU7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0aSA9IHN0eWxlZC5wYFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgYDtcblxuICBjb25zdCBJbmZvID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuICAgIG1hcmdpbi10b3A6IDRyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0b0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxNHB4O1xuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDg0JTtcbiAgICBtYXJnaW4tcmlnaHQ6IDZyZW07XG4gICAgbWFyZ2luLXRvcDogMS41cmVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nLWxlZnQ6IDZyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTI5MHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICBwYWRkaW5nLWxlZnQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbiA9IHN0eWxlZC5pbWdgXG4gICAgYm9yZGVyLXJhZGl1czogMTVweCAxNXB4IDE1cHggMTVweDtcbiAgICB3aWR0aDogOTQlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogNzQlO1xuICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA3NSU7XG4gICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xuICAgICAgd2lkdGg6IDg1JTtcbiAgICAgIG1hcmdpbi10b3A6IDJyZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEJvdG9uRGVzY2FyZ2EgPSBzdHlsZWQuYWBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogIzBkNzNhNyAhaW1wb3J0YW50O1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgPEZvbmRvPlxuICAgICAgICAgIDxUaXR1bG9EaXYgY2xhc3NOYW1lPVwicHQtM1wiPlxuICAgICAgICAgICAgPFRpdHVsbz5QZXJmaWwgQ29ycG9yYXRpdm88L1RpdHVsbz5cbiAgICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPk9CSkVUSVZPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICBTZXIgbGEgZW1wcmVzYSBkZSBoYXJkd2FyZSBlbiBsYSBpbmR1c3RyaWEgZGUgc29sdWNpb25lcyBlblxuICAgICAgICAgICAgICAgICAgaGFuZGhlbGQgZSBpbXByZXNvcmFzIHBvcnTDoXRpbGVzIHkgZGUgZXRpcXVldGFzLCBwcmVkaWxlY3RhIGVuXG4gICAgICAgICAgICAgICAgICBlbCBtZXJjYWRvIG1leGljYW5vLiBQYXJhIGxvZ3JhciBlc3RhIGNvbmRpY2nDs24sIGNyZWNlcmVtb3MgYVxuICAgICAgICAgICAgICAgICAgdHJhdsOpcyBkZWwgY3VtcGxpbWllbnRvIGRlIGxvcyBvYmpldGl2b3MgZGUgbnVlc3Ryb3MgY2xpZW50ZXMsXG4gICAgICAgICAgICAgICAgICBjb24gdW5hIGNvbXByb21ldGlkYSBhY3RpdHVkIGRlIHNlcnZpY2lvIHkgYWRhcHTDoW5kb25vcyBhIGxhc1xuICAgICAgICAgICAgICAgICAgbmVjZXNpZGFkZXMgcXVlIGVsIHNlY3RvciBpbmR1c3RyaWFsIGhhIHZlbmlkbyBkZXNhcnJvbGxhbmRvLlxuICAgICAgICAgICAgICAgICAgTnVlc3Ryb3MgZGlmZXJlbmNpYWRvcmVzIGVzdGFyw6FuIGVuIGVsIHNlcnZpY2lvIHkgYXRlbmNpw7NuIGFsXG4gICAgICAgICAgICAgICAgICBjbGllbnRlLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+TUlTScOTTjwvVGV4dGk+XG4gICAgICAgICAgICAgIDwvVGV4VGlEaXY+XG4gICAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgICA8VGV4dG8+XG4gICAgICAgICAgICAgICAgICBTb21vcyBsYSBlbXByZXNhIG1leGljYW5hIGRlZGljYWRhIGEgYnJpbmRhciBzb2x1Y2lvbmVzXG4gICAgICAgICAgICAgICAgICBpbm5vdmFkb3JhcyBlbiBuZWNlc2lkYWRlcyBkZSBoYW5kaGVsZHMgZSBpbXByZXNvcmFzXG4gICAgICAgICAgICAgICAgICBwb3J0w6F0aWxlcywgY29udGFuZG8gY29uIHBlcnNvbmFsIGFwYXNpb25hZG8geSBhbGluZWFkbyBhXG4gICAgICAgICAgICAgICAgICBlcXVpbGlicmlvIGxhYm9yYWwuXG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleFRpRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0aT5WSVNJw5NOPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIFNlciBsYSBlbXByZXNhIGVuIGxhIGluZHVzdHJpYSBkZSBzb2x1Y2lvbmVzIGVuIGhhbmRlbGRzIGVcbiAgICAgICAgICAgICAgICAgIGltcHJlc29yYXMgcG9ydMOhdGlsZXMgcHJlZGlsZWN0YS5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlZBTE9SRVM8L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgUmVzcG9uc2FiaWxpZGFkLCBDb21wcm9taXNvLCBDb25ncnVlbmNpYSwgRW1wYXTDrWEgeVxuICAgICAgICAgICAgICAgICAgRmxleGliaWxpZGFkLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm90b1wiPlxuICAgICAgICAgICAgICAgIDxCb3RvbkRlc2NhcmdhXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tbGlnaHQgbXQtMiBtYi0zXCJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzEzelF6TG1PMzN6a0dDV3pyeTN0VXVmZDR2anhQdzlDOC92aWV3P3VzcD1zaGFyaW5nXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICDCoURlc2Nhcmd1ZSBudWVzdHJvcyBzZXJ2aWNpb3MhXG4gICAgICAgICAgICAgICAgPC9Cb3RvbkRlc2NhcmdhPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvSW5mbz5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0hhbmQgSGVsZCBTb2x1dGlvbnMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIFNvbHV0aW9uc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICA8L0NvbnRlbmVkb3I+XG4gICAgICAgIDwvRm9uZG8+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQZXJmaWw7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Contenedor = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e15szz2v8",
    label: "Contenedor"
  })(false ? undefined : {
    name: "uzusni",
    styles: "display:flex;justify-content:space-between;max-width:100%;padding-bottom:26px;@media (max-width: 900px){display:grid;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQitCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBQZXJmaWwgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5wYFxuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDMzcHg7XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctYm90dG9tOiAyNnB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXhUaURpdiA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiA4MCU7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0aSA9IHN0eWxlZC5wYFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgYDtcblxuICBjb25zdCBJbmZvID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuICAgIG1hcmdpbi10b3A6IDRyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0b0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxNHB4O1xuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDg0JTtcbiAgICBtYXJnaW4tcmlnaHQ6IDZyZW07XG4gICAgbWFyZ2luLXRvcDogMS41cmVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nLWxlZnQ6IDZyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTI5MHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICBwYWRkaW5nLWxlZnQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbiA9IHN0eWxlZC5pbWdgXG4gICAgYm9yZGVyLXJhZGl1czogMTVweCAxNXB4IDE1cHggMTVweDtcbiAgICB3aWR0aDogOTQlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogNzQlO1xuICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA3NSU7XG4gICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xuICAgICAgd2lkdGg6IDg1JTtcbiAgICAgIG1hcmdpbi10b3A6IDJyZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEJvdG9uRGVzY2FyZ2EgPSBzdHlsZWQuYWBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogIzBkNzNhNyAhaW1wb3J0YW50O1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgPEZvbmRvPlxuICAgICAgICAgIDxUaXR1bG9EaXYgY2xhc3NOYW1lPVwicHQtM1wiPlxuICAgICAgICAgICAgPFRpdHVsbz5QZXJmaWwgQ29ycG9yYXRpdm88L1RpdHVsbz5cbiAgICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPk9CSkVUSVZPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICBTZXIgbGEgZW1wcmVzYSBkZSBoYXJkd2FyZSBlbiBsYSBpbmR1c3RyaWEgZGUgc29sdWNpb25lcyBlblxuICAgICAgICAgICAgICAgICAgaGFuZGhlbGQgZSBpbXByZXNvcmFzIHBvcnTDoXRpbGVzIHkgZGUgZXRpcXVldGFzLCBwcmVkaWxlY3RhIGVuXG4gICAgICAgICAgICAgICAgICBlbCBtZXJjYWRvIG1leGljYW5vLiBQYXJhIGxvZ3JhciBlc3RhIGNvbmRpY2nDs24sIGNyZWNlcmVtb3MgYVxuICAgICAgICAgICAgICAgICAgdHJhdsOpcyBkZWwgY3VtcGxpbWllbnRvIGRlIGxvcyBvYmpldGl2b3MgZGUgbnVlc3Ryb3MgY2xpZW50ZXMsXG4gICAgICAgICAgICAgICAgICBjb24gdW5hIGNvbXByb21ldGlkYSBhY3RpdHVkIGRlIHNlcnZpY2lvIHkgYWRhcHTDoW5kb25vcyBhIGxhc1xuICAgICAgICAgICAgICAgICAgbmVjZXNpZGFkZXMgcXVlIGVsIHNlY3RvciBpbmR1c3RyaWFsIGhhIHZlbmlkbyBkZXNhcnJvbGxhbmRvLlxuICAgICAgICAgICAgICAgICAgTnVlc3Ryb3MgZGlmZXJlbmNpYWRvcmVzIGVzdGFyw6FuIGVuIGVsIHNlcnZpY2lvIHkgYXRlbmNpw7NuIGFsXG4gICAgICAgICAgICAgICAgICBjbGllbnRlLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+TUlTScOTTjwvVGV4dGk+XG4gICAgICAgICAgICAgIDwvVGV4VGlEaXY+XG4gICAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgICA8VGV4dG8+XG4gICAgICAgICAgICAgICAgICBTb21vcyBsYSBlbXByZXNhIG1leGljYW5hIGRlZGljYWRhIGEgYnJpbmRhciBzb2x1Y2lvbmVzXG4gICAgICAgICAgICAgICAgICBpbm5vdmFkb3JhcyBlbiBuZWNlc2lkYWRlcyBkZSBoYW5kaGVsZHMgZSBpbXByZXNvcmFzXG4gICAgICAgICAgICAgICAgICBwb3J0w6F0aWxlcywgY29udGFuZG8gY29uIHBlcnNvbmFsIGFwYXNpb25hZG8geSBhbGluZWFkbyBhXG4gICAgICAgICAgICAgICAgICBlcXVpbGlicmlvIGxhYm9yYWwuXG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleFRpRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0aT5WSVNJw5NOPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIFNlciBsYSBlbXByZXNhIGVuIGxhIGluZHVzdHJpYSBkZSBzb2x1Y2lvbmVzIGVuIGhhbmRlbGRzIGVcbiAgICAgICAgICAgICAgICAgIGltcHJlc29yYXMgcG9ydMOhdGlsZXMgcHJlZGlsZWN0YS5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlZBTE9SRVM8L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgUmVzcG9uc2FiaWxpZGFkLCBDb21wcm9taXNvLCBDb25ncnVlbmNpYSwgRW1wYXTDrWEgeVxuICAgICAgICAgICAgICAgICAgRmxleGliaWxpZGFkLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm90b1wiPlxuICAgICAgICAgICAgICAgIDxCb3RvbkRlc2NhcmdhXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tbGlnaHQgbXQtMiBtYi0zXCJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzEzelF6TG1PMzN6a0dDV3pyeTN0VXVmZDR2anhQdzlDOC92aWV3P3VzcD1zaGFyaW5nXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICDCoURlc2Nhcmd1ZSBudWVzdHJvcyBzZXJ2aWNpb3MhXG4gICAgICAgICAgICAgICAgPC9Cb3RvbkRlc2NhcmdhPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvSW5mbz5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0hhbmQgSGVsZCBTb2x1dGlvbnMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIFNvbHV0aW9uc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICA8L0NvbnRlbmVkb3I+XG4gICAgICAgIDwvRm9uZG8+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQZXJmaWw7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const TexTiDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e15szz2v7",
    label: "TexTiDiv"
  })(false ? undefined : {
    name: "jwhc6t",
    styles: "text-align:center;margin:0px auto;width:100%;margin-left:0;@media (max-width: 900px){width:80%;text-align:center;margin:0px auto;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQzZCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBQZXJmaWwgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5wYFxuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDMzcHg7XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctYm90dG9tOiAyNnB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXhUaURpdiA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiA4MCU7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0aSA9IHN0eWxlZC5wYFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgYDtcblxuICBjb25zdCBJbmZvID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuICAgIG1hcmdpbi10b3A6IDRyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0b0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxNHB4O1xuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDg0JTtcbiAgICBtYXJnaW4tcmlnaHQ6IDZyZW07XG4gICAgbWFyZ2luLXRvcDogMS41cmVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nLWxlZnQ6IDZyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTI5MHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICBwYWRkaW5nLWxlZnQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbiA9IHN0eWxlZC5pbWdgXG4gICAgYm9yZGVyLXJhZGl1czogMTVweCAxNXB4IDE1cHggMTVweDtcbiAgICB3aWR0aDogOTQlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogNzQlO1xuICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA3NSU7XG4gICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xuICAgICAgd2lkdGg6IDg1JTtcbiAgICAgIG1hcmdpbi10b3A6IDJyZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEJvdG9uRGVzY2FyZ2EgPSBzdHlsZWQuYWBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogIzBkNzNhNyAhaW1wb3J0YW50O1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgPEZvbmRvPlxuICAgICAgICAgIDxUaXR1bG9EaXYgY2xhc3NOYW1lPVwicHQtM1wiPlxuICAgICAgICAgICAgPFRpdHVsbz5QZXJmaWwgQ29ycG9yYXRpdm88L1RpdHVsbz5cbiAgICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPk9CSkVUSVZPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICBTZXIgbGEgZW1wcmVzYSBkZSBoYXJkd2FyZSBlbiBsYSBpbmR1c3RyaWEgZGUgc29sdWNpb25lcyBlblxuICAgICAgICAgICAgICAgICAgaGFuZGhlbGQgZSBpbXByZXNvcmFzIHBvcnTDoXRpbGVzIHkgZGUgZXRpcXVldGFzLCBwcmVkaWxlY3RhIGVuXG4gICAgICAgICAgICAgICAgICBlbCBtZXJjYWRvIG1leGljYW5vLiBQYXJhIGxvZ3JhciBlc3RhIGNvbmRpY2nDs24sIGNyZWNlcmVtb3MgYVxuICAgICAgICAgICAgICAgICAgdHJhdsOpcyBkZWwgY3VtcGxpbWllbnRvIGRlIGxvcyBvYmpldGl2b3MgZGUgbnVlc3Ryb3MgY2xpZW50ZXMsXG4gICAgICAgICAgICAgICAgICBjb24gdW5hIGNvbXByb21ldGlkYSBhY3RpdHVkIGRlIHNlcnZpY2lvIHkgYWRhcHTDoW5kb25vcyBhIGxhc1xuICAgICAgICAgICAgICAgICAgbmVjZXNpZGFkZXMgcXVlIGVsIHNlY3RvciBpbmR1c3RyaWFsIGhhIHZlbmlkbyBkZXNhcnJvbGxhbmRvLlxuICAgICAgICAgICAgICAgICAgTnVlc3Ryb3MgZGlmZXJlbmNpYWRvcmVzIGVzdGFyw6FuIGVuIGVsIHNlcnZpY2lvIHkgYXRlbmNpw7NuIGFsXG4gICAgICAgICAgICAgICAgICBjbGllbnRlLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+TUlTScOTTjwvVGV4dGk+XG4gICAgICAgICAgICAgIDwvVGV4VGlEaXY+XG4gICAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgICA8VGV4dG8+XG4gICAgICAgICAgICAgICAgICBTb21vcyBsYSBlbXByZXNhIG1leGljYW5hIGRlZGljYWRhIGEgYnJpbmRhciBzb2x1Y2lvbmVzXG4gICAgICAgICAgICAgICAgICBpbm5vdmFkb3JhcyBlbiBuZWNlc2lkYWRlcyBkZSBoYW5kaGVsZHMgZSBpbXByZXNvcmFzXG4gICAgICAgICAgICAgICAgICBwb3J0w6F0aWxlcywgY29udGFuZG8gY29uIHBlcnNvbmFsIGFwYXNpb25hZG8geSBhbGluZWFkbyBhXG4gICAgICAgICAgICAgICAgICBlcXVpbGlicmlvIGxhYm9yYWwuXG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleFRpRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0aT5WSVNJw5NOPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIFNlciBsYSBlbXByZXNhIGVuIGxhIGluZHVzdHJpYSBkZSBzb2x1Y2lvbmVzIGVuIGhhbmRlbGRzIGVcbiAgICAgICAgICAgICAgICAgIGltcHJlc29yYXMgcG9ydMOhdGlsZXMgcHJlZGlsZWN0YS5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlZBTE9SRVM8L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgUmVzcG9uc2FiaWxpZGFkLCBDb21wcm9taXNvLCBDb25ncnVlbmNpYSwgRW1wYXTDrWEgeVxuICAgICAgICAgICAgICAgICAgRmxleGliaWxpZGFkLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm90b1wiPlxuICAgICAgICAgICAgICAgIDxCb3RvbkRlc2NhcmdhXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tbGlnaHQgbXQtMiBtYi0zXCJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzEzelF6TG1PMzN6a0dDV3pyeTN0VXVmZDR2anhQdzlDOC92aWV3P3VzcD1zaGFyaW5nXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICDCoURlc2Nhcmd1ZSBudWVzdHJvcyBzZXJ2aWNpb3MhXG4gICAgICAgICAgICAgICAgPC9Cb3RvbkRlc2NhcmdhPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvSW5mbz5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0hhbmQgSGVsZCBTb2x1dGlvbnMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIFNvbHV0aW9uc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICA8L0NvbnRlbmVkb3I+XG4gICAgICAgIDwvRm9uZG8+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQZXJmaWw7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Texti = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "e15szz2v6",
    label: "Texti"
  })(false ? undefined : {
    name: "u3x1uk",
    styles: "font-weight:bold;font-size:1.25rem",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4Q3dCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBQZXJmaWwgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5wYFxuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDMzcHg7XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctYm90dG9tOiAyNnB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXhUaURpdiA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiA4MCU7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0aSA9IHN0eWxlZC5wYFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgYDtcblxuICBjb25zdCBJbmZvID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuICAgIG1hcmdpbi10b3A6IDRyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0b0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxNHB4O1xuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDg0JTtcbiAgICBtYXJnaW4tcmlnaHQ6IDZyZW07XG4gICAgbWFyZ2luLXRvcDogMS41cmVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nLWxlZnQ6IDZyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTI5MHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICBwYWRkaW5nLWxlZnQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbiA9IHN0eWxlZC5pbWdgXG4gICAgYm9yZGVyLXJhZGl1czogMTVweCAxNXB4IDE1cHggMTVweDtcbiAgICB3aWR0aDogOTQlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogNzQlO1xuICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA3NSU7XG4gICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xuICAgICAgd2lkdGg6IDg1JTtcbiAgICAgIG1hcmdpbi10b3A6IDJyZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEJvdG9uRGVzY2FyZ2EgPSBzdHlsZWQuYWBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogIzBkNzNhNyAhaW1wb3J0YW50O1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgPEZvbmRvPlxuICAgICAgICAgIDxUaXR1bG9EaXYgY2xhc3NOYW1lPVwicHQtM1wiPlxuICAgICAgICAgICAgPFRpdHVsbz5QZXJmaWwgQ29ycG9yYXRpdm88L1RpdHVsbz5cbiAgICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPk9CSkVUSVZPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICBTZXIgbGEgZW1wcmVzYSBkZSBoYXJkd2FyZSBlbiBsYSBpbmR1c3RyaWEgZGUgc29sdWNpb25lcyBlblxuICAgICAgICAgICAgICAgICAgaGFuZGhlbGQgZSBpbXByZXNvcmFzIHBvcnTDoXRpbGVzIHkgZGUgZXRpcXVldGFzLCBwcmVkaWxlY3RhIGVuXG4gICAgICAgICAgICAgICAgICBlbCBtZXJjYWRvIG1leGljYW5vLiBQYXJhIGxvZ3JhciBlc3RhIGNvbmRpY2nDs24sIGNyZWNlcmVtb3MgYVxuICAgICAgICAgICAgICAgICAgdHJhdsOpcyBkZWwgY3VtcGxpbWllbnRvIGRlIGxvcyBvYmpldGl2b3MgZGUgbnVlc3Ryb3MgY2xpZW50ZXMsXG4gICAgICAgICAgICAgICAgICBjb24gdW5hIGNvbXByb21ldGlkYSBhY3RpdHVkIGRlIHNlcnZpY2lvIHkgYWRhcHTDoW5kb25vcyBhIGxhc1xuICAgICAgICAgICAgICAgICAgbmVjZXNpZGFkZXMgcXVlIGVsIHNlY3RvciBpbmR1c3RyaWFsIGhhIHZlbmlkbyBkZXNhcnJvbGxhbmRvLlxuICAgICAgICAgICAgICAgICAgTnVlc3Ryb3MgZGlmZXJlbmNpYWRvcmVzIGVzdGFyw6FuIGVuIGVsIHNlcnZpY2lvIHkgYXRlbmNpw7NuIGFsXG4gICAgICAgICAgICAgICAgICBjbGllbnRlLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+TUlTScOTTjwvVGV4dGk+XG4gICAgICAgICAgICAgIDwvVGV4VGlEaXY+XG4gICAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgICA8VGV4dG8+XG4gICAgICAgICAgICAgICAgICBTb21vcyBsYSBlbXByZXNhIG1leGljYW5hIGRlZGljYWRhIGEgYnJpbmRhciBzb2x1Y2lvbmVzXG4gICAgICAgICAgICAgICAgICBpbm5vdmFkb3JhcyBlbiBuZWNlc2lkYWRlcyBkZSBoYW5kaGVsZHMgZSBpbXByZXNvcmFzXG4gICAgICAgICAgICAgICAgICBwb3J0w6F0aWxlcywgY29udGFuZG8gY29uIHBlcnNvbmFsIGFwYXNpb25hZG8geSBhbGluZWFkbyBhXG4gICAgICAgICAgICAgICAgICBlcXVpbGlicmlvIGxhYm9yYWwuXG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleFRpRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0aT5WSVNJw5NOPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIFNlciBsYSBlbXByZXNhIGVuIGxhIGluZHVzdHJpYSBkZSBzb2x1Y2lvbmVzIGVuIGhhbmRlbGRzIGVcbiAgICAgICAgICAgICAgICAgIGltcHJlc29yYXMgcG9ydMOhdGlsZXMgcHJlZGlsZWN0YS5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlZBTE9SRVM8L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgUmVzcG9uc2FiaWxpZGFkLCBDb21wcm9taXNvLCBDb25ncnVlbmNpYSwgRW1wYXTDrWEgeVxuICAgICAgICAgICAgICAgICAgRmxleGliaWxpZGFkLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm90b1wiPlxuICAgICAgICAgICAgICAgIDxCb3RvbkRlc2NhcmdhXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tbGlnaHQgbXQtMiBtYi0zXCJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzEzelF6TG1PMzN6a0dDV3pyeTN0VXVmZDR2anhQdzlDOC92aWV3P3VzcD1zaGFyaW5nXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICDCoURlc2Nhcmd1ZSBudWVzdHJvcyBzZXJ2aWNpb3MhXG4gICAgICAgICAgICAgICAgPC9Cb3RvbkRlc2NhcmdhPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvSW5mbz5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0hhbmQgSGVsZCBTb2x1dGlvbnMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIFNvbHV0aW9uc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICA8L0NvbnRlbmVkb3I+XG4gICAgICAgIDwvRm9uZG8+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQZXJmaWw7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Info = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e15szz2v5",
    label: "Info"
  })(false ? undefined : {
    name: "1kwot76",
    styles: "width:100%;margin-left:5.3rem;margin-top:4rem;@media (max-width: 900px){margin-left:0rem;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtRHlCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBQZXJmaWwgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5wYFxuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDMzcHg7XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctYm90dG9tOiAyNnB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXhUaURpdiA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiA4MCU7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0aSA9IHN0eWxlZC5wYFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgYDtcblxuICBjb25zdCBJbmZvID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuICAgIG1hcmdpbi10b3A6IDRyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0b0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxNHB4O1xuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDg0JTtcbiAgICBtYXJnaW4tcmlnaHQ6IDZyZW07XG4gICAgbWFyZ2luLXRvcDogMS41cmVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nLWxlZnQ6IDZyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTI5MHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICBwYWRkaW5nLWxlZnQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbiA9IHN0eWxlZC5pbWdgXG4gICAgYm9yZGVyLXJhZGl1czogMTVweCAxNXB4IDE1cHggMTVweDtcbiAgICB3aWR0aDogOTQlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogNzQlO1xuICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA3NSU7XG4gICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xuICAgICAgd2lkdGg6IDg1JTtcbiAgICAgIG1hcmdpbi10b3A6IDJyZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEJvdG9uRGVzY2FyZ2EgPSBzdHlsZWQuYWBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogIzBkNzNhNyAhaW1wb3J0YW50O1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgPEZvbmRvPlxuICAgICAgICAgIDxUaXR1bG9EaXYgY2xhc3NOYW1lPVwicHQtM1wiPlxuICAgICAgICAgICAgPFRpdHVsbz5QZXJmaWwgQ29ycG9yYXRpdm88L1RpdHVsbz5cbiAgICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPk9CSkVUSVZPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICBTZXIgbGEgZW1wcmVzYSBkZSBoYXJkd2FyZSBlbiBsYSBpbmR1c3RyaWEgZGUgc29sdWNpb25lcyBlblxuICAgICAgICAgICAgICAgICAgaGFuZGhlbGQgZSBpbXByZXNvcmFzIHBvcnTDoXRpbGVzIHkgZGUgZXRpcXVldGFzLCBwcmVkaWxlY3RhIGVuXG4gICAgICAgICAgICAgICAgICBlbCBtZXJjYWRvIG1leGljYW5vLiBQYXJhIGxvZ3JhciBlc3RhIGNvbmRpY2nDs24sIGNyZWNlcmVtb3MgYVxuICAgICAgICAgICAgICAgICAgdHJhdsOpcyBkZWwgY3VtcGxpbWllbnRvIGRlIGxvcyBvYmpldGl2b3MgZGUgbnVlc3Ryb3MgY2xpZW50ZXMsXG4gICAgICAgICAgICAgICAgICBjb24gdW5hIGNvbXByb21ldGlkYSBhY3RpdHVkIGRlIHNlcnZpY2lvIHkgYWRhcHTDoW5kb25vcyBhIGxhc1xuICAgICAgICAgICAgICAgICAgbmVjZXNpZGFkZXMgcXVlIGVsIHNlY3RvciBpbmR1c3RyaWFsIGhhIHZlbmlkbyBkZXNhcnJvbGxhbmRvLlxuICAgICAgICAgICAgICAgICAgTnVlc3Ryb3MgZGlmZXJlbmNpYWRvcmVzIGVzdGFyw6FuIGVuIGVsIHNlcnZpY2lvIHkgYXRlbmNpw7NuIGFsXG4gICAgICAgICAgICAgICAgICBjbGllbnRlLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+TUlTScOTTjwvVGV4dGk+XG4gICAgICAgICAgICAgIDwvVGV4VGlEaXY+XG4gICAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgICA8VGV4dG8+XG4gICAgICAgICAgICAgICAgICBTb21vcyBsYSBlbXByZXNhIG1leGljYW5hIGRlZGljYWRhIGEgYnJpbmRhciBzb2x1Y2lvbmVzXG4gICAgICAgICAgICAgICAgICBpbm5vdmFkb3JhcyBlbiBuZWNlc2lkYWRlcyBkZSBoYW5kaGVsZHMgZSBpbXByZXNvcmFzXG4gICAgICAgICAgICAgICAgICBwb3J0w6F0aWxlcywgY29udGFuZG8gY29uIHBlcnNvbmFsIGFwYXNpb25hZG8geSBhbGluZWFkbyBhXG4gICAgICAgICAgICAgICAgICBlcXVpbGlicmlvIGxhYm9yYWwuXG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleFRpRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0aT5WSVNJw5NOPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIFNlciBsYSBlbXByZXNhIGVuIGxhIGluZHVzdHJpYSBkZSBzb2x1Y2lvbmVzIGVuIGhhbmRlbGRzIGVcbiAgICAgICAgICAgICAgICAgIGltcHJlc29yYXMgcG9ydMOhdGlsZXMgcHJlZGlsZWN0YS5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlZBTE9SRVM8L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgUmVzcG9uc2FiaWxpZGFkLCBDb21wcm9taXNvLCBDb25ncnVlbmNpYSwgRW1wYXTDrWEgeVxuICAgICAgICAgICAgICAgICAgRmxleGliaWxpZGFkLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm90b1wiPlxuICAgICAgICAgICAgICAgIDxCb3RvbkRlc2NhcmdhXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tbGlnaHQgbXQtMiBtYi0zXCJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzEzelF6TG1PMzN6a0dDV3pyeTN0VXVmZDR2anhQdzlDOC92aWV3P3VzcD1zaGFyaW5nXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICDCoURlc2Nhcmd1ZSBudWVzdHJvcyBzZXJ2aWNpb3MhXG4gICAgICAgICAgICAgICAgPC9Cb3RvbkRlc2NhcmdhPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvSW5mbz5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0hhbmQgSGVsZCBTb2x1dGlvbnMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIFNvbHV0aW9uc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICA8L0NvbnRlbmVkb3I+XG4gICAgICAgIDwvRm9uZG8+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQZXJmaWw7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const TextoDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e15szz2v4",
    label: "TextoDiv"
  })(false ? undefined : {
    name: "q5ehh3",
    styles: "width:100%;text-align:justify;@media (max-width: 900px){width:80%;margin:0px auto;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2RDZCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBQZXJmaWwgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5wYFxuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDMzcHg7XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctYm90dG9tOiAyNnB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXhUaURpdiA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiA4MCU7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0aSA9IHN0eWxlZC5wYFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgYDtcblxuICBjb25zdCBJbmZvID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuICAgIG1hcmdpbi10b3A6IDRyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0b0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxNHB4O1xuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDg0JTtcbiAgICBtYXJnaW4tcmlnaHQ6IDZyZW07XG4gICAgbWFyZ2luLXRvcDogMS41cmVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nLWxlZnQ6IDZyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTI5MHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICBwYWRkaW5nLWxlZnQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbiA9IHN0eWxlZC5pbWdgXG4gICAgYm9yZGVyLXJhZGl1czogMTVweCAxNXB4IDE1cHggMTVweDtcbiAgICB3aWR0aDogOTQlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogNzQlO1xuICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA3NSU7XG4gICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xuICAgICAgd2lkdGg6IDg1JTtcbiAgICAgIG1hcmdpbi10b3A6IDJyZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEJvdG9uRGVzY2FyZ2EgPSBzdHlsZWQuYWBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogIzBkNzNhNyAhaW1wb3J0YW50O1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgPEZvbmRvPlxuICAgICAgICAgIDxUaXR1bG9EaXYgY2xhc3NOYW1lPVwicHQtM1wiPlxuICAgICAgICAgICAgPFRpdHVsbz5QZXJmaWwgQ29ycG9yYXRpdm88L1RpdHVsbz5cbiAgICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPk9CSkVUSVZPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICBTZXIgbGEgZW1wcmVzYSBkZSBoYXJkd2FyZSBlbiBsYSBpbmR1c3RyaWEgZGUgc29sdWNpb25lcyBlblxuICAgICAgICAgICAgICAgICAgaGFuZGhlbGQgZSBpbXByZXNvcmFzIHBvcnTDoXRpbGVzIHkgZGUgZXRpcXVldGFzLCBwcmVkaWxlY3RhIGVuXG4gICAgICAgICAgICAgICAgICBlbCBtZXJjYWRvIG1leGljYW5vLiBQYXJhIGxvZ3JhciBlc3RhIGNvbmRpY2nDs24sIGNyZWNlcmVtb3MgYVxuICAgICAgICAgICAgICAgICAgdHJhdsOpcyBkZWwgY3VtcGxpbWllbnRvIGRlIGxvcyBvYmpldGl2b3MgZGUgbnVlc3Ryb3MgY2xpZW50ZXMsXG4gICAgICAgICAgICAgICAgICBjb24gdW5hIGNvbXByb21ldGlkYSBhY3RpdHVkIGRlIHNlcnZpY2lvIHkgYWRhcHTDoW5kb25vcyBhIGxhc1xuICAgICAgICAgICAgICAgICAgbmVjZXNpZGFkZXMgcXVlIGVsIHNlY3RvciBpbmR1c3RyaWFsIGhhIHZlbmlkbyBkZXNhcnJvbGxhbmRvLlxuICAgICAgICAgICAgICAgICAgTnVlc3Ryb3MgZGlmZXJlbmNpYWRvcmVzIGVzdGFyw6FuIGVuIGVsIHNlcnZpY2lvIHkgYXRlbmNpw7NuIGFsXG4gICAgICAgICAgICAgICAgICBjbGllbnRlLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+TUlTScOTTjwvVGV4dGk+XG4gICAgICAgICAgICAgIDwvVGV4VGlEaXY+XG4gICAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgICA8VGV4dG8+XG4gICAgICAgICAgICAgICAgICBTb21vcyBsYSBlbXByZXNhIG1leGljYW5hIGRlZGljYWRhIGEgYnJpbmRhciBzb2x1Y2lvbmVzXG4gICAgICAgICAgICAgICAgICBpbm5vdmFkb3JhcyBlbiBuZWNlc2lkYWRlcyBkZSBoYW5kaGVsZHMgZSBpbXByZXNvcmFzXG4gICAgICAgICAgICAgICAgICBwb3J0w6F0aWxlcywgY29udGFuZG8gY29uIHBlcnNvbmFsIGFwYXNpb25hZG8geSBhbGluZWFkbyBhXG4gICAgICAgICAgICAgICAgICBlcXVpbGlicmlvIGxhYm9yYWwuXG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleFRpRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0aT5WSVNJw5NOPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIFNlciBsYSBlbXByZXNhIGVuIGxhIGluZHVzdHJpYSBkZSBzb2x1Y2lvbmVzIGVuIGhhbmRlbGRzIGVcbiAgICAgICAgICAgICAgICAgIGltcHJlc29yYXMgcG9ydMOhdGlsZXMgcHJlZGlsZWN0YS5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlZBTE9SRVM8L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgUmVzcG9uc2FiaWxpZGFkLCBDb21wcm9taXNvLCBDb25ncnVlbmNpYSwgRW1wYXTDrWEgeVxuICAgICAgICAgICAgICAgICAgRmxleGliaWxpZGFkLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm90b1wiPlxuICAgICAgICAgICAgICAgIDxCb3RvbkRlc2NhcmdhXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tbGlnaHQgbXQtMiBtYi0zXCJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzEzelF6TG1PMzN6a0dDV3pyeTN0VXVmZDR2anhQdzlDOC92aWV3P3VzcD1zaGFyaW5nXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICDCoURlc2Nhcmd1ZSBudWVzdHJvcyBzZXJ2aWNpb3MhXG4gICAgICAgICAgICAgICAgPC9Cb3RvbkRlc2NhcmdhPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvSW5mbz5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0hhbmQgSGVsZCBTb2x1dGlvbnMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIFNvbHV0aW9uc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICA8L0NvbnRlbmVkb3I+XG4gICAgICAgIDwvRm9uZG8+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQZXJmaWw7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Texto = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "e15szz2v3",
    label: "Texto"
  })(false ? undefined : {
    name: "ytult0",
    styles: "font-size:14px;line-height:14px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1RXdCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBQZXJmaWwgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5wYFxuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDMzcHg7XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctYm90dG9tOiAyNnB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXhUaURpdiA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiA4MCU7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0aSA9IHN0eWxlZC5wYFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgYDtcblxuICBjb25zdCBJbmZvID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuICAgIG1hcmdpbi10b3A6IDRyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0b0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxNHB4O1xuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDg0JTtcbiAgICBtYXJnaW4tcmlnaHQ6IDZyZW07XG4gICAgbWFyZ2luLXRvcDogMS41cmVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nLWxlZnQ6IDZyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTI5MHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICBwYWRkaW5nLWxlZnQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbiA9IHN0eWxlZC5pbWdgXG4gICAgYm9yZGVyLXJhZGl1czogMTVweCAxNXB4IDE1cHggMTVweDtcbiAgICB3aWR0aDogOTQlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogNzQlO1xuICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA3NSU7XG4gICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xuICAgICAgd2lkdGg6IDg1JTtcbiAgICAgIG1hcmdpbi10b3A6IDJyZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEJvdG9uRGVzY2FyZ2EgPSBzdHlsZWQuYWBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogIzBkNzNhNyAhaW1wb3J0YW50O1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgPEZvbmRvPlxuICAgICAgICAgIDxUaXR1bG9EaXYgY2xhc3NOYW1lPVwicHQtM1wiPlxuICAgICAgICAgICAgPFRpdHVsbz5QZXJmaWwgQ29ycG9yYXRpdm88L1RpdHVsbz5cbiAgICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPk9CSkVUSVZPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICBTZXIgbGEgZW1wcmVzYSBkZSBoYXJkd2FyZSBlbiBsYSBpbmR1c3RyaWEgZGUgc29sdWNpb25lcyBlblxuICAgICAgICAgICAgICAgICAgaGFuZGhlbGQgZSBpbXByZXNvcmFzIHBvcnTDoXRpbGVzIHkgZGUgZXRpcXVldGFzLCBwcmVkaWxlY3RhIGVuXG4gICAgICAgICAgICAgICAgICBlbCBtZXJjYWRvIG1leGljYW5vLiBQYXJhIGxvZ3JhciBlc3RhIGNvbmRpY2nDs24sIGNyZWNlcmVtb3MgYVxuICAgICAgICAgICAgICAgICAgdHJhdsOpcyBkZWwgY3VtcGxpbWllbnRvIGRlIGxvcyBvYmpldGl2b3MgZGUgbnVlc3Ryb3MgY2xpZW50ZXMsXG4gICAgICAgICAgICAgICAgICBjb24gdW5hIGNvbXByb21ldGlkYSBhY3RpdHVkIGRlIHNlcnZpY2lvIHkgYWRhcHTDoW5kb25vcyBhIGxhc1xuICAgICAgICAgICAgICAgICAgbmVjZXNpZGFkZXMgcXVlIGVsIHNlY3RvciBpbmR1c3RyaWFsIGhhIHZlbmlkbyBkZXNhcnJvbGxhbmRvLlxuICAgICAgICAgICAgICAgICAgTnVlc3Ryb3MgZGlmZXJlbmNpYWRvcmVzIGVzdGFyw6FuIGVuIGVsIHNlcnZpY2lvIHkgYXRlbmNpw7NuIGFsXG4gICAgICAgICAgICAgICAgICBjbGllbnRlLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+TUlTScOTTjwvVGV4dGk+XG4gICAgICAgICAgICAgIDwvVGV4VGlEaXY+XG4gICAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgICA8VGV4dG8+XG4gICAgICAgICAgICAgICAgICBTb21vcyBsYSBlbXByZXNhIG1leGljYW5hIGRlZGljYWRhIGEgYnJpbmRhciBzb2x1Y2lvbmVzXG4gICAgICAgICAgICAgICAgICBpbm5vdmFkb3JhcyBlbiBuZWNlc2lkYWRlcyBkZSBoYW5kaGVsZHMgZSBpbXByZXNvcmFzXG4gICAgICAgICAgICAgICAgICBwb3J0w6F0aWxlcywgY29udGFuZG8gY29uIHBlcnNvbmFsIGFwYXNpb25hZG8geSBhbGluZWFkbyBhXG4gICAgICAgICAgICAgICAgICBlcXVpbGlicmlvIGxhYm9yYWwuXG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleFRpRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0aT5WSVNJw5NOPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIFNlciBsYSBlbXByZXNhIGVuIGxhIGluZHVzdHJpYSBkZSBzb2x1Y2lvbmVzIGVuIGhhbmRlbGRzIGVcbiAgICAgICAgICAgICAgICAgIGltcHJlc29yYXMgcG9ydMOhdGlsZXMgcHJlZGlsZWN0YS5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlZBTE9SRVM8L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgUmVzcG9uc2FiaWxpZGFkLCBDb21wcm9taXNvLCBDb25ncnVlbmNpYSwgRW1wYXTDrWEgeVxuICAgICAgICAgICAgICAgICAgRmxleGliaWxpZGFkLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm90b1wiPlxuICAgICAgICAgICAgICAgIDxCb3RvbkRlc2NhcmdhXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tbGlnaHQgbXQtMiBtYi0zXCJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzEzelF6TG1PMzN6a0dDV3pyeTN0VXVmZDR2anhQdzlDOC92aWV3P3VzcD1zaGFyaW5nXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICDCoURlc2Nhcmd1ZSBudWVzdHJvcyBzZXJ2aWNpb3MhXG4gICAgICAgICAgICAgICAgPC9Cb3RvbkRlc2NhcmdhPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvSW5mbz5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0hhbmQgSGVsZCBTb2x1dGlvbnMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIFNvbHV0aW9uc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICA8L0NvbnRlbmVkb3I+XG4gICAgICAgIDwvRm9uZG8+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQZXJmaWw7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const ImagenDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e15szz2v2",
    label: "ImagenDiv"
  })(false ? undefined : {
    name: "1ve19u4",
    styles: "width:84%;margin-right:6rem;margin-top:1.5rem;display:flex;justify-content:center;align-items:center;padding-left:6rem;@media (max-width: 1290px){margin-right:0rem;width:100%;margin:0px auto;padding-left:2rem;}@media (max-width: 900px){margin-right:0rem;padding-left:0rem;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0RThCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBQZXJmaWwgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5wYFxuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDMzcHg7XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctYm90dG9tOiAyNnB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXhUaURpdiA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiA4MCU7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0aSA9IHN0eWxlZC5wYFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgYDtcblxuICBjb25zdCBJbmZvID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuICAgIG1hcmdpbi10b3A6IDRyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0b0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxNHB4O1xuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDg0JTtcbiAgICBtYXJnaW4tcmlnaHQ6IDZyZW07XG4gICAgbWFyZ2luLXRvcDogMS41cmVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nLWxlZnQ6IDZyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTI5MHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICBwYWRkaW5nLWxlZnQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbiA9IHN0eWxlZC5pbWdgXG4gICAgYm9yZGVyLXJhZGl1czogMTVweCAxNXB4IDE1cHggMTVweDtcbiAgICB3aWR0aDogOTQlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogNzQlO1xuICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA3NSU7XG4gICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xuICAgICAgd2lkdGg6IDg1JTtcbiAgICAgIG1hcmdpbi10b3A6IDJyZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEJvdG9uRGVzY2FyZ2EgPSBzdHlsZWQuYWBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogIzBkNzNhNyAhaW1wb3J0YW50O1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgPEZvbmRvPlxuICAgICAgICAgIDxUaXR1bG9EaXYgY2xhc3NOYW1lPVwicHQtM1wiPlxuICAgICAgICAgICAgPFRpdHVsbz5QZXJmaWwgQ29ycG9yYXRpdm88L1RpdHVsbz5cbiAgICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPk9CSkVUSVZPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICBTZXIgbGEgZW1wcmVzYSBkZSBoYXJkd2FyZSBlbiBsYSBpbmR1c3RyaWEgZGUgc29sdWNpb25lcyBlblxuICAgICAgICAgICAgICAgICAgaGFuZGhlbGQgZSBpbXByZXNvcmFzIHBvcnTDoXRpbGVzIHkgZGUgZXRpcXVldGFzLCBwcmVkaWxlY3RhIGVuXG4gICAgICAgICAgICAgICAgICBlbCBtZXJjYWRvIG1leGljYW5vLiBQYXJhIGxvZ3JhciBlc3RhIGNvbmRpY2nDs24sIGNyZWNlcmVtb3MgYVxuICAgICAgICAgICAgICAgICAgdHJhdsOpcyBkZWwgY3VtcGxpbWllbnRvIGRlIGxvcyBvYmpldGl2b3MgZGUgbnVlc3Ryb3MgY2xpZW50ZXMsXG4gICAgICAgICAgICAgICAgICBjb24gdW5hIGNvbXByb21ldGlkYSBhY3RpdHVkIGRlIHNlcnZpY2lvIHkgYWRhcHTDoW5kb25vcyBhIGxhc1xuICAgICAgICAgICAgICAgICAgbmVjZXNpZGFkZXMgcXVlIGVsIHNlY3RvciBpbmR1c3RyaWFsIGhhIHZlbmlkbyBkZXNhcnJvbGxhbmRvLlxuICAgICAgICAgICAgICAgICAgTnVlc3Ryb3MgZGlmZXJlbmNpYWRvcmVzIGVzdGFyw6FuIGVuIGVsIHNlcnZpY2lvIHkgYXRlbmNpw7NuIGFsXG4gICAgICAgICAgICAgICAgICBjbGllbnRlLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+TUlTScOTTjwvVGV4dGk+XG4gICAgICAgICAgICAgIDwvVGV4VGlEaXY+XG4gICAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgICA8VGV4dG8+XG4gICAgICAgICAgICAgICAgICBTb21vcyBsYSBlbXByZXNhIG1leGljYW5hIGRlZGljYWRhIGEgYnJpbmRhciBzb2x1Y2lvbmVzXG4gICAgICAgICAgICAgICAgICBpbm5vdmFkb3JhcyBlbiBuZWNlc2lkYWRlcyBkZSBoYW5kaGVsZHMgZSBpbXByZXNvcmFzXG4gICAgICAgICAgICAgICAgICBwb3J0w6F0aWxlcywgY29udGFuZG8gY29uIHBlcnNvbmFsIGFwYXNpb25hZG8geSBhbGluZWFkbyBhXG4gICAgICAgICAgICAgICAgICBlcXVpbGlicmlvIGxhYm9yYWwuXG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleFRpRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0aT5WSVNJw5NOPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIFNlciBsYSBlbXByZXNhIGVuIGxhIGluZHVzdHJpYSBkZSBzb2x1Y2lvbmVzIGVuIGhhbmRlbGRzIGVcbiAgICAgICAgICAgICAgICAgIGltcHJlc29yYXMgcG9ydMOhdGlsZXMgcHJlZGlsZWN0YS5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlZBTE9SRVM8L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgUmVzcG9uc2FiaWxpZGFkLCBDb21wcm9taXNvLCBDb25ncnVlbmNpYSwgRW1wYXTDrWEgeVxuICAgICAgICAgICAgICAgICAgRmxleGliaWxpZGFkLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm90b1wiPlxuICAgICAgICAgICAgICAgIDxCb3RvbkRlc2NhcmdhXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tbGlnaHQgbXQtMiBtYi0zXCJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzEzelF6TG1PMzN6a0dDV3pyeTN0VXVmZDR2anhQdzlDOC92aWV3P3VzcD1zaGFyaW5nXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICDCoURlc2Nhcmd1ZSBudWVzdHJvcyBzZXJ2aWNpb3MhXG4gICAgICAgICAgICAgICAgPC9Cb3RvbkRlc2NhcmdhPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvSW5mbz5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0hhbmQgSGVsZCBTb2x1dGlvbnMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIFNvbHV0aW9uc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICA8L0NvbnRlbmVkb3I+XG4gICAgICAgIDwvRm9uZG8+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQZXJmaWw7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Imagen = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "e15szz2v1",
    label: "Imagen"
  })(false ? undefined : {
    name: "16w3lb1",
    styles: "border-radius:15px 15px 15px 15px;width:94%;@media (max-width: 900px){width:74%;margin-top:2rem;}@media (max-width: 600px){width:75%;margin-top:2rem;}@media (max-width: 450px){width:85%;margin-top:2rem;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrRzJCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBQZXJmaWwgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5wYFxuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDMzcHg7XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctYm90dG9tOiAyNnB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXhUaURpdiA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiA4MCU7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0aSA9IHN0eWxlZC5wYFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgYDtcblxuICBjb25zdCBJbmZvID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuICAgIG1hcmdpbi10b3A6IDRyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0b0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxNHB4O1xuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDg0JTtcbiAgICBtYXJnaW4tcmlnaHQ6IDZyZW07XG4gICAgbWFyZ2luLXRvcDogMS41cmVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nLWxlZnQ6IDZyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTI5MHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICBwYWRkaW5nLWxlZnQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbiA9IHN0eWxlZC5pbWdgXG4gICAgYm9yZGVyLXJhZGl1czogMTVweCAxNXB4IDE1cHggMTVweDtcbiAgICB3aWR0aDogOTQlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogNzQlO1xuICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA3NSU7XG4gICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xuICAgICAgd2lkdGg6IDg1JTtcbiAgICAgIG1hcmdpbi10b3A6IDJyZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEJvdG9uRGVzY2FyZ2EgPSBzdHlsZWQuYWBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogIzBkNzNhNyAhaW1wb3J0YW50O1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgPEZvbmRvPlxuICAgICAgICAgIDxUaXR1bG9EaXYgY2xhc3NOYW1lPVwicHQtM1wiPlxuICAgICAgICAgICAgPFRpdHVsbz5QZXJmaWwgQ29ycG9yYXRpdm88L1RpdHVsbz5cbiAgICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPk9CSkVUSVZPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICBTZXIgbGEgZW1wcmVzYSBkZSBoYXJkd2FyZSBlbiBsYSBpbmR1c3RyaWEgZGUgc29sdWNpb25lcyBlblxuICAgICAgICAgICAgICAgICAgaGFuZGhlbGQgZSBpbXByZXNvcmFzIHBvcnTDoXRpbGVzIHkgZGUgZXRpcXVldGFzLCBwcmVkaWxlY3RhIGVuXG4gICAgICAgICAgICAgICAgICBlbCBtZXJjYWRvIG1leGljYW5vLiBQYXJhIGxvZ3JhciBlc3RhIGNvbmRpY2nDs24sIGNyZWNlcmVtb3MgYVxuICAgICAgICAgICAgICAgICAgdHJhdsOpcyBkZWwgY3VtcGxpbWllbnRvIGRlIGxvcyBvYmpldGl2b3MgZGUgbnVlc3Ryb3MgY2xpZW50ZXMsXG4gICAgICAgICAgICAgICAgICBjb24gdW5hIGNvbXByb21ldGlkYSBhY3RpdHVkIGRlIHNlcnZpY2lvIHkgYWRhcHTDoW5kb25vcyBhIGxhc1xuICAgICAgICAgICAgICAgICAgbmVjZXNpZGFkZXMgcXVlIGVsIHNlY3RvciBpbmR1c3RyaWFsIGhhIHZlbmlkbyBkZXNhcnJvbGxhbmRvLlxuICAgICAgICAgICAgICAgICAgTnVlc3Ryb3MgZGlmZXJlbmNpYWRvcmVzIGVzdGFyw6FuIGVuIGVsIHNlcnZpY2lvIHkgYXRlbmNpw7NuIGFsXG4gICAgICAgICAgICAgICAgICBjbGllbnRlLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+TUlTScOTTjwvVGV4dGk+XG4gICAgICAgICAgICAgIDwvVGV4VGlEaXY+XG4gICAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgICA8VGV4dG8+XG4gICAgICAgICAgICAgICAgICBTb21vcyBsYSBlbXByZXNhIG1leGljYW5hIGRlZGljYWRhIGEgYnJpbmRhciBzb2x1Y2lvbmVzXG4gICAgICAgICAgICAgICAgICBpbm5vdmFkb3JhcyBlbiBuZWNlc2lkYWRlcyBkZSBoYW5kaGVsZHMgZSBpbXByZXNvcmFzXG4gICAgICAgICAgICAgICAgICBwb3J0w6F0aWxlcywgY29udGFuZG8gY29uIHBlcnNvbmFsIGFwYXNpb25hZG8geSBhbGluZWFkbyBhXG4gICAgICAgICAgICAgICAgICBlcXVpbGlicmlvIGxhYm9yYWwuXG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleFRpRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0aT5WSVNJw5NOPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIFNlciBsYSBlbXByZXNhIGVuIGxhIGluZHVzdHJpYSBkZSBzb2x1Y2lvbmVzIGVuIGhhbmRlbGRzIGVcbiAgICAgICAgICAgICAgICAgIGltcHJlc29yYXMgcG9ydMOhdGlsZXMgcHJlZGlsZWN0YS5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlZBTE9SRVM8L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgUmVzcG9uc2FiaWxpZGFkLCBDb21wcm9taXNvLCBDb25ncnVlbmNpYSwgRW1wYXTDrWEgeVxuICAgICAgICAgICAgICAgICAgRmxleGliaWxpZGFkLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm90b1wiPlxuICAgICAgICAgICAgICAgIDxCb3RvbkRlc2NhcmdhXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tbGlnaHQgbXQtMiBtYi0zXCJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzEzelF6TG1PMzN6a0dDV3pyeTN0VXVmZDR2anhQdzlDOC92aWV3P3VzcD1zaGFyaW5nXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICDCoURlc2Nhcmd1ZSBudWVzdHJvcyBzZXJ2aWNpb3MhXG4gICAgICAgICAgICAgICAgPC9Cb3RvbkRlc2NhcmdhPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvSW5mbz5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0hhbmQgSGVsZCBTb2x1dGlvbnMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIFNvbHV0aW9uc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICA8L0NvbnRlbmVkb3I+XG4gICAgICAgIDwvRm9uZG8+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQZXJmaWw7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const BotonDescarga = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("a", false ? undefined : {
    target: "e15szz2v0",
    label: "BotonDescarga"
  })(false ? undefined : {
    name: "1bjfj69",
    styles: "display:flex;text-decoration:none;color:#0d73a7!important;margin:auto;align-items:center",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzSGdDIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFBlcmZpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBQZXJmaWwgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5wYFxuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDMzcHg7XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctYm90dG9tOiAyNnB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBkaXNwbGF5OiBncmlkO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXhUaURpdiA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIHdpZHRoOiA4MCU7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0aSA9IHN0eWxlZC5wYFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgYDtcblxuICBjb25zdCBJbmZvID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuICAgIG1hcmdpbi10b3A6IDRyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0b0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5MDBweCkge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxNHB4O1xuICBgO1xuXG4gIGNvbnN0IEltYWdlbkRpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDg0JTtcbiAgICBtYXJnaW4tcmlnaHQ6IDZyZW07XG4gICAgbWFyZ2luLXRvcDogMS41cmVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nLWxlZnQ6IDZyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTI5MHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgICBwYWRkaW5nLWxlZnQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEltYWdlbiA9IHN0eWxlZC5pbWdgXG4gICAgYm9yZGVyLXJhZGl1czogMTVweCAxNXB4IDE1cHggMTVweDtcbiAgICB3aWR0aDogOTQlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICB3aWR0aDogNzQlO1xuICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIHdpZHRoOiA3NSU7XG4gICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xuICAgICAgd2lkdGg6IDg1JTtcbiAgICAgIG1hcmdpbi10b3A6IDJyZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEJvdG9uRGVzY2FyZ2EgPSBzdHlsZWQuYWBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogIzBkNzNhNyAhaW1wb3J0YW50O1xuICAgIG1hcmdpbjogYXV0bztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgPEZvbmRvPlxuICAgICAgICAgIDxUaXR1bG9EaXYgY2xhc3NOYW1lPVwicHQtM1wiPlxuICAgICAgICAgICAgPFRpdHVsbz5QZXJmaWwgQ29ycG9yYXRpdm88L1RpdHVsbz5cbiAgICAgICAgICA8L1RpdHVsb0Rpdj5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPk9CSkVUSVZPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICBTZXIgbGEgZW1wcmVzYSBkZSBoYXJkd2FyZSBlbiBsYSBpbmR1c3RyaWEgZGUgc29sdWNpb25lcyBlblxuICAgICAgICAgICAgICAgICAgaGFuZGhlbGQgZSBpbXByZXNvcmFzIHBvcnTDoXRpbGVzIHkgZGUgZXRpcXVldGFzLCBwcmVkaWxlY3RhIGVuXG4gICAgICAgICAgICAgICAgICBlbCBtZXJjYWRvIG1leGljYW5vLiBQYXJhIGxvZ3JhciBlc3RhIGNvbmRpY2nDs24sIGNyZWNlcmVtb3MgYVxuICAgICAgICAgICAgICAgICAgdHJhdsOpcyBkZWwgY3VtcGxpbWllbnRvIGRlIGxvcyBvYmpldGl2b3MgZGUgbnVlc3Ryb3MgY2xpZW50ZXMsXG4gICAgICAgICAgICAgICAgICBjb24gdW5hIGNvbXByb21ldGlkYSBhY3RpdHVkIGRlIHNlcnZpY2lvIHkgYWRhcHTDoW5kb25vcyBhIGxhc1xuICAgICAgICAgICAgICAgICAgbmVjZXNpZGFkZXMgcXVlIGVsIHNlY3RvciBpbmR1c3RyaWFsIGhhIHZlbmlkbyBkZXNhcnJvbGxhbmRvLlxuICAgICAgICAgICAgICAgICAgTnVlc3Ryb3MgZGlmZXJlbmNpYWRvcmVzIGVzdGFyw6FuIGVuIGVsIHNlcnZpY2lvIHkgYXRlbmNpw7NuIGFsXG4gICAgICAgICAgICAgICAgICBjbGllbnRlLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+TUlTScOTTjwvVGV4dGk+XG4gICAgICAgICAgICAgIDwvVGV4VGlEaXY+XG4gICAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgICA8VGV4dG8+XG4gICAgICAgICAgICAgICAgICBTb21vcyBsYSBlbXByZXNhIG1leGljYW5hIGRlZGljYWRhIGEgYnJpbmRhciBzb2x1Y2lvbmVzXG4gICAgICAgICAgICAgICAgICBpbm5vdmFkb3JhcyBlbiBuZWNlc2lkYWRlcyBkZSBoYW5kaGVsZHMgZSBpbXByZXNvcmFzXG4gICAgICAgICAgICAgICAgICBwb3J0w6F0aWxlcywgY29udGFuZG8gY29uIHBlcnNvbmFsIGFwYXNpb25hZG8geSBhbGluZWFkbyBhXG4gICAgICAgICAgICAgICAgICBlcXVpbGlicmlvIGxhYm9yYWwuXG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleFRpRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0aT5WSVNJw5NOPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIFNlciBsYSBlbXByZXNhIGVuIGxhIGluZHVzdHJpYSBkZSBzb2x1Y2lvbmVzIGVuIGhhbmRlbGRzIGVcbiAgICAgICAgICAgICAgICAgIGltcHJlc29yYXMgcG9ydMOhdGlsZXMgcHJlZGlsZWN0YS5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlZBTE9SRVM8L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgUmVzcG9uc2FiaWxpZGFkLCBDb21wcm9taXNvLCBDb25ncnVlbmNpYSwgRW1wYXTDrWEgeVxuICAgICAgICAgICAgICAgICAgRmxleGliaWxpZGFkLlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm90b1wiPlxuICAgICAgICAgICAgICAgIDxCb3RvbkRlc2NhcmdhXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tbGlnaHQgbXQtMiBtYi0zXCJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzEzelF6TG1PMzN6a0dDV3pyeTN0VXVmZDR2anhQdzlDOC92aWV3P3VzcD1zaGFyaW5nXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICDCoURlc2Nhcmd1ZSBudWVzdHJvcyBzZXJ2aWNpb3MhXG4gICAgICAgICAgICAgICAgPC9Cb3RvbkRlc2NhcmdhPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvSW5mbz5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0hhbmQgSGVsZCBTb2x1dGlvbnMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIFNvbHV0aW9uc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICA8L0NvbnRlbmVkb3I+XG4gICAgICAgIDwvRm9uZG8+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQZXJmaWw7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("section", {
    className: "mt-5",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 129,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Fondo, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 130,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TituloDiv, {
    className: "pt-3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 131,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Titulo, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 132,
      columnNumber: 13
    }
  }, "Perfil Corporativo")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Contenedor, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 134,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Info, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 135,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TexTiDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 136,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texti, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 137,
      columnNumber: 17
    }
  }, "OBJETIVO")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TextoDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 139,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texto, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 140,
      columnNumber: 17
    }
  }, "Ser la empresa de hardware en la industria de soluciones en handheld e impresoras port\xE1tiles y de etiquetas, predilecta en el mercado mexicano. Para lograr esta condici\xF3n, creceremos a trav\xE9s del cumplimiento de los objetivos de nuestros clientes, con una comprometida actitud de servicio y adapt\xE1ndonos a las necesidades que el sector industrial ha venido desarrollando. Nuestros diferenciadores estar\xE1n en el servicio y atenci\xF3n al cliente.")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TexTiDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 151,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texti, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 152,
      columnNumber: 17
    }
  }, "MISI\xD3N")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TextoDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 154,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texto, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 155,
      columnNumber: 17
    }
  }, "Somos la empresa mexicana dedicada a brindar soluciones innovadoras en necesidades de handhelds e impresoras port\xE1tiles, contando con personal apasionado y alineado a equilibrio laboral.")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TexTiDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 162,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texti, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 163,
      columnNumber: 17
    }
  }, "VISI\xD3N")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TextoDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 165,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texto, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 166,
      columnNumber: 17
    }
  }, "Ser la empresa en la industria de soluciones en handelds e impresoras port\xE1tiles predilecta.")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TexTiDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 171,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texti, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 172,
      columnNumber: 17
    }
  }, "VALORES")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TextoDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 174,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texto, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 175,
      columnNumber: 17
    }
  }, "Responsabilidad, Compromiso, Congruencia, Empat\xEDa y Flexibilidad.")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("div", {
    className: "boto",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 180,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(BotonDescarga, {
    type: "button",
    className: "btn btn-light mt-2 mb-3",
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://drive.google.com/file/d/13zQzLmO33zkGCWzry3tUufd4vjxPw9C8/view?usp=sharing",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 181,
      columnNumber: 17
    }
  }, "\xA1Descargue nuestros servicios!"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(ImagenDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 192,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Imagen, {
    src: "/img/Hand Held Solutions.webp",
    alt: "Hand Held Solutions",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 193,
      columnNumber: 15
    }
  }))))));
};

/* harmony default export */ __webpack_exports__["default"] = (Perfil);

/***/ }),

/***/ "./components/layout/RentaEquipo.js":
/*!******************************************!*\
  !*** ./components/layout/RentaEquipo.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_2__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\RentaEquipo.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }




const Renta = () => {
  const Fondo = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1java9w7",
    label: "Fondo"
  })(false ? undefined : {
    name: "19wi2je",
    styles: "background-color:#0076c0;width:100%",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUkwQiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxSZW50YUVxdWlwby5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBSZW50YSA9ICgpID0+IHtcbiAgY29uc3QgRm9uZG8gPSBzdHlsZWQuZGl2YFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICB3aWR0aDogMThyZW07XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvVGV4dG8gPSBzdHlsZWQucGBcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAzM3B4O1xuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjZweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTFweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJbWFnZW5EaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogNDQlO1xuICAgIG1hcmdpbi1sZWZ0OiA1LjNyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBtaW4td2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBib3gtc2hhZG93OiAwcHggMHB4IDVweCBibGFjaztcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTFweCkge1xuICAgICAgd2lkdGg6IDUzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDg1MHB4KSB7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgIG1heC13aWR0aDogNDIlO1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgbWFyZ2luLXJpZ2h0OiA3cmVtO1xuICAgIG1hcmdpbi1sZWZ0OiAycmVtO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBtaW4td2lkdGg6IDUyJTtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwcHg7XG4gICAgICBtaW4td2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgY29sb3I6IHdoaXRlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEyOTBweCkge1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTcwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgIHdpZHRoOiA2MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8c2VjdGlvbiBpZD1cInJlbnRhXCI+XG4gICAgICAgIDxGb25kbyBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPFRpdHVsbz5cbiAgICAgICAgICAgIDxUaXR1bG9UZXh0bz5SZW50YSBkZSBFcXVpcG88L1RpdHVsb1RleHRvPlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICAgIDxDb250ZW5lZG9yPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvc3JlbnRhLndlYnBcIlxuICAgICAgICAgICAgICAgIGFsdD1cIlJlbnRhIGRlIEhhbmQgSGVsZCBJbXByZXNvcmFzIGRlIEV0aXF1ZXRhcyB5IExlY3RvcmVzIGRlIGNvZGlnbyBkZSBiYXJyYXNcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9JbWFnZW5EaXY+XG4gICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXh0byBjbGFzc05hbWU9XCJ0ZXh0LWp1c3RpZnlcIj5cbiAgICAgICAgICAgICAgICBSZW50YW1vcyBoYW5kaGVsZHMsIGltcHJlc29yYXMgZGUgZXRpcXVldGFzLCBsZWN0b3JlcyBkZSBjw7NkaWdvcyBlIGltcHJlc29yYXMgZGUgY3JlZGVuY2lhbGVzIHBvciBwZXJpb2RvcyBjb3J0b3MgeSBsYXJnb3MuIERlc2RlIHVuIGTDrWEsIHNlbWFuYSwgbWVzXG4gICAgICAgICAgICAgICAgeSBoYXN0YSBhw7Fvcy4gUmVudGFyIGVxdWlwbyBsZSBwZXJtaXRpcsOhIGRpc3BvbmVybG9zIGRlIHVuIGTDrWFcbiAgICAgICAgICAgICAgICBwYXJhIG90cm8sIHNpbiBkZXDDs3NpdG9zLCBuaSB0csOhbWl0ZXMgdGFyZGFkb3MuIEluY2x1eWVuIHRvZG9zXG4gICAgICAgICAgICAgICAgbG9zIGFjY2Vzb3Jpb3MgcXVlIHNlIHJlcXVpZXJlbiB5IGN1ZW50YW4gY29uIHDDs2xpemEgZGVcbiAgICAgICAgICAgICAgICByZXBhcmFjacOzbiBwZXJtYW5lbnRlLiBTaSB1biBlcXVpcG8gZmFsbGEsIHNlIHJlcGFyYVxuICAgICAgICAgICAgICAgIGRpcmVjdGFtZW50ZSB5IGRlIGlubWVkaWF0bywgc2luIGNvc3RvcyBhZGljaW9uYWxlcyxcbiAgICAgICAgICAgICAgICBkaWFnbsOzc3RpY29zIHByZXZpb3MgbyBjb3RpemFjaW9uZXMgY29zdG9zYXMuXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgU2kgbGUgc2lndWUgc2llbmRvIGZ1bmNpb25hbCwgYnJpbmRhbW9zIGxhIG9wY2nDs24gZGUgcXVlIGVsXG4gICAgICAgICAgICAgICAgZXF1aXBvIHBhc2UgYSBzZXIgZGUgc3UgcHJvcGllZGFkIHBvciBtZWRpbyBkZSBsZWFzaW5nIG9cbiAgICAgICAgICAgICAgICBhcnJlbmRhbWllbnRvIHB1cm8sIHNpZW5kbyAxMDAlIGRlZHVjaWJsZSBkZSBpbXB1ZXN0b3MgeVxuICAgICAgICAgICAgICAgIGV2aXRhbmRvIGRlc2NhcGl0YWxpemFyc2UuIExvcyBhcnJlbmRhbWllbnRvcyBhIGxhcmdvIHBsYXpvXG4gICAgICAgICAgICAgICAgcGVybWl0ZW4gY2FtYmlhciBsb3MgZXF1aXBvcyBzaSBmdWVyYSBuZWNlc2FyaW8uIMKhRXMgbGEgc29sdWNpw7NuXG4gICAgICAgICAgICAgICAgcXVlIGxhIGluZHVzdHJpYSBtZXhpY2FuYSByZXF1aWVyZSFcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8L0ZvbmRvPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVudGE7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Titulo = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1java9w6",
    label: "Titulo"
  })(false ? undefined : {
    name: "7gsvjs",
    styles: "text-align:center;margin:0px auto;padding-top:10px;width:18rem",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVMyQiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxSZW50YUVxdWlwby5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBSZW50YSA9ICgpID0+IHtcbiAgY29uc3QgRm9uZG8gPSBzdHlsZWQuZGl2YFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICB3aWR0aDogMThyZW07XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvVGV4dG8gPSBzdHlsZWQucGBcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAzM3B4O1xuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjZweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTFweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJbWFnZW5EaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogNDQlO1xuICAgIG1hcmdpbi1sZWZ0OiA1LjNyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBtaW4td2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBib3gtc2hhZG93OiAwcHggMHB4IDVweCBibGFjaztcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTFweCkge1xuICAgICAgd2lkdGg6IDUzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDg1MHB4KSB7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgIG1heC13aWR0aDogNDIlO1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgbWFyZ2luLXJpZ2h0OiA3cmVtO1xuICAgIG1hcmdpbi1sZWZ0OiAycmVtO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBtaW4td2lkdGg6IDUyJTtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwcHg7XG4gICAgICBtaW4td2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgY29sb3I6IHdoaXRlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEyOTBweCkge1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTcwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgIHdpZHRoOiA2MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8c2VjdGlvbiBpZD1cInJlbnRhXCI+XG4gICAgICAgIDxGb25kbyBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPFRpdHVsbz5cbiAgICAgICAgICAgIDxUaXR1bG9UZXh0bz5SZW50YSBkZSBFcXVpcG88L1RpdHVsb1RleHRvPlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICAgIDxDb250ZW5lZG9yPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvc3JlbnRhLndlYnBcIlxuICAgICAgICAgICAgICAgIGFsdD1cIlJlbnRhIGRlIEhhbmQgSGVsZCBJbXByZXNvcmFzIGRlIEV0aXF1ZXRhcyB5IExlY3RvcmVzIGRlIGNvZGlnbyBkZSBiYXJyYXNcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9JbWFnZW5EaXY+XG4gICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXh0byBjbGFzc05hbWU9XCJ0ZXh0LWp1c3RpZnlcIj5cbiAgICAgICAgICAgICAgICBSZW50YW1vcyBoYW5kaGVsZHMsIGltcHJlc29yYXMgZGUgZXRpcXVldGFzLCBsZWN0b3JlcyBkZSBjw7NkaWdvcyBlIGltcHJlc29yYXMgZGUgY3JlZGVuY2lhbGVzIHBvciBwZXJpb2RvcyBjb3J0b3MgeSBsYXJnb3MuIERlc2RlIHVuIGTDrWEsIHNlbWFuYSwgbWVzXG4gICAgICAgICAgICAgICAgeSBoYXN0YSBhw7Fvcy4gUmVudGFyIGVxdWlwbyBsZSBwZXJtaXRpcsOhIGRpc3BvbmVybG9zIGRlIHVuIGTDrWFcbiAgICAgICAgICAgICAgICBwYXJhIG90cm8sIHNpbiBkZXDDs3NpdG9zLCBuaSB0csOhbWl0ZXMgdGFyZGFkb3MuIEluY2x1eWVuIHRvZG9zXG4gICAgICAgICAgICAgICAgbG9zIGFjY2Vzb3Jpb3MgcXVlIHNlIHJlcXVpZXJlbiB5IGN1ZW50YW4gY29uIHDDs2xpemEgZGVcbiAgICAgICAgICAgICAgICByZXBhcmFjacOzbiBwZXJtYW5lbnRlLiBTaSB1biBlcXVpcG8gZmFsbGEsIHNlIHJlcGFyYVxuICAgICAgICAgICAgICAgIGRpcmVjdGFtZW50ZSB5IGRlIGlubWVkaWF0bywgc2luIGNvc3RvcyBhZGljaW9uYWxlcyxcbiAgICAgICAgICAgICAgICBkaWFnbsOzc3RpY29zIHByZXZpb3MgbyBjb3RpemFjaW9uZXMgY29zdG9zYXMuXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgU2kgbGUgc2lndWUgc2llbmRvIGZ1bmNpb25hbCwgYnJpbmRhbW9zIGxhIG9wY2nDs24gZGUgcXVlIGVsXG4gICAgICAgICAgICAgICAgZXF1aXBvIHBhc2UgYSBzZXIgZGUgc3UgcHJvcGllZGFkIHBvciBtZWRpbyBkZSBsZWFzaW5nIG9cbiAgICAgICAgICAgICAgICBhcnJlbmRhbWllbnRvIHB1cm8sIHNpZW5kbyAxMDAlIGRlZHVjaWJsZSBkZSBpbXB1ZXN0b3MgeVxuICAgICAgICAgICAgICAgIGV2aXRhbmRvIGRlc2NhcGl0YWxpemFyc2UuIExvcyBhcnJlbmRhbWllbnRvcyBhIGxhcmdvIHBsYXpvXG4gICAgICAgICAgICAgICAgcGVybWl0ZW4gY2FtYmlhciBsb3MgZXF1aXBvcyBzaSBmdWVyYSBuZWNlc2FyaW8uIMKhRXMgbGEgc29sdWNpw7NuXG4gICAgICAgICAgICAgICAgcXVlIGxhIGluZHVzdHJpYSBtZXhpY2FuYSByZXF1aWVyZSFcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8L0ZvbmRvPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVudGE7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const TituloTexto = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "e1java9w5",
    label: "TituloTexto"
  })(false ? undefined : {
    name: "1jdehpd",
    styles: "color:white;font-weight:bold;font-size:33px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdCOEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcUmVudGFFcXVpcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgUmVudGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDE4cmVtO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMzNweDtcbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDI2cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDQ0JTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIHdpZHRoOiA1MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4NTBweCkge1xuICAgICAgd2lkdGg6IDYzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICBtYXgtd2lkdGg6IDQyJTtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIG1hcmdpbi1yaWdodDogN3JlbTtcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiA1MiU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjkwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZW50YVwiPlxuICAgICAgICA8Rm9uZG8gY2xhc3NOYW1lPVwibXQtNVwiPlxuICAgICAgICAgIDxUaXR1bG8+XG4gICAgICAgICAgICA8VGl0dWxvVGV4dG8+UmVudGEgZGUgRXF1aXBvPC9UaXR1bG9UZXh0bz5cbiAgICAgICAgICA8L1RpdHVsbz5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL3NyZW50YS53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJSZW50YSBkZSBIYW5kIEhlbGQgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4dG8gY2xhc3NOYW1lPVwidGV4dC1qdXN0aWZ5XCI+XG4gICAgICAgICAgICAgICAgUmVudGFtb3MgaGFuZGhlbGRzLCBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgbGVjdG9yZXMgZGUgY8OzZGlnb3MgZSBpbXByZXNvcmFzIGRlIGNyZWRlbmNpYWxlcyBwb3IgcGVyaW9kb3MgY29ydG9zIHkgbGFyZ29zLiBEZXNkZSB1biBkw61hLCBzZW1hbmEsIG1lc1xuICAgICAgICAgICAgICAgIHkgaGFzdGEgYcOxb3MuIFJlbnRhciBlcXVpcG8gbGUgcGVybWl0aXLDoSBkaXNwb25lcmxvcyBkZSB1biBkw61hXG4gICAgICAgICAgICAgICAgcGFyYSBvdHJvLCBzaW4gZGVww7NzaXRvcywgbmkgdHLDoW1pdGVzIHRhcmRhZG9zLiBJbmNsdXllbiB0b2Rvc1xuICAgICAgICAgICAgICAgIGxvcyBhY2Nlc29yaW9zIHF1ZSBzZSByZXF1aWVyZW4geSBjdWVudGFuIGNvbiBww7NsaXphIGRlXG4gICAgICAgICAgICAgICAgcmVwYXJhY2nDs24gcGVybWFuZW50ZS4gU2kgdW4gZXF1aXBvIGZhbGxhLCBzZSByZXBhcmFcbiAgICAgICAgICAgICAgICBkaXJlY3RhbWVudGUgeSBkZSBpbm1lZGlhdG8sIHNpbiBjb3N0b3MgYWRpY2lvbmFsZXMsXG4gICAgICAgICAgICAgICAgZGlhZ27Ds3N0aWNvcyBwcmV2aW9zIG8gY290aXphY2lvbmVzIGNvc3Rvc2FzLlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIFNpIGxlIHNpZ3VlIHNpZW5kbyBmdW5jaW9uYWwsIGJyaW5kYW1vcyBsYSBvcGNpw7NuIGRlIHF1ZSBlbFxuICAgICAgICAgICAgICAgIGVxdWlwbyBwYXNlIGEgc2VyIGRlIHN1IHByb3BpZWRhZCBwb3IgbWVkaW8gZGUgbGVhc2luZyBvXG4gICAgICAgICAgICAgICAgYXJyZW5kYW1pZW50byBwdXJvLCBzaWVuZG8gMTAwJSBkZWR1Y2libGUgZGUgaW1wdWVzdG9zIHlcbiAgICAgICAgICAgICAgICBldml0YW5kbyBkZXNjYXBpdGFsaXphcnNlLiBMb3MgYXJyZW5kYW1pZW50b3MgYSBsYXJnbyBwbGF6b1xuICAgICAgICAgICAgICAgIHBlcm1pdGVuIGNhbWJpYXIgbG9zIGVxdWlwb3Mgc2kgZnVlcmEgbmVjZXNhcmlvLiDCoUVzIGxhIHNvbHVjacOzblxuICAgICAgICAgICAgICAgIHF1ZSBsYSBpbmR1c3RyaWEgbWV4aWNhbmEgcmVxdWllcmUhXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlbnRhO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Contenedor = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1java9w4",
    label: "Contenedor"
  })(false ? undefined : {
    name: "dj02wn",
    styles: "display:flex;justify-content:space-between;max-width:100%;padding-bottom:26px;@media (max-width: 991px){display:grid;margin-top:10px;margin-bottom:10px;margin-right:0rem;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNCK0IiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcUmVudGFFcXVpcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgUmVudGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDE4cmVtO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMzNweDtcbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDI2cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDQ0JTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIHdpZHRoOiA1MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4NTBweCkge1xuICAgICAgd2lkdGg6IDYzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICBtYXgtd2lkdGg6IDQyJTtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIG1hcmdpbi1yaWdodDogN3JlbTtcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiA1MiU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjkwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZW50YVwiPlxuICAgICAgICA8Rm9uZG8gY2xhc3NOYW1lPVwibXQtNVwiPlxuICAgICAgICAgIDxUaXR1bG8+XG4gICAgICAgICAgICA8VGl0dWxvVGV4dG8+UmVudGEgZGUgRXF1aXBvPC9UaXR1bG9UZXh0bz5cbiAgICAgICAgICA8L1RpdHVsbz5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL3NyZW50YS53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJSZW50YSBkZSBIYW5kIEhlbGQgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4dG8gY2xhc3NOYW1lPVwidGV4dC1qdXN0aWZ5XCI+XG4gICAgICAgICAgICAgICAgUmVudGFtb3MgaGFuZGhlbGRzLCBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgbGVjdG9yZXMgZGUgY8OzZGlnb3MgZSBpbXByZXNvcmFzIGRlIGNyZWRlbmNpYWxlcyBwb3IgcGVyaW9kb3MgY29ydG9zIHkgbGFyZ29zLiBEZXNkZSB1biBkw61hLCBzZW1hbmEsIG1lc1xuICAgICAgICAgICAgICAgIHkgaGFzdGEgYcOxb3MuIFJlbnRhciBlcXVpcG8gbGUgcGVybWl0aXLDoSBkaXNwb25lcmxvcyBkZSB1biBkw61hXG4gICAgICAgICAgICAgICAgcGFyYSBvdHJvLCBzaW4gZGVww7NzaXRvcywgbmkgdHLDoW1pdGVzIHRhcmRhZG9zLiBJbmNsdXllbiB0b2Rvc1xuICAgICAgICAgICAgICAgIGxvcyBhY2Nlc29yaW9zIHF1ZSBzZSByZXF1aWVyZW4geSBjdWVudGFuIGNvbiBww7NsaXphIGRlXG4gICAgICAgICAgICAgICAgcmVwYXJhY2nDs24gcGVybWFuZW50ZS4gU2kgdW4gZXF1aXBvIGZhbGxhLCBzZSByZXBhcmFcbiAgICAgICAgICAgICAgICBkaXJlY3RhbWVudGUgeSBkZSBpbm1lZGlhdG8sIHNpbiBjb3N0b3MgYWRpY2lvbmFsZXMsXG4gICAgICAgICAgICAgICAgZGlhZ27Ds3N0aWNvcyBwcmV2aW9zIG8gY290aXphY2lvbmVzIGNvc3Rvc2FzLlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIFNpIGxlIHNpZ3VlIHNpZW5kbyBmdW5jaW9uYWwsIGJyaW5kYW1vcyBsYSBvcGNpw7NuIGRlIHF1ZSBlbFxuICAgICAgICAgICAgICAgIGVxdWlwbyBwYXNlIGEgc2VyIGRlIHN1IHByb3BpZWRhZCBwb3IgbWVkaW8gZGUgbGVhc2luZyBvXG4gICAgICAgICAgICAgICAgYXJyZW5kYW1pZW50byBwdXJvLCBzaWVuZG8gMTAwJSBkZWR1Y2libGUgZGUgaW1wdWVzdG9zIHlcbiAgICAgICAgICAgICAgICBldml0YW5kbyBkZXNjYXBpdGFsaXphcnNlLiBMb3MgYXJyZW5kYW1pZW50b3MgYSBsYXJnbyBwbGF6b1xuICAgICAgICAgICAgICAgIHBlcm1pdGVuIGNhbWJpYXIgbG9zIGVxdWlwb3Mgc2kgZnVlcmEgbmVjZXNhcmlvLiDCoUVzIGxhIHNvbHVjacOzblxuICAgICAgICAgICAgICAgIHF1ZSBsYSBpbmR1c3RyaWEgbWV4aWNhbmEgcmVxdWllcmUhXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlbnRhO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const ImagenDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1java9w3",
    label: "ImagenDiv"
  })(false ? undefined : {
    name: "1fwd1df",
    styles: "margin-top:10px;margin-bottom:10px;width:44%;margin-left:5.3rem;@media (max-width: 991px){display:flex;min-width:100%;margin-left:0px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9DOEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcUmVudGFFcXVpcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgUmVudGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDE4cmVtO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMzNweDtcbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDI2cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDQ0JTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIHdpZHRoOiA1MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4NTBweCkge1xuICAgICAgd2lkdGg6IDYzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICBtYXgtd2lkdGg6IDQyJTtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIG1hcmdpbi1yaWdodDogN3JlbTtcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiA1MiU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjkwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZW50YVwiPlxuICAgICAgICA8Rm9uZG8gY2xhc3NOYW1lPVwibXQtNVwiPlxuICAgICAgICAgIDxUaXR1bG8+XG4gICAgICAgICAgICA8VGl0dWxvVGV4dG8+UmVudGEgZGUgRXF1aXBvPC9UaXR1bG9UZXh0bz5cbiAgICAgICAgICA8L1RpdHVsbz5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL3NyZW50YS53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJSZW50YSBkZSBIYW5kIEhlbGQgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4dG8gY2xhc3NOYW1lPVwidGV4dC1qdXN0aWZ5XCI+XG4gICAgICAgICAgICAgICAgUmVudGFtb3MgaGFuZGhlbGRzLCBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgbGVjdG9yZXMgZGUgY8OzZGlnb3MgZSBpbXByZXNvcmFzIGRlIGNyZWRlbmNpYWxlcyBwb3IgcGVyaW9kb3MgY29ydG9zIHkgbGFyZ29zLiBEZXNkZSB1biBkw61hLCBzZW1hbmEsIG1lc1xuICAgICAgICAgICAgICAgIHkgaGFzdGEgYcOxb3MuIFJlbnRhciBlcXVpcG8gbGUgcGVybWl0aXLDoSBkaXNwb25lcmxvcyBkZSB1biBkw61hXG4gICAgICAgICAgICAgICAgcGFyYSBvdHJvLCBzaW4gZGVww7NzaXRvcywgbmkgdHLDoW1pdGVzIHRhcmRhZG9zLiBJbmNsdXllbiB0b2Rvc1xuICAgICAgICAgICAgICAgIGxvcyBhY2Nlc29yaW9zIHF1ZSBzZSByZXF1aWVyZW4geSBjdWVudGFuIGNvbiBww7NsaXphIGRlXG4gICAgICAgICAgICAgICAgcmVwYXJhY2nDs24gcGVybWFuZW50ZS4gU2kgdW4gZXF1aXBvIGZhbGxhLCBzZSByZXBhcmFcbiAgICAgICAgICAgICAgICBkaXJlY3RhbWVudGUgeSBkZSBpbm1lZGlhdG8sIHNpbiBjb3N0b3MgYWRpY2lvbmFsZXMsXG4gICAgICAgICAgICAgICAgZGlhZ27Ds3N0aWNvcyBwcmV2aW9zIG8gY290aXphY2lvbmVzIGNvc3Rvc2FzLlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIFNpIGxlIHNpZ3VlIHNpZW5kbyBmdW5jaW9uYWwsIGJyaW5kYW1vcyBsYSBvcGNpw7NuIGRlIHF1ZSBlbFxuICAgICAgICAgICAgICAgIGVxdWlwbyBwYXNlIGEgc2VyIGRlIHN1IHByb3BpZWRhZCBwb3IgbWVkaW8gZGUgbGVhc2luZyBvXG4gICAgICAgICAgICAgICAgYXJyZW5kYW1pZW50byBwdXJvLCBzaWVuZG8gMTAwJSBkZWR1Y2libGUgZGUgaW1wdWVzdG9zIHlcbiAgICAgICAgICAgICAgICBldml0YW5kbyBkZXNjYXBpdGFsaXphcnNlLiBMb3MgYXJyZW5kYW1pZW50b3MgYSBsYXJnbyBwbGF6b1xuICAgICAgICAgICAgICAgIHBlcm1pdGVuIGNhbWJpYXIgbG9zIGVxdWlwb3Mgc2kgZnVlcmEgbmVjZXNhcmlvLiDCoUVzIGxhIHNvbHVjacOzblxuICAgICAgICAgICAgICAgIHF1ZSBsYSBpbmR1c3RyaWEgbWV4aWNhbmEgcmVxdWllcmUhXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlbnRhO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Imagen = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "e1java9w2",
    label: "Imagen"
  })(false ? undefined : {
    name: "xl7jbm",
    styles: "border-radius:5px;box-shadow:0px 0px 5px black;width:100%;@media (max-width: 991px){width:53%;margin:0px auto;}@media (max-width: 850px){width:63%;margin:0px auto;height:100%;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlEMkIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcUmVudGFFcXVpcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgUmVudGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDE4cmVtO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMzNweDtcbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDI2cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDQ0JTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIHdpZHRoOiA1MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4NTBweCkge1xuICAgICAgd2lkdGg6IDYzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICBtYXgtd2lkdGg6IDQyJTtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIG1hcmdpbi1yaWdodDogN3JlbTtcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiA1MiU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjkwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZW50YVwiPlxuICAgICAgICA8Rm9uZG8gY2xhc3NOYW1lPVwibXQtNVwiPlxuICAgICAgICAgIDxUaXR1bG8+XG4gICAgICAgICAgICA8VGl0dWxvVGV4dG8+UmVudGEgZGUgRXF1aXBvPC9UaXR1bG9UZXh0bz5cbiAgICAgICAgICA8L1RpdHVsbz5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL3NyZW50YS53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJSZW50YSBkZSBIYW5kIEhlbGQgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4dG8gY2xhc3NOYW1lPVwidGV4dC1qdXN0aWZ5XCI+XG4gICAgICAgICAgICAgICAgUmVudGFtb3MgaGFuZGhlbGRzLCBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgbGVjdG9yZXMgZGUgY8OzZGlnb3MgZSBpbXByZXNvcmFzIGRlIGNyZWRlbmNpYWxlcyBwb3IgcGVyaW9kb3MgY29ydG9zIHkgbGFyZ29zLiBEZXNkZSB1biBkw61hLCBzZW1hbmEsIG1lc1xuICAgICAgICAgICAgICAgIHkgaGFzdGEgYcOxb3MuIFJlbnRhciBlcXVpcG8gbGUgcGVybWl0aXLDoSBkaXNwb25lcmxvcyBkZSB1biBkw61hXG4gICAgICAgICAgICAgICAgcGFyYSBvdHJvLCBzaW4gZGVww7NzaXRvcywgbmkgdHLDoW1pdGVzIHRhcmRhZG9zLiBJbmNsdXllbiB0b2Rvc1xuICAgICAgICAgICAgICAgIGxvcyBhY2Nlc29yaW9zIHF1ZSBzZSByZXF1aWVyZW4geSBjdWVudGFuIGNvbiBww7NsaXphIGRlXG4gICAgICAgICAgICAgICAgcmVwYXJhY2nDs24gcGVybWFuZW50ZS4gU2kgdW4gZXF1aXBvIGZhbGxhLCBzZSByZXBhcmFcbiAgICAgICAgICAgICAgICBkaXJlY3RhbWVudGUgeSBkZSBpbm1lZGlhdG8sIHNpbiBjb3N0b3MgYWRpY2lvbmFsZXMsXG4gICAgICAgICAgICAgICAgZGlhZ27Ds3N0aWNvcyBwcmV2aW9zIG8gY290aXphY2lvbmVzIGNvc3Rvc2FzLlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIFNpIGxlIHNpZ3VlIHNpZW5kbyBmdW5jaW9uYWwsIGJyaW5kYW1vcyBsYSBvcGNpw7NuIGRlIHF1ZSBlbFxuICAgICAgICAgICAgICAgIGVxdWlwbyBwYXNlIGEgc2VyIGRlIHN1IHByb3BpZWRhZCBwb3IgbWVkaW8gZGUgbGVhc2luZyBvXG4gICAgICAgICAgICAgICAgYXJyZW5kYW1pZW50byBwdXJvLCBzaWVuZG8gMTAwJSBkZWR1Y2libGUgZGUgaW1wdWVzdG9zIHlcbiAgICAgICAgICAgICAgICBldml0YW5kbyBkZXNjYXBpdGFsaXphcnNlLiBMb3MgYXJyZW5kYW1pZW50b3MgYSBsYXJnbyBwbGF6b1xuICAgICAgICAgICAgICAgIHBlcm1pdGVuIGNhbWJpYXIgbG9zIGVxdWlwb3Mgc2kgZnVlcmEgbmVjZXNhcmlvLiDCoUVzIGxhIHNvbHVjacOzblxuICAgICAgICAgICAgICAgIHF1ZSBsYSBpbmR1c3RyaWEgbWV4aWNhbmEgcmVxdWllcmUhXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlbnRhO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const TextoDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1java9w1",
    label: "TextoDiv"
  })(false ? undefined : {
    name: "125iphh",
    styles: "display:flex;margin-top:10px;margin-bottom:10px;max-width:42%;text-align:justify;margin-right:7rem;margin-left:2rem;align-items:center;@media (max-width: 991px){display:flex;min-width:52%;margin-left:0px;min-width:100%;margin-right:0px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtFNkIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcUmVudGFFcXVpcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgUmVudGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDE4cmVtO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMzNweDtcbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDI2cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDQ0JTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIHdpZHRoOiA1MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4NTBweCkge1xuICAgICAgd2lkdGg6IDYzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICBtYXgtd2lkdGg6IDQyJTtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIG1hcmdpbi1yaWdodDogN3JlbTtcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiA1MiU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjkwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZW50YVwiPlxuICAgICAgICA8Rm9uZG8gY2xhc3NOYW1lPVwibXQtNVwiPlxuICAgICAgICAgIDxUaXR1bG8+XG4gICAgICAgICAgICA8VGl0dWxvVGV4dG8+UmVudGEgZGUgRXF1aXBvPC9UaXR1bG9UZXh0bz5cbiAgICAgICAgICA8L1RpdHVsbz5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL3NyZW50YS53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJSZW50YSBkZSBIYW5kIEhlbGQgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4dG8gY2xhc3NOYW1lPVwidGV4dC1qdXN0aWZ5XCI+XG4gICAgICAgICAgICAgICAgUmVudGFtb3MgaGFuZGhlbGRzLCBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgbGVjdG9yZXMgZGUgY8OzZGlnb3MgZSBpbXByZXNvcmFzIGRlIGNyZWRlbmNpYWxlcyBwb3IgcGVyaW9kb3MgY29ydG9zIHkgbGFyZ29zLiBEZXNkZSB1biBkw61hLCBzZW1hbmEsIG1lc1xuICAgICAgICAgICAgICAgIHkgaGFzdGEgYcOxb3MuIFJlbnRhciBlcXVpcG8gbGUgcGVybWl0aXLDoSBkaXNwb25lcmxvcyBkZSB1biBkw61hXG4gICAgICAgICAgICAgICAgcGFyYSBvdHJvLCBzaW4gZGVww7NzaXRvcywgbmkgdHLDoW1pdGVzIHRhcmRhZG9zLiBJbmNsdXllbiB0b2Rvc1xuICAgICAgICAgICAgICAgIGxvcyBhY2Nlc29yaW9zIHF1ZSBzZSByZXF1aWVyZW4geSBjdWVudGFuIGNvbiBww7NsaXphIGRlXG4gICAgICAgICAgICAgICAgcmVwYXJhY2nDs24gcGVybWFuZW50ZS4gU2kgdW4gZXF1aXBvIGZhbGxhLCBzZSByZXBhcmFcbiAgICAgICAgICAgICAgICBkaXJlY3RhbWVudGUgeSBkZSBpbm1lZGlhdG8sIHNpbiBjb3N0b3MgYWRpY2lvbmFsZXMsXG4gICAgICAgICAgICAgICAgZGlhZ27Ds3N0aWNvcyBwcmV2aW9zIG8gY290aXphY2lvbmVzIGNvc3Rvc2FzLlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIFNpIGxlIHNpZ3VlIHNpZW5kbyBmdW5jaW9uYWwsIGJyaW5kYW1vcyBsYSBvcGNpw7NuIGRlIHF1ZSBlbFxuICAgICAgICAgICAgICAgIGVxdWlwbyBwYXNlIGEgc2VyIGRlIHN1IHByb3BpZWRhZCBwb3IgbWVkaW8gZGUgbGVhc2luZyBvXG4gICAgICAgICAgICAgICAgYXJyZW5kYW1pZW50byBwdXJvLCBzaWVuZG8gMTAwJSBkZWR1Y2libGUgZGUgaW1wdWVzdG9zIHlcbiAgICAgICAgICAgICAgICBldml0YW5kbyBkZXNjYXBpdGFsaXphcnNlLiBMb3MgYXJyZW5kYW1pZW50b3MgYSBsYXJnbyBwbGF6b1xuICAgICAgICAgICAgICAgIHBlcm1pdGVuIGNhbWJpYXIgbG9zIGVxdWlwb3Mgc2kgZnVlcmEgbmVjZXNhcmlvLiDCoUVzIGxhIHNvbHVjacOzblxuICAgICAgICAgICAgICAgIHF1ZSBsYSBpbmR1c3RyaWEgbWV4aWNhbmEgcmVxdWllcmUhXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlbnRhO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Texto = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "e1java9w0",
    label: "Texto"
  })(false ? undefined : {
    name: "8ug9gq",
    styles: "font-size:16px;color:white;@media (max-width: 1290px){font-size:14px;}@media (max-width: 1170px){font-size:12px;}@media (max-width: 991px){font-size:16px;width:63%;margin:0px auto;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFGd0IiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcUmVudGFFcXVpcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgUmVudGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDE4cmVtO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMzNweDtcbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDI2cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDQ0JTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIHdpZHRoOiA1MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4NTBweCkge1xuICAgICAgd2lkdGg6IDYzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICBtYXgtd2lkdGg6IDQyJTtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIG1hcmdpbi1yaWdodDogN3JlbTtcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiA1MiU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjkwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZW50YVwiPlxuICAgICAgICA8Rm9uZG8gY2xhc3NOYW1lPVwibXQtNVwiPlxuICAgICAgICAgIDxUaXR1bG8+XG4gICAgICAgICAgICA8VGl0dWxvVGV4dG8+UmVudGEgZGUgRXF1aXBvPC9UaXR1bG9UZXh0bz5cbiAgICAgICAgICA8L1RpdHVsbz5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL3NyZW50YS53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJSZW50YSBkZSBIYW5kIEhlbGQgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4dG8gY2xhc3NOYW1lPVwidGV4dC1qdXN0aWZ5XCI+XG4gICAgICAgICAgICAgICAgUmVudGFtb3MgaGFuZGhlbGRzLCBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgbGVjdG9yZXMgZGUgY8OzZGlnb3MgZSBpbXByZXNvcmFzIGRlIGNyZWRlbmNpYWxlcyBwb3IgcGVyaW9kb3MgY29ydG9zIHkgbGFyZ29zLiBEZXNkZSB1biBkw61hLCBzZW1hbmEsIG1lc1xuICAgICAgICAgICAgICAgIHkgaGFzdGEgYcOxb3MuIFJlbnRhciBlcXVpcG8gbGUgcGVybWl0aXLDoSBkaXNwb25lcmxvcyBkZSB1biBkw61hXG4gICAgICAgICAgICAgICAgcGFyYSBvdHJvLCBzaW4gZGVww7NzaXRvcywgbmkgdHLDoW1pdGVzIHRhcmRhZG9zLiBJbmNsdXllbiB0b2Rvc1xuICAgICAgICAgICAgICAgIGxvcyBhY2Nlc29yaW9zIHF1ZSBzZSByZXF1aWVyZW4geSBjdWVudGFuIGNvbiBww7NsaXphIGRlXG4gICAgICAgICAgICAgICAgcmVwYXJhY2nDs24gcGVybWFuZW50ZS4gU2kgdW4gZXF1aXBvIGZhbGxhLCBzZSByZXBhcmFcbiAgICAgICAgICAgICAgICBkaXJlY3RhbWVudGUgeSBkZSBpbm1lZGlhdG8sIHNpbiBjb3N0b3MgYWRpY2lvbmFsZXMsXG4gICAgICAgICAgICAgICAgZGlhZ27Ds3N0aWNvcyBwcmV2aW9zIG8gY290aXphY2lvbmVzIGNvc3Rvc2FzLlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIFNpIGxlIHNpZ3VlIHNpZW5kbyBmdW5jaW9uYWwsIGJyaW5kYW1vcyBsYSBvcGNpw7NuIGRlIHF1ZSBlbFxuICAgICAgICAgICAgICAgIGVxdWlwbyBwYXNlIGEgc2VyIGRlIHN1IHByb3BpZWRhZCBwb3IgbWVkaW8gZGUgbGVhc2luZyBvXG4gICAgICAgICAgICAgICAgYXJyZW5kYW1pZW50byBwdXJvLCBzaWVuZG8gMTAwJSBkZWR1Y2libGUgZGUgaW1wdWVzdG9zIHlcbiAgICAgICAgICAgICAgICBldml0YW5kbyBkZXNjYXBpdGFsaXphcnNlLiBMb3MgYXJyZW5kYW1pZW50b3MgYSBsYXJnbyBwbGF6b1xuICAgICAgICAgICAgICAgIHBlcm1pdGVuIGNhbWJpYXIgbG9zIGVxdWlwb3Mgc2kgZnVlcmEgbmVjZXNhcmlvLiDCoUVzIGxhIHNvbHVjacOzblxuICAgICAgICAgICAgICAgIHF1ZSBsYSBpbmR1c3RyaWEgbWV4aWNhbmEgcmVxdWllcmUhXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlbnRhO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("section", {
    id: "renta",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 107,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Fondo, {
    className: "mt-5",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 108,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Titulo, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 109,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TituloTexto, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 110,
      columnNumber: 13
    }
  }, "Renta de Equipo")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Contenedor, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 112,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(ImagenDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 113,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Imagen, {
    src: "/img/srenta.webp",
    alt: "Renta de Hand Held Impresoras de Etiquetas y Lectores de codigo de barras",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 114,
      columnNumber: 15
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TextoDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 119,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texto, {
    className: "text-justify",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 120,
      columnNumber: 15
    }
  }, "Rentamos handhelds, impresoras de etiquetas, lectores de c\xF3digos e impresoras de credenciales por periodos cortos y largos. Desde un d\xEDa, semana, mes y hasta a\xF1os. Rentar equipo le permitir\xE1 disponerlos de un d\xEDa para otro, sin dep\xF3sitos, ni tr\xE1mites tardados. Incluyen todos los accesorios que se requieren y cuentan con p\xF3liza de reparaci\xF3n permanente. Si un equipo falla, se repara directamente y de inmediato, sin costos adicionales, diagn\xF3sticos previos o cotizaciones costosas.", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 128,
      columnNumber: 17
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 129,
      columnNumber: 17
    }
  }), "Si le sigue siendo funcional, brindamos la opci\xF3n de que el equipo pase a ser de su propiedad por medio de leasing o arrendamiento puro, siendo 100% deducible de impuestos y evitando descapitalizarse. Los arrendamientos a largo plazo permiten cambiar los equipos si fuera necesario. \xA1Es la soluci\xF3n que la industria mexicana requiere!", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 136,
      columnNumber: 17
    }
  })))))));
};

/* harmony default export */ __webpack_exports__["default"] = (Renta);

/***/ }),

/***/ "./components/layout/ReparacionEquipo.js":
/*!***********************************************!*\
  !*** ./components/layout/ReparacionEquipo.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_2__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\ReparacionEquipo.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }




const Reparacion = () => {
  const Fondo = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e9m69bm10",
    label: "Fondo"
  })(false ? undefined : {
    name: "miqc5w",
    styles: "background-color:white;width:100%",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlcGFyYWNpb25FcXVpcG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSTBCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlcGFyYWNpb25FcXVpcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgUmVwYXJhY2lvbiA9ICgpID0+IHtcbiAgY29uc3QgRm9uZG8gPSBzdHlsZWQuZGl2YFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDMzcHg7XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctYm90dG9tOiAyNnB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMDBweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJbWFnZW5EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgIHdpZHRoOiA0NCU7XG4gICAgbWFyZ2luLXJpZ2h0OiAycmVtO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAxMDAxcHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBib3gtc2hhZG93OiAwcHggMHB4IDVweCBibGFjaztcbiAgICB3aWR0aDogOTUlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDExMDBweCkge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMDBweCkge1xuICAgICAgd2lkdGg6IDY1JTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4VGlEaXYgPSBzdHlsZWQuZGl2YFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi10b3A6IDNyZW07XG4gIGA7XG5cbiAgY29uc3QgVGV4dGkgPSBzdHlsZWQucGBcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDEuMjVyZW07XG4gIGA7XG5cbiAgY29uc3QgSW5mbyA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDQ1JTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMDBweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgIHdpZHRoOiA3NSU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0b0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgcGFkZGluZy1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcbiAgYDtcblxuICBjb25zdCBUZXh0byA9IHN0eWxlZC5wYFxuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgYDtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8c2VjdGlvbiBpZD1cInJlcGFyYWNpb25cIj5cbiAgICAgICAgPEZvbmRvIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICA8VGl0dWxvPlxuICAgICAgICAgICAgPFRpdHVsb1RleHRvPlJlcGFyYWNpw7NuIGRlIEVxdWlwbzwvVGl0dWxvVGV4dG8+XG4gICAgICAgICAgPC9UaXR1bG8+XG4gICAgICAgICAgPENvbnRlbmVkb3IgY2xhc3NOYW1lPVwibXQtNVwiPlxuICAgICAgICAgICAgPEluZm8+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+UMOTTElaQVMgREUgU0VSVklDSU88L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgQ29udGFtb3MgY29uIHDDs2xpemFzIGFudWFsZXMgZGUgcmVwYXJhY2nDs24gaW50ZWdyYWwgcGFyYSBzdXMgaGFuZGhlbGRzIGUgaW1wcmVzb3JhcyBkZSBldGlxdWV0YXMsIHF1ZVxuICAgICAgICAgICAgICAgICAgY29uc2lkZXJhbiByZXBhcmFyIHN1cyBlcXVpcG9zIGVuIHBvY29zIGTDrWFzIG8gaW5jbHVzbyBlbFxuICAgICAgICAgICAgICAgICAgbWlzbW8sIHBvciBkYcOxb3MgY2F1c2Fkb3MgcG9yIHVzbyBub3JtYWwgeSBzb2JyZSB0b2RvIMKhUG9yXG4gICAgICAgICAgICAgICAgICBhY2NpZGVudGVzISBMYXMgcMOzbGl6YXMgYXNlZ3VyYW4gbGEgcsOhcGlkYSByZWhhYmlsaXRhY2nDs24gZGVcbiAgICAgICAgICAgICAgICAgIHN1cyBlcXVpcG9zIHkgbGEgY29udGludWlkYWQgZGUgc3Ugb3BlcmFjacOzbiwgZXZpdGFuZG8gbGFzXG4gICAgICAgICAgICAgICAgICBww6lyZGlkYXMgcXVlIHJlcHJlc2VudGEgdGVuZXJsb3MgZnVlcmEgZGUgdXNvLiDCoU51ZXN0cmFzXG4gICAgICAgICAgICAgICAgICBww7NsaXphcyBpbmNsdXllbiBtYW50ZW5pbWllbnRvcyBwcmV2ZW50aXZvcyBzaW4gY29zdG9cbiAgICAgICAgICAgICAgICAgIGFkaWNpb25hbCEgQWRlbcOhcywgbGFzIHB1ZWRlIGNhbmNlbGFyIGVuIGN1YWxxdWllciBtb21lbnRvIHlcbiAgICAgICAgICAgICAgICAgIMKhU2luIHBlbmFsaXphY2lvbmVzIVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleFRpRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0aT5SRVBBUkFDScOTTiBQT1IgRVZFTlRPIMOaTklDTzwvVGV4dGk+XG4gICAgICAgICAgICAgIDwvVGV4VGlEaXY+XG4gICAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgICA8VGV4dG8+XG4gICAgICAgICAgICAgICAgICBTaSBubyBjdWVudGEgY29uIHVuYSBww7NsaXphIGRlIHJlcGFyYWNpw7NuLCBzYWJlbW9zIHF1ZSB1c3RlZFxuICAgICAgICAgICAgICAgICAgbmVjZXNpdGEgcXVlIHN1cyBoYW5kaGVsZHMsIGxlY3RvcmVzIGRlIGPDs2RpZ29zIGRlIGJhcnJhcyBlIGltcHJlc29yYXMgZGUgZXRpcXVldGFzLCBzZSByZWhhYmlsaXRlbiByw6FwaWRhbWVudGUsIHNpblxuICAgICAgICAgICAgICAgICAgdHLDoW1pdGVzIGVuZ29ycm9zb3MsIGFzw60gcXVlIGJyaW5kYW1vcyBwcmltZXJvIHJlcGFyYXJsb3MgeVxuICAgICAgICAgICAgICAgICAgZGVzcHXDqXMgcmVhbGl6YXIgbG9zIHRyw6FtaXRlcyBkZSBwYWdvLiDCoVNpbiBjb3N0byBwb3JcbiAgICAgICAgICAgICAgICAgIGRpYWduw7NzdGljbyB5IGNvbiBhdGVuY2nDs24gZW4gc2l0aW8hXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgQXVuIHNpbiBww7NsaXphIGRlIHNlcnZpY2lvLCBsb3MgdGllbXBvcyBkZSBkaWFnbsOzc3RpY28gc29uIGRlXG4gICAgICAgICAgICAgICAgICAyIGTDrWFzIHkgbG9zIHRpZW1wb3MgZGUgcmVwYXJhY2nDs24gZGUgMyBkw61hcywgY29uIGVudHJlZ2Egc2luXG4gICAgICAgICAgICAgICAgICBjb3N0by4gVGFtYmnDqW4gZW4gY2FzbyBkZSBzZXIgbmVjZXNhcmlvLCBjb250YW1vcyBjb24gc2VydmljaW9cbiAgICAgICAgICAgICAgICAgIGRlIHJlY29sZWNjacOzbiB5IHJlcGFyYWNpw7NuIGVuIHNpdGlvIHNpbiBjYXJnbyBhZGljaW9uYWxcbiAgICAgICAgICAgICAgICAgIGRlbnRybyBkZWwgw6FyZWEgbWV0cm9wb2xpdGFuYSBkZSBsYSBDaXVkYWQgZGUgTcOpeGljby4gQWRlbcOhcyxcbiAgICAgICAgICAgICAgICAgIGxvIHJlc3BhbGRhbW9zIGNvbiBzb3BvcnRlIHTDqWNuaWNvIHRlbGVmw7NuaWNvIGVuIGN1YWxxdWllclxuICAgICAgICAgICAgICAgICAgbW9tZW50byB5IDxiPkdBUkFOVMONQSBkZSAxMDAgZMOtYXMuPC9iPlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICA8L0luZm8+XG4gICAgICAgICAgICA8SW1hZ2VuRGl2PlxuICAgICAgICAgICAgICA8SW1hZ2VuXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9zZXJ2aWNpby1wb2xpemEtcmVwYXJhY2lvbi53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJSZXBhcmFjaW9uIGRlIEhhbmRoZWxkLCBJbXByZXNvcmFzIGRlIEV0aXF1ZXRhcyB5IExlY3RvcmVzIGRlIGNvZGlnbyBkZSBiYXJyYXNcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9JbWFnZW5EaXY+XG4gICAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8L0ZvbmRvPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVwYXJhY2lvbjtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Titulo = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e9m69bm9",
    label: "Titulo"
  })(false ? undefined : {
    name: "9upkzg",
    styles: "text-align:center;margin:0px auto;padding-top:10px;width:100%",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlcGFyYWNpb25FcXVpcG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUzJCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlcGFyYWNpb25FcXVpcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgUmVwYXJhY2lvbiA9ICgpID0+IHtcbiAgY29uc3QgRm9uZG8gPSBzdHlsZWQuZGl2YFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDMzcHg7XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctYm90dG9tOiAyNnB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMDBweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJbWFnZW5EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgIHdpZHRoOiA0NCU7XG4gICAgbWFyZ2luLXJpZ2h0OiAycmVtO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAxMDAxcHgpIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiAycmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBib3gtc2hhZG93OiAwcHggMHB4IDVweCBibGFjaztcbiAgICB3aWR0aDogOTUlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDExMDBweCkge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMDBweCkge1xuICAgICAgd2lkdGg6IDY1JTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4VGlEaXYgPSBzdHlsZWQuZGl2YFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi10b3A6IDNyZW07XG4gIGA7XG5cbiAgY29uc3QgVGV4dGkgPSBzdHlsZWQucGBcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDEuMjVyZW07XG4gIGA7XG5cbiAgY29uc3QgSW5mbyA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDQ1JTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMDBweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgIHdpZHRoOiA3NSU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBUZXh0b0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgcGFkZGluZy1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcbiAgYDtcblxuICBjb25zdCBUZXh0byA9IHN0eWxlZC5wYFxuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgYDtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8c2VjdGlvbiBpZD1cInJlcGFyYWNpb25cIj5cbiAgICAgICAgPEZvbmRvIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICA8VGl0dWxvPlxuICAgICAgICAgICAgPFRpdHVsb1RleHRvPlJlcGFyYWNpw7NuIGRlIEVxdWlwbzwvVGl0dWxvVGV4dG8+XG4gICAgICAgICAgPC9UaXR1bG8+XG4gICAgICAgICAgPENvbnRlbmVkb3IgY2xhc3NOYW1lPVwibXQtNVwiPlxuICAgICAgICAgICAgPEluZm8+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+UMOTTElaQVMgREUgU0VSVklDSU88L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgQ29udGFtb3MgY29uIHDDs2xpemFzIGFudWFsZXMgZGUgcmVwYXJhY2nDs24gaW50ZWdyYWwgcGFyYSBzdXMgaGFuZGhlbGRzIGUgaW1wcmVzb3JhcyBkZSBldGlxdWV0YXMsIHF1ZVxuICAgICAgICAgICAgICAgICAgY29uc2lkZXJhbiByZXBhcmFyIHN1cyBlcXVpcG9zIGVuIHBvY29zIGTDrWFzIG8gaW5jbHVzbyBlbFxuICAgICAgICAgICAgICAgICAgbWlzbW8sIHBvciBkYcOxb3MgY2F1c2Fkb3MgcG9yIHVzbyBub3JtYWwgeSBzb2JyZSB0b2RvIMKhUG9yXG4gICAgICAgICAgICAgICAgICBhY2NpZGVudGVzISBMYXMgcMOzbGl6YXMgYXNlZ3VyYW4gbGEgcsOhcGlkYSByZWhhYmlsaXRhY2nDs24gZGVcbiAgICAgICAgICAgICAgICAgIHN1cyBlcXVpcG9zIHkgbGEgY29udGludWlkYWQgZGUgc3Ugb3BlcmFjacOzbiwgZXZpdGFuZG8gbGFzXG4gICAgICAgICAgICAgICAgICBww6lyZGlkYXMgcXVlIHJlcHJlc2VudGEgdGVuZXJsb3MgZnVlcmEgZGUgdXNvLiDCoU51ZXN0cmFzXG4gICAgICAgICAgICAgICAgICBww7NsaXphcyBpbmNsdXllbiBtYW50ZW5pbWllbnRvcyBwcmV2ZW50aXZvcyBzaW4gY29zdG9cbiAgICAgICAgICAgICAgICAgIGFkaWNpb25hbCEgQWRlbcOhcywgbGFzIHB1ZWRlIGNhbmNlbGFyIGVuIGN1YWxxdWllciBtb21lbnRvIHlcbiAgICAgICAgICAgICAgICAgIMKhU2luIHBlbmFsaXphY2lvbmVzIVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgICAgPC9UZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleFRpRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0aT5SRVBBUkFDScOTTiBQT1IgRVZFTlRPIMOaTklDTzwvVGV4dGk+XG4gICAgICAgICAgICAgIDwvVGV4VGlEaXY+XG4gICAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgICA8VGV4dG8+XG4gICAgICAgICAgICAgICAgICBTaSBubyBjdWVudGEgY29uIHVuYSBww7NsaXphIGRlIHJlcGFyYWNpw7NuLCBzYWJlbW9zIHF1ZSB1c3RlZFxuICAgICAgICAgICAgICAgICAgbmVjZXNpdGEgcXVlIHN1cyBoYW5kaGVsZHMsIGxlY3RvcmVzIGRlIGPDs2RpZ29zIGRlIGJhcnJhcyBlIGltcHJlc29yYXMgZGUgZXRpcXVldGFzLCBzZSByZWhhYmlsaXRlbiByw6FwaWRhbWVudGUsIHNpblxuICAgICAgICAgICAgICAgICAgdHLDoW1pdGVzIGVuZ29ycm9zb3MsIGFzw60gcXVlIGJyaW5kYW1vcyBwcmltZXJvIHJlcGFyYXJsb3MgeVxuICAgICAgICAgICAgICAgICAgZGVzcHXDqXMgcmVhbGl6YXIgbG9zIHRyw6FtaXRlcyBkZSBwYWdvLiDCoVNpbiBjb3N0byBwb3JcbiAgICAgICAgICAgICAgICAgIGRpYWduw7NzdGljbyB5IGNvbiBhdGVuY2nDs24gZW4gc2l0aW8hXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgQXVuIHNpbiBww7NsaXphIGRlIHNlcnZpY2lvLCBsb3MgdGllbXBvcyBkZSBkaWFnbsOzc3RpY28gc29uIGRlXG4gICAgICAgICAgICAgICAgICAyIGTDrWFzIHkgbG9zIHRpZW1wb3MgZGUgcmVwYXJhY2nDs24gZGUgMyBkw61hcywgY29uIGVudHJlZ2Egc2luXG4gICAgICAgICAgICAgICAgICBjb3N0by4gVGFtYmnDqW4gZW4gY2FzbyBkZSBzZXIgbmVjZXNhcmlvLCBjb250YW1vcyBjb24gc2VydmljaW9cbiAgICAgICAgICAgICAgICAgIGRlIHJlY29sZWNjacOzbiB5IHJlcGFyYWNpw7NuIGVuIHNpdGlvIHNpbiBjYXJnbyBhZGljaW9uYWxcbiAgICAgICAgICAgICAgICAgIGRlbnRybyBkZWwgw6FyZWEgbWV0cm9wb2xpdGFuYSBkZSBsYSBDaXVkYWQgZGUgTcOpeGljby4gQWRlbcOhcyxcbiAgICAgICAgICAgICAgICAgIGxvIHJlc3BhbGRhbW9zIGNvbiBzb3BvcnRlIHTDqWNuaWNvIHRlbGVmw7NuaWNvIGVuIGN1YWxxdWllclxuICAgICAgICAgICAgICAgICAgbW9tZW50byB5IDxiPkdBUkFOVMONQSBkZSAxMDAgZMOtYXMuPC9iPlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICA8L0luZm8+XG4gICAgICAgICAgICA8SW1hZ2VuRGl2PlxuICAgICAgICAgICAgICA8SW1hZ2VuXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9zZXJ2aWNpby1wb2xpemEtcmVwYXJhY2lvbi53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJSZXBhcmFjaW9uIGRlIEhhbmRoZWxkLCBJbXByZXNvcmFzIGRlIEV0aXF1ZXRhcyB5IExlY3RvcmVzIGRlIGNvZGlnbyBkZSBiYXJyYXNcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9JbWFnZW5EaXY+XG4gICAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8L0ZvbmRvPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVwYXJhY2lvbjtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const TituloTexto = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "e9m69bm8",
    label: "TituloTexto"
  })(false ? undefined : {
    name: "1w90bjz",
    styles: "font-weight:bold;font-size:33px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlcGFyYWNpb25FcXVpcG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0I4QiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxSZXBhcmFjaW9uRXF1aXBvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IFJlcGFyYWNpb24gPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG8gPSBzdHlsZWQuZGl2YFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAzM3B4O1xuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjZweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogNDQlO1xuICAgIG1hcmdpbi1yaWdodDogMnJlbTtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogMTAwMXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDk1JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIHdpZHRoOiA2NSU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleFRpRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiAzcmVtO1xuICBgO1xuXG4gIGNvbnN0IFRleHRpID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAxLjI1cmVtO1xuICBgO1xuXG4gIGNvbnN0IEluZm8gPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiA0NSU7XG4gICAgbWFyZ2luLWxlZnQ6IDUuM3JlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogNzUlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZXBhcmFjaW9uXCI+XG4gICAgICAgIDxGb25kbyBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPFRpdHVsbz5cbiAgICAgICAgICAgIDxUaXR1bG9UZXh0bz5SZXBhcmFjacOzbiBkZSBFcXVpcG88L1RpdHVsb1RleHRvPlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICAgIDxDb250ZW5lZG9yIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlDDk0xJWkFTIERFIFNFUlZJQ0lPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIENvbnRhbW9zIGNvbiBww7NsaXphcyBhbnVhbGVzIGRlIHJlcGFyYWNpw7NuIGludGVncmFsIHBhcmEgc3VzIGhhbmRoZWxkcyBlIGltcHJlc29yYXMgZGUgZXRpcXVldGFzLCBxdWVcbiAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYW4gcmVwYXJhciBzdXMgZXF1aXBvcyBlbiBwb2NvcyBkw61hcyBvIGluY2x1c28gZWxcbiAgICAgICAgICAgICAgICAgIG1pc21vLCBwb3IgZGHDsW9zIGNhdXNhZG9zIHBvciB1c28gbm9ybWFsIHkgc29icmUgdG9kbyDCoVBvclxuICAgICAgICAgICAgICAgICAgYWNjaWRlbnRlcyEgTGFzIHDDs2xpemFzIGFzZWd1cmFuIGxhIHLDoXBpZGEgcmVoYWJpbGl0YWNpw7NuIGRlXG4gICAgICAgICAgICAgICAgICBzdXMgZXF1aXBvcyB5IGxhIGNvbnRpbnVpZGFkIGRlIHN1IG9wZXJhY2nDs24sIGV2aXRhbmRvIGxhc1xuICAgICAgICAgICAgICAgICAgcMOpcmRpZGFzIHF1ZSByZXByZXNlbnRhIHRlbmVybG9zIGZ1ZXJhIGRlIHVzby4gwqFOdWVzdHJhc1xuICAgICAgICAgICAgICAgICAgcMOzbGl6YXMgaW5jbHV5ZW4gbWFudGVuaW1pZW50b3MgcHJldmVudGl2b3Mgc2luIGNvc3RvXG4gICAgICAgICAgICAgICAgICBhZGljaW9uYWwhIEFkZW3DoXMsIGxhcyBwdWVkZSBjYW5jZWxhciBlbiBjdWFscXVpZXIgbW9tZW50byB5XG4gICAgICAgICAgICAgICAgICDCoVNpbiBwZW5hbGl6YWNpb25lcyFcbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+UkVQQVJBQ0nDk04gUE9SIEVWRU5UTyDDmk5JQ088L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgU2kgbm8gY3VlbnRhIGNvbiB1bmEgcMOzbGl6YSBkZSByZXBhcmFjacOzbiwgc2FiZW1vcyBxdWUgdXN0ZWRcbiAgICAgICAgICAgICAgICAgIG5lY2VzaXRhIHF1ZSBzdXMgaGFuZGhlbGRzLCBsZWN0b3JlcyBkZSBjw7NkaWdvcyBkZSBiYXJyYXMgZSBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgc2UgcmVoYWJpbGl0ZW4gcsOhcGlkYW1lbnRlLCBzaW5cbiAgICAgICAgICAgICAgICAgIHRyw6FtaXRlcyBlbmdvcnJvc29zLCBhc8OtIHF1ZSBicmluZGFtb3MgcHJpbWVybyByZXBhcmFybG9zIHlcbiAgICAgICAgICAgICAgICAgIGRlc3B1w6lzIHJlYWxpemFyIGxvcyB0csOhbWl0ZXMgZGUgcGFnby4gwqFTaW4gY29zdG8gcG9yXG4gICAgICAgICAgICAgICAgICBkaWFnbsOzc3RpY28geSBjb24gYXRlbmNpw7NuIGVuIHNpdGlvIVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIEF1biBzaW4gcMOzbGl6YSBkZSBzZXJ2aWNpbywgbG9zIHRpZW1wb3MgZGUgZGlhZ27Ds3N0aWNvIHNvbiBkZVxuICAgICAgICAgICAgICAgICAgMiBkw61hcyB5IGxvcyB0aWVtcG9zIGRlIHJlcGFyYWNpw7NuIGRlIDMgZMOtYXMsIGNvbiBlbnRyZWdhIHNpblxuICAgICAgICAgICAgICAgICAgY29zdG8uIFRhbWJpw6luIGVuIGNhc28gZGUgc2VyIG5lY2VzYXJpbywgY29udGFtb3MgY29uIHNlcnZpY2lvXG4gICAgICAgICAgICAgICAgICBkZSByZWNvbGVjY2nDs24geSByZXBhcmFjacOzbiBlbiBzaXRpbyBzaW4gY2FyZ28gYWRpY2lvbmFsXG4gICAgICAgICAgICAgICAgICBkZW50cm8gZGVsIMOhcmVhIG1ldHJvcG9saXRhbmEgZGUgbGEgQ2l1ZGFkIGRlIE3DqXhpY28uIEFkZW3DoXMsXG4gICAgICAgICAgICAgICAgICBsbyByZXNwYWxkYW1vcyBjb24gc29wb3J0ZSB0w6ljbmljbyB0ZWxlZsOzbmljbyBlbiBjdWFscXVpZXJcbiAgICAgICAgICAgICAgICAgIG1vbWVudG8geSA8Yj5HQVJBTlTDjUEgZGUgMTAwIGTDrWFzLjwvYj5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgPC9JbmZvPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvc2VydmljaW8tcG9saXphLXJlcGFyYWNpb24ud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUmVwYXJhY2lvbiBkZSBIYW5kaGVsZCwgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlcGFyYWNpb247XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Contenedor = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e9m69bm7",
    label: "Contenedor"
  })(false ? undefined : {
    name: "19qjal7",
    styles: "display:flex;justify-content:space-between;max-width:100%;padding-bottom:26px;@media (max-width: 1000px){display:grid;margin-top:10px;margin-bottom:10px;margin-right:0rem;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlcGFyYWNpb25FcXVpcG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUIrQiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxSZXBhcmFjaW9uRXF1aXBvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IFJlcGFyYWNpb24gPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG8gPSBzdHlsZWQuZGl2YFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAzM3B4O1xuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjZweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogNDQlO1xuICAgIG1hcmdpbi1yaWdodDogMnJlbTtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogMTAwMXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDk1JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIHdpZHRoOiA2NSU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleFRpRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiAzcmVtO1xuICBgO1xuXG4gIGNvbnN0IFRleHRpID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAxLjI1cmVtO1xuICBgO1xuXG4gIGNvbnN0IEluZm8gPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiA0NSU7XG4gICAgbWFyZ2luLWxlZnQ6IDUuM3JlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogNzUlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZXBhcmFjaW9uXCI+XG4gICAgICAgIDxGb25kbyBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPFRpdHVsbz5cbiAgICAgICAgICAgIDxUaXR1bG9UZXh0bz5SZXBhcmFjacOzbiBkZSBFcXVpcG88L1RpdHVsb1RleHRvPlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICAgIDxDb250ZW5lZG9yIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlDDk0xJWkFTIERFIFNFUlZJQ0lPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIENvbnRhbW9zIGNvbiBww7NsaXphcyBhbnVhbGVzIGRlIHJlcGFyYWNpw7NuIGludGVncmFsIHBhcmEgc3VzIGhhbmRoZWxkcyBlIGltcHJlc29yYXMgZGUgZXRpcXVldGFzLCBxdWVcbiAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYW4gcmVwYXJhciBzdXMgZXF1aXBvcyBlbiBwb2NvcyBkw61hcyBvIGluY2x1c28gZWxcbiAgICAgICAgICAgICAgICAgIG1pc21vLCBwb3IgZGHDsW9zIGNhdXNhZG9zIHBvciB1c28gbm9ybWFsIHkgc29icmUgdG9kbyDCoVBvclxuICAgICAgICAgICAgICAgICAgYWNjaWRlbnRlcyEgTGFzIHDDs2xpemFzIGFzZWd1cmFuIGxhIHLDoXBpZGEgcmVoYWJpbGl0YWNpw7NuIGRlXG4gICAgICAgICAgICAgICAgICBzdXMgZXF1aXBvcyB5IGxhIGNvbnRpbnVpZGFkIGRlIHN1IG9wZXJhY2nDs24sIGV2aXRhbmRvIGxhc1xuICAgICAgICAgICAgICAgICAgcMOpcmRpZGFzIHF1ZSByZXByZXNlbnRhIHRlbmVybG9zIGZ1ZXJhIGRlIHVzby4gwqFOdWVzdHJhc1xuICAgICAgICAgICAgICAgICAgcMOzbGl6YXMgaW5jbHV5ZW4gbWFudGVuaW1pZW50b3MgcHJldmVudGl2b3Mgc2luIGNvc3RvXG4gICAgICAgICAgICAgICAgICBhZGljaW9uYWwhIEFkZW3DoXMsIGxhcyBwdWVkZSBjYW5jZWxhciBlbiBjdWFscXVpZXIgbW9tZW50byB5XG4gICAgICAgICAgICAgICAgICDCoVNpbiBwZW5hbGl6YWNpb25lcyFcbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+UkVQQVJBQ0nDk04gUE9SIEVWRU5UTyDDmk5JQ088L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgU2kgbm8gY3VlbnRhIGNvbiB1bmEgcMOzbGl6YSBkZSByZXBhcmFjacOzbiwgc2FiZW1vcyBxdWUgdXN0ZWRcbiAgICAgICAgICAgICAgICAgIG5lY2VzaXRhIHF1ZSBzdXMgaGFuZGhlbGRzLCBsZWN0b3JlcyBkZSBjw7NkaWdvcyBkZSBiYXJyYXMgZSBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgc2UgcmVoYWJpbGl0ZW4gcsOhcGlkYW1lbnRlLCBzaW5cbiAgICAgICAgICAgICAgICAgIHRyw6FtaXRlcyBlbmdvcnJvc29zLCBhc8OtIHF1ZSBicmluZGFtb3MgcHJpbWVybyByZXBhcmFybG9zIHlcbiAgICAgICAgICAgICAgICAgIGRlc3B1w6lzIHJlYWxpemFyIGxvcyB0csOhbWl0ZXMgZGUgcGFnby4gwqFTaW4gY29zdG8gcG9yXG4gICAgICAgICAgICAgICAgICBkaWFnbsOzc3RpY28geSBjb24gYXRlbmNpw7NuIGVuIHNpdGlvIVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIEF1biBzaW4gcMOzbGl6YSBkZSBzZXJ2aWNpbywgbG9zIHRpZW1wb3MgZGUgZGlhZ27Ds3N0aWNvIHNvbiBkZVxuICAgICAgICAgICAgICAgICAgMiBkw61hcyB5IGxvcyB0aWVtcG9zIGRlIHJlcGFyYWNpw7NuIGRlIDMgZMOtYXMsIGNvbiBlbnRyZWdhIHNpblxuICAgICAgICAgICAgICAgICAgY29zdG8uIFRhbWJpw6luIGVuIGNhc28gZGUgc2VyIG5lY2VzYXJpbywgY29udGFtb3MgY29uIHNlcnZpY2lvXG4gICAgICAgICAgICAgICAgICBkZSByZWNvbGVjY2nDs24geSByZXBhcmFjacOzbiBlbiBzaXRpbyBzaW4gY2FyZ28gYWRpY2lvbmFsXG4gICAgICAgICAgICAgICAgICBkZW50cm8gZGVsIMOhcmVhIG1ldHJvcG9saXRhbmEgZGUgbGEgQ2l1ZGFkIGRlIE3DqXhpY28uIEFkZW3DoXMsXG4gICAgICAgICAgICAgICAgICBsbyByZXNwYWxkYW1vcyBjb24gc29wb3J0ZSB0w6ljbmljbyB0ZWxlZsOzbmljbyBlbiBjdWFscXVpZXJcbiAgICAgICAgICAgICAgICAgIG1vbWVudG8geSA8Yj5HQVJBTlTDjUEgZGUgMTAwIGTDrWFzLjwvYj5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgPC9JbmZvPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvc2VydmljaW8tcG9saXphLXJlcGFyYWNpb24ud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUmVwYXJhY2lvbiBkZSBIYW5kaGVsZCwgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlcGFyYWNpb247XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const ImagenDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e9m69bm6",
    label: "ImagenDiv"
  })(false ? undefined : {
    name: "ce7wh0",
    styles: "padding-top:10px;padding-bottom:10px;width:44%;margin-right:2rem;display:grid;align-items:center;@media (min-width: 1001px){margin-left:2rem;}@media (max-width: 1000px){width:100%;display:flex;justify-content:center;margin-right:0rem;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlcGFyYWNpb25FcXVpcG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUM4QiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxSZXBhcmFjaW9uRXF1aXBvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IFJlcGFyYWNpb24gPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG8gPSBzdHlsZWQuZGl2YFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAzM3B4O1xuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjZweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogNDQlO1xuICAgIG1hcmdpbi1yaWdodDogMnJlbTtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogMTAwMXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDk1JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIHdpZHRoOiA2NSU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleFRpRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiAzcmVtO1xuICBgO1xuXG4gIGNvbnN0IFRleHRpID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAxLjI1cmVtO1xuICBgO1xuXG4gIGNvbnN0IEluZm8gPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiA0NSU7XG4gICAgbWFyZ2luLWxlZnQ6IDUuM3JlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogNzUlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZXBhcmFjaW9uXCI+XG4gICAgICAgIDxGb25kbyBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPFRpdHVsbz5cbiAgICAgICAgICAgIDxUaXR1bG9UZXh0bz5SZXBhcmFjacOzbiBkZSBFcXVpcG88L1RpdHVsb1RleHRvPlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICAgIDxDb250ZW5lZG9yIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlDDk0xJWkFTIERFIFNFUlZJQ0lPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIENvbnRhbW9zIGNvbiBww7NsaXphcyBhbnVhbGVzIGRlIHJlcGFyYWNpw7NuIGludGVncmFsIHBhcmEgc3VzIGhhbmRoZWxkcyBlIGltcHJlc29yYXMgZGUgZXRpcXVldGFzLCBxdWVcbiAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYW4gcmVwYXJhciBzdXMgZXF1aXBvcyBlbiBwb2NvcyBkw61hcyBvIGluY2x1c28gZWxcbiAgICAgICAgICAgICAgICAgIG1pc21vLCBwb3IgZGHDsW9zIGNhdXNhZG9zIHBvciB1c28gbm9ybWFsIHkgc29icmUgdG9kbyDCoVBvclxuICAgICAgICAgICAgICAgICAgYWNjaWRlbnRlcyEgTGFzIHDDs2xpemFzIGFzZWd1cmFuIGxhIHLDoXBpZGEgcmVoYWJpbGl0YWNpw7NuIGRlXG4gICAgICAgICAgICAgICAgICBzdXMgZXF1aXBvcyB5IGxhIGNvbnRpbnVpZGFkIGRlIHN1IG9wZXJhY2nDs24sIGV2aXRhbmRvIGxhc1xuICAgICAgICAgICAgICAgICAgcMOpcmRpZGFzIHF1ZSByZXByZXNlbnRhIHRlbmVybG9zIGZ1ZXJhIGRlIHVzby4gwqFOdWVzdHJhc1xuICAgICAgICAgICAgICAgICAgcMOzbGl6YXMgaW5jbHV5ZW4gbWFudGVuaW1pZW50b3MgcHJldmVudGl2b3Mgc2luIGNvc3RvXG4gICAgICAgICAgICAgICAgICBhZGljaW9uYWwhIEFkZW3DoXMsIGxhcyBwdWVkZSBjYW5jZWxhciBlbiBjdWFscXVpZXIgbW9tZW50byB5XG4gICAgICAgICAgICAgICAgICDCoVNpbiBwZW5hbGl6YWNpb25lcyFcbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+UkVQQVJBQ0nDk04gUE9SIEVWRU5UTyDDmk5JQ088L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgU2kgbm8gY3VlbnRhIGNvbiB1bmEgcMOzbGl6YSBkZSByZXBhcmFjacOzbiwgc2FiZW1vcyBxdWUgdXN0ZWRcbiAgICAgICAgICAgICAgICAgIG5lY2VzaXRhIHF1ZSBzdXMgaGFuZGhlbGRzLCBsZWN0b3JlcyBkZSBjw7NkaWdvcyBkZSBiYXJyYXMgZSBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgc2UgcmVoYWJpbGl0ZW4gcsOhcGlkYW1lbnRlLCBzaW5cbiAgICAgICAgICAgICAgICAgIHRyw6FtaXRlcyBlbmdvcnJvc29zLCBhc8OtIHF1ZSBicmluZGFtb3MgcHJpbWVybyByZXBhcmFybG9zIHlcbiAgICAgICAgICAgICAgICAgIGRlc3B1w6lzIHJlYWxpemFyIGxvcyB0csOhbWl0ZXMgZGUgcGFnby4gwqFTaW4gY29zdG8gcG9yXG4gICAgICAgICAgICAgICAgICBkaWFnbsOzc3RpY28geSBjb24gYXRlbmNpw7NuIGVuIHNpdGlvIVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIEF1biBzaW4gcMOzbGl6YSBkZSBzZXJ2aWNpbywgbG9zIHRpZW1wb3MgZGUgZGlhZ27Ds3N0aWNvIHNvbiBkZVxuICAgICAgICAgICAgICAgICAgMiBkw61hcyB5IGxvcyB0aWVtcG9zIGRlIHJlcGFyYWNpw7NuIGRlIDMgZMOtYXMsIGNvbiBlbnRyZWdhIHNpblxuICAgICAgICAgICAgICAgICAgY29zdG8uIFRhbWJpw6luIGVuIGNhc28gZGUgc2VyIG5lY2VzYXJpbywgY29udGFtb3MgY29uIHNlcnZpY2lvXG4gICAgICAgICAgICAgICAgICBkZSByZWNvbGVjY2nDs24geSByZXBhcmFjacOzbiBlbiBzaXRpbyBzaW4gY2FyZ28gYWRpY2lvbmFsXG4gICAgICAgICAgICAgICAgICBkZW50cm8gZGVsIMOhcmVhIG1ldHJvcG9saXRhbmEgZGUgbGEgQ2l1ZGFkIGRlIE3DqXhpY28uIEFkZW3DoXMsXG4gICAgICAgICAgICAgICAgICBsbyByZXNwYWxkYW1vcyBjb24gc29wb3J0ZSB0w6ljbmljbyB0ZWxlZsOzbmljbyBlbiBjdWFscXVpZXJcbiAgICAgICAgICAgICAgICAgIG1vbWVudG8geSA8Yj5HQVJBTlTDjUEgZGUgMTAwIGTDrWFzLjwvYj5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgPC9JbmZvPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvc2VydmljaW8tcG9saXphLXJlcGFyYWNpb24ud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUmVwYXJhY2lvbiBkZSBIYW5kaGVsZCwgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlcGFyYWNpb247XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Imagen = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "e9m69bm5",
    label: "Imagen"
  })(false ? undefined : {
    name: "1qp58w6",
    styles: "border-radius:5px;box-shadow:0px 0px 5px black;width:95%;@media (max-width: 1100px){width:100%;display:flex;justify-content:center;margin-right:0rem;}@media (max-width: 1000px){width:65%;display:flex;justify-content:center;margin-right:0rem;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlcGFyYWNpb25FcXVpcG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUQyQiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxSZXBhcmFjaW9uRXF1aXBvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IFJlcGFyYWNpb24gPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG8gPSBzdHlsZWQuZGl2YFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAzM3B4O1xuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjZweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogNDQlO1xuICAgIG1hcmdpbi1yaWdodDogMnJlbTtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogMTAwMXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDk1JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIHdpZHRoOiA2NSU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleFRpRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiAzcmVtO1xuICBgO1xuXG4gIGNvbnN0IFRleHRpID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAxLjI1cmVtO1xuICBgO1xuXG4gIGNvbnN0IEluZm8gPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiA0NSU7XG4gICAgbWFyZ2luLWxlZnQ6IDUuM3JlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogNzUlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZXBhcmFjaW9uXCI+XG4gICAgICAgIDxGb25kbyBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPFRpdHVsbz5cbiAgICAgICAgICAgIDxUaXR1bG9UZXh0bz5SZXBhcmFjacOzbiBkZSBFcXVpcG88L1RpdHVsb1RleHRvPlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICAgIDxDb250ZW5lZG9yIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlDDk0xJWkFTIERFIFNFUlZJQ0lPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIENvbnRhbW9zIGNvbiBww7NsaXphcyBhbnVhbGVzIGRlIHJlcGFyYWNpw7NuIGludGVncmFsIHBhcmEgc3VzIGhhbmRoZWxkcyBlIGltcHJlc29yYXMgZGUgZXRpcXVldGFzLCBxdWVcbiAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYW4gcmVwYXJhciBzdXMgZXF1aXBvcyBlbiBwb2NvcyBkw61hcyBvIGluY2x1c28gZWxcbiAgICAgICAgICAgICAgICAgIG1pc21vLCBwb3IgZGHDsW9zIGNhdXNhZG9zIHBvciB1c28gbm9ybWFsIHkgc29icmUgdG9kbyDCoVBvclxuICAgICAgICAgICAgICAgICAgYWNjaWRlbnRlcyEgTGFzIHDDs2xpemFzIGFzZWd1cmFuIGxhIHLDoXBpZGEgcmVoYWJpbGl0YWNpw7NuIGRlXG4gICAgICAgICAgICAgICAgICBzdXMgZXF1aXBvcyB5IGxhIGNvbnRpbnVpZGFkIGRlIHN1IG9wZXJhY2nDs24sIGV2aXRhbmRvIGxhc1xuICAgICAgICAgICAgICAgICAgcMOpcmRpZGFzIHF1ZSByZXByZXNlbnRhIHRlbmVybG9zIGZ1ZXJhIGRlIHVzby4gwqFOdWVzdHJhc1xuICAgICAgICAgICAgICAgICAgcMOzbGl6YXMgaW5jbHV5ZW4gbWFudGVuaW1pZW50b3MgcHJldmVudGl2b3Mgc2luIGNvc3RvXG4gICAgICAgICAgICAgICAgICBhZGljaW9uYWwhIEFkZW3DoXMsIGxhcyBwdWVkZSBjYW5jZWxhciBlbiBjdWFscXVpZXIgbW9tZW50byB5XG4gICAgICAgICAgICAgICAgICDCoVNpbiBwZW5hbGl6YWNpb25lcyFcbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+UkVQQVJBQ0nDk04gUE9SIEVWRU5UTyDDmk5JQ088L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgU2kgbm8gY3VlbnRhIGNvbiB1bmEgcMOzbGl6YSBkZSByZXBhcmFjacOzbiwgc2FiZW1vcyBxdWUgdXN0ZWRcbiAgICAgICAgICAgICAgICAgIG5lY2VzaXRhIHF1ZSBzdXMgaGFuZGhlbGRzLCBsZWN0b3JlcyBkZSBjw7NkaWdvcyBkZSBiYXJyYXMgZSBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgc2UgcmVoYWJpbGl0ZW4gcsOhcGlkYW1lbnRlLCBzaW5cbiAgICAgICAgICAgICAgICAgIHRyw6FtaXRlcyBlbmdvcnJvc29zLCBhc8OtIHF1ZSBicmluZGFtb3MgcHJpbWVybyByZXBhcmFybG9zIHlcbiAgICAgICAgICAgICAgICAgIGRlc3B1w6lzIHJlYWxpemFyIGxvcyB0csOhbWl0ZXMgZGUgcGFnby4gwqFTaW4gY29zdG8gcG9yXG4gICAgICAgICAgICAgICAgICBkaWFnbsOzc3RpY28geSBjb24gYXRlbmNpw7NuIGVuIHNpdGlvIVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIEF1biBzaW4gcMOzbGl6YSBkZSBzZXJ2aWNpbywgbG9zIHRpZW1wb3MgZGUgZGlhZ27Ds3N0aWNvIHNvbiBkZVxuICAgICAgICAgICAgICAgICAgMiBkw61hcyB5IGxvcyB0aWVtcG9zIGRlIHJlcGFyYWNpw7NuIGRlIDMgZMOtYXMsIGNvbiBlbnRyZWdhIHNpblxuICAgICAgICAgICAgICAgICAgY29zdG8uIFRhbWJpw6luIGVuIGNhc28gZGUgc2VyIG5lY2VzYXJpbywgY29udGFtb3MgY29uIHNlcnZpY2lvXG4gICAgICAgICAgICAgICAgICBkZSByZWNvbGVjY2nDs24geSByZXBhcmFjacOzbiBlbiBzaXRpbyBzaW4gY2FyZ28gYWRpY2lvbmFsXG4gICAgICAgICAgICAgICAgICBkZW50cm8gZGVsIMOhcmVhIG1ldHJvcG9saXRhbmEgZGUgbGEgQ2l1ZGFkIGRlIE3DqXhpY28uIEFkZW3DoXMsXG4gICAgICAgICAgICAgICAgICBsbyByZXNwYWxkYW1vcyBjb24gc29wb3J0ZSB0w6ljbmljbyB0ZWxlZsOzbmljbyBlbiBjdWFscXVpZXJcbiAgICAgICAgICAgICAgICAgIG1vbWVudG8geSA8Yj5HQVJBTlTDjUEgZGUgMTAwIGTDrWFzLjwvYj5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgPC9JbmZvPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvc2VydmljaW8tcG9saXphLXJlcGFyYWNpb24ud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUmVwYXJhY2lvbiBkZSBIYW5kaGVsZCwgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlcGFyYWNpb247XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const TexTiDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e9m69bm4",
    label: "TexTiDiv"
  })(false ? undefined : {
    name: "h8k54z",
    styles: "text-align:center;margin:0px auto;width:100%;margin-top:3rem",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlcGFyYWNpb25FcXVpcG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkU2QiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxSZXBhcmFjaW9uRXF1aXBvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IFJlcGFyYWNpb24gPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG8gPSBzdHlsZWQuZGl2YFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAzM3B4O1xuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjZweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogNDQlO1xuICAgIG1hcmdpbi1yaWdodDogMnJlbTtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogMTAwMXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDk1JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIHdpZHRoOiA2NSU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleFRpRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiAzcmVtO1xuICBgO1xuXG4gIGNvbnN0IFRleHRpID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAxLjI1cmVtO1xuICBgO1xuXG4gIGNvbnN0IEluZm8gPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiA0NSU7XG4gICAgbWFyZ2luLWxlZnQ6IDUuM3JlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogNzUlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZXBhcmFjaW9uXCI+XG4gICAgICAgIDxGb25kbyBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPFRpdHVsbz5cbiAgICAgICAgICAgIDxUaXR1bG9UZXh0bz5SZXBhcmFjacOzbiBkZSBFcXVpcG88L1RpdHVsb1RleHRvPlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICAgIDxDb250ZW5lZG9yIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlDDk0xJWkFTIERFIFNFUlZJQ0lPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIENvbnRhbW9zIGNvbiBww7NsaXphcyBhbnVhbGVzIGRlIHJlcGFyYWNpw7NuIGludGVncmFsIHBhcmEgc3VzIGhhbmRoZWxkcyBlIGltcHJlc29yYXMgZGUgZXRpcXVldGFzLCBxdWVcbiAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYW4gcmVwYXJhciBzdXMgZXF1aXBvcyBlbiBwb2NvcyBkw61hcyBvIGluY2x1c28gZWxcbiAgICAgICAgICAgICAgICAgIG1pc21vLCBwb3IgZGHDsW9zIGNhdXNhZG9zIHBvciB1c28gbm9ybWFsIHkgc29icmUgdG9kbyDCoVBvclxuICAgICAgICAgICAgICAgICAgYWNjaWRlbnRlcyEgTGFzIHDDs2xpemFzIGFzZWd1cmFuIGxhIHLDoXBpZGEgcmVoYWJpbGl0YWNpw7NuIGRlXG4gICAgICAgICAgICAgICAgICBzdXMgZXF1aXBvcyB5IGxhIGNvbnRpbnVpZGFkIGRlIHN1IG9wZXJhY2nDs24sIGV2aXRhbmRvIGxhc1xuICAgICAgICAgICAgICAgICAgcMOpcmRpZGFzIHF1ZSByZXByZXNlbnRhIHRlbmVybG9zIGZ1ZXJhIGRlIHVzby4gwqFOdWVzdHJhc1xuICAgICAgICAgICAgICAgICAgcMOzbGl6YXMgaW5jbHV5ZW4gbWFudGVuaW1pZW50b3MgcHJldmVudGl2b3Mgc2luIGNvc3RvXG4gICAgICAgICAgICAgICAgICBhZGljaW9uYWwhIEFkZW3DoXMsIGxhcyBwdWVkZSBjYW5jZWxhciBlbiBjdWFscXVpZXIgbW9tZW50byB5XG4gICAgICAgICAgICAgICAgICDCoVNpbiBwZW5hbGl6YWNpb25lcyFcbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+UkVQQVJBQ0nDk04gUE9SIEVWRU5UTyDDmk5JQ088L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgU2kgbm8gY3VlbnRhIGNvbiB1bmEgcMOzbGl6YSBkZSByZXBhcmFjacOzbiwgc2FiZW1vcyBxdWUgdXN0ZWRcbiAgICAgICAgICAgICAgICAgIG5lY2VzaXRhIHF1ZSBzdXMgaGFuZGhlbGRzLCBsZWN0b3JlcyBkZSBjw7NkaWdvcyBkZSBiYXJyYXMgZSBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgc2UgcmVoYWJpbGl0ZW4gcsOhcGlkYW1lbnRlLCBzaW5cbiAgICAgICAgICAgICAgICAgIHRyw6FtaXRlcyBlbmdvcnJvc29zLCBhc8OtIHF1ZSBicmluZGFtb3MgcHJpbWVybyByZXBhcmFybG9zIHlcbiAgICAgICAgICAgICAgICAgIGRlc3B1w6lzIHJlYWxpemFyIGxvcyB0csOhbWl0ZXMgZGUgcGFnby4gwqFTaW4gY29zdG8gcG9yXG4gICAgICAgICAgICAgICAgICBkaWFnbsOzc3RpY28geSBjb24gYXRlbmNpw7NuIGVuIHNpdGlvIVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIEF1biBzaW4gcMOzbGl6YSBkZSBzZXJ2aWNpbywgbG9zIHRpZW1wb3MgZGUgZGlhZ27Ds3N0aWNvIHNvbiBkZVxuICAgICAgICAgICAgICAgICAgMiBkw61hcyB5IGxvcyB0aWVtcG9zIGRlIHJlcGFyYWNpw7NuIGRlIDMgZMOtYXMsIGNvbiBlbnRyZWdhIHNpblxuICAgICAgICAgICAgICAgICAgY29zdG8uIFRhbWJpw6luIGVuIGNhc28gZGUgc2VyIG5lY2VzYXJpbywgY29udGFtb3MgY29uIHNlcnZpY2lvXG4gICAgICAgICAgICAgICAgICBkZSByZWNvbGVjY2nDs24geSByZXBhcmFjacOzbiBlbiBzaXRpbyBzaW4gY2FyZ28gYWRpY2lvbmFsXG4gICAgICAgICAgICAgICAgICBkZW50cm8gZGVsIMOhcmVhIG1ldHJvcG9saXRhbmEgZGUgbGEgQ2l1ZGFkIGRlIE3DqXhpY28uIEFkZW3DoXMsXG4gICAgICAgICAgICAgICAgICBsbyByZXNwYWxkYW1vcyBjb24gc29wb3J0ZSB0w6ljbmljbyB0ZWxlZsOzbmljbyBlbiBjdWFscXVpZXJcbiAgICAgICAgICAgICAgICAgIG1vbWVudG8geSA8Yj5HQVJBTlTDjUEgZGUgMTAwIGTDrWFzLjwvYj5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgPC9JbmZvPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvc2VydmljaW8tcG9saXphLXJlcGFyYWNpb24ud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUmVwYXJhY2lvbiBkZSBIYW5kaGVsZCwgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlcGFyYWNpb247XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Texti = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "e9m69bm3",
    label: "Texti"
  })(false ? undefined : {
    name: "u3x1uk",
    styles: "font-weight:bold;font-size:1.25rem",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlcGFyYWNpb25FcXVpcG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0Z3QiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxSZXBhcmFjaW9uRXF1aXBvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IFJlcGFyYWNpb24gPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG8gPSBzdHlsZWQuZGl2YFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAzM3B4O1xuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjZweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogNDQlO1xuICAgIG1hcmdpbi1yaWdodDogMnJlbTtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogMTAwMXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDk1JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIHdpZHRoOiA2NSU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleFRpRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiAzcmVtO1xuICBgO1xuXG4gIGNvbnN0IFRleHRpID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAxLjI1cmVtO1xuICBgO1xuXG4gIGNvbnN0IEluZm8gPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiA0NSU7XG4gICAgbWFyZ2luLWxlZnQ6IDUuM3JlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogNzUlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZXBhcmFjaW9uXCI+XG4gICAgICAgIDxGb25kbyBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPFRpdHVsbz5cbiAgICAgICAgICAgIDxUaXR1bG9UZXh0bz5SZXBhcmFjacOzbiBkZSBFcXVpcG88L1RpdHVsb1RleHRvPlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICAgIDxDb250ZW5lZG9yIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlDDk0xJWkFTIERFIFNFUlZJQ0lPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIENvbnRhbW9zIGNvbiBww7NsaXphcyBhbnVhbGVzIGRlIHJlcGFyYWNpw7NuIGludGVncmFsIHBhcmEgc3VzIGhhbmRoZWxkcyBlIGltcHJlc29yYXMgZGUgZXRpcXVldGFzLCBxdWVcbiAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYW4gcmVwYXJhciBzdXMgZXF1aXBvcyBlbiBwb2NvcyBkw61hcyBvIGluY2x1c28gZWxcbiAgICAgICAgICAgICAgICAgIG1pc21vLCBwb3IgZGHDsW9zIGNhdXNhZG9zIHBvciB1c28gbm9ybWFsIHkgc29icmUgdG9kbyDCoVBvclxuICAgICAgICAgICAgICAgICAgYWNjaWRlbnRlcyEgTGFzIHDDs2xpemFzIGFzZWd1cmFuIGxhIHLDoXBpZGEgcmVoYWJpbGl0YWNpw7NuIGRlXG4gICAgICAgICAgICAgICAgICBzdXMgZXF1aXBvcyB5IGxhIGNvbnRpbnVpZGFkIGRlIHN1IG9wZXJhY2nDs24sIGV2aXRhbmRvIGxhc1xuICAgICAgICAgICAgICAgICAgcMOpcmRpZGFzIHF1ZSByZXByZXNlbnRhIHRlbmVybG9zIGZ1ZXJhIGRlIHVzby4gwqFOdWVzdHJhc1xuICAgICAgICAgICAgICAgICAgcMOzbGl6YXMgaW5jbHV5ZW4gbWFudGVuaW1pZW50b3MgcHJldmVudGl2b3Mgc2luIGNvc3RvXG4gICAgICAgICAgICAgICAgICBhZGljaW9uYWwhIEFkZW3DoXMsIGxhcyBwdWVkZSBjYW5jZWxhciBlbiBjdWFscXVpZXIgbW9tZW50byB5XG4gICAgICAgICAgICAgICAgICDCoVNpbiBwZW5hbGl6YWNpb25lcyFcbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+UkVQQVJBQ0nDk04gUE9SIEVWRU5UTyDDmk5JQ088L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgU2kgbm8gY3VlbnRhIGNvbiB1bmEgcMOzbGl6YSBkZSByZXBhcmFjacOzbiwgc2FiZW1vcyBxdWUgdXN0ZWRcbiAgICAgICAgICAgICAgICAgIG5lY2VzaXRhIHF1ZSBzdXMgaGFuZGhlbGRzLCBsZWN0b3JlcyBkZSBjw7NkaWdvcyBkZSBiYXJyYXMgZSBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgc2UgcmVoYWJpbGl0ZW4gcsOhcGlkYW1lbnRlLCBzaW5cbiAgICAgICAgICAgICAgICAgIHRyw6FtaXRlcyBlbmdvcnJvc29zLCBhc8OtIHF1ZSBicmluZGFtb3MgcHJpbWVybyByZXBhcmFybG9zIHlcbiAgICAgICAgICAgICAgICAgIGRlc3B1w6lzIHJlYWxpemFyIGxvcyB0csOhbWl0ZXMgZGUgcGFnby4gwqFTaW4gY29zdG8gcG9yXG4gICAgICAgICAgICAgICAgICBkaWFnbsOzc3RpY28geSBjb24gYXRlbmNpw7NuIGVuIHNpdGlvIVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIEF1biBzaW4gcMOzbGl6YSBkZSBzZXJ2aWNpbywgbG9zIHRpZW1wb3MgZGUgZGlhZ27Ds3N0aWNvIHNvbiBkZVxuICAgICAgICAgICAgICAgICAgMiBkw61hcyB5IGxvcyB0aWVtcG9zIGRlIHJlcGFyYWNpw7NuIGRlIDMgZMOtYXMsIGNvbiBlbnRyZWdhIHNpblxuICAgICAgICAgICAgICAgICAgY29zdG8uIFRhbWJpw6luIGVuIGNhc28gZGUgc2VyIG5lY2VzYXJpbywgY29udGFtb3MgY29uIHNlcnZpY2lvXG4gICAgICAgICAgICAgICAgICBkZSByZWNvbGVjY2nDs24geSByZXBhcmFjacOzbiBlbiBzaXRpbyBzaW4gY2FyZ28gYWRpY2lvbmFsXG4gICAgICAgICAgICAgICAgICBkZW50cm8gZGVsIMOhcmVhIG1ldHJvcG9saXRhbmEgZGUgbGEgQ2l1ZGFkIGRlIE3DqXhpY28uIEFkZW3DoXMsXG4gICAgICAgICAgICAgICAgICBsbyByZXNwYWxkYW1vcyBjb24gc29wb3J0ZSB0w6ljbmljbyB0ZWxlZsOzbmljbyBlbiBjdWFscXVpZXJcbiAgICAgICAgICAgICAgICAgIG1vbWVudG8geSA8Yj5HQVJBTlTDjUEgZGUgMTAwIGTDrWFzLjwvYj5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgPC9JbmZvPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvc2VydmljaW8tcG9saXphLXJlcGFyYWNpb24ud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUmVwYXJhY2lvbiBkZSBIYW5kaGVsZCwgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlcGFyYWNpb247XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Info = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e9m69bm2",
    label: "Info"
  })(false ? undefined : {
    name: "wsu42d",
    styles: "width:45%;margin-left:5.3rem;@media (max-width: 1000px){display:grid;width:75%;margin:0px auto;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlcGFyYWNpb25FcXVpcG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUZ5QiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxSZXBhcmFjaW9uRXF1aXBvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IFJlcGFyYWNpb24gPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG8gPSBzdHlsZWQuZGl2YFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAzM3B4O1xuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjZweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogNDQlO1xuICAgIG1hcmdpbi1yaWdodDogMnJlbTtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogMTAwMXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDk1JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIHdpZHRoOiA2NSU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleFRpRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiAzcmVtO1xuICBgO1xuXG4gIGNvbnN0IFRleHRpID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAxLjI1cmVtO1xuICBgO1xuXG4gIGNvbnN0IEluZm8gPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiA0NSU7XG4gICAgbWFyZ2luLWxlZnQ6IDUuM3JlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogNzUlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZXBhcmFjaW9uXCI+XG4gICAgICAgIDxGb25kbyBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPFRpdHVsbz5cbiAgICAgICAgICAgIDxUaXR1bG9UZXh0bz5SZXBhcmFjacOzbiBkZSBFcXVpcG88L1RpdHVsb1RleHRvPlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICAgIDxDb250ZW5lZG9yIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlDDk0xJWkFTIERFIFNFUlZJQ0lPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIENvbnRhbW9zIGNvbiBww7NsaXphcyBhbnVhbGVzIGRlIHJlcGFyYWNpw7NuIGludGVncmFsIHBhcmEgc3VzIGhhbmRoZWxkcyBlIGltcHJlc29yYXMgZGUgZXRpcXVldGFzLCBxdWVcbiAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYW4gcmVwYXJhciBzdXMgZXF1aXBvcyBlbiBwb2NvcyBkw61hcyBvIGluY2x1c28gZWxcbiAgICAgICAgICAgICAgICAgIG1pc21vLCBwb3IgZGHDsW9zIGNhdXNhZG9zIHBvciB1c28gbm9ybWFsIHkgc29icmUgdG9kbyDCoVBvclxuICAgICAgICAgICAgICAgICAgYWNjaWRlbnRlcyEgTGFzIHDDs2xpemFzIGFzZWd1cmFuIGxhIHLDoXBpZGEgcmVoYWJpbGl0YWNpw7NuIGRlXG4gICAgICAgICAgICAgICAgICBzdXMgZXF1aXBvcyB5IGxhIGNvbnRpbnVpZGFkIGRlIHN1IG9wZXJhY2nDs24sIGV2aXRhbmRvIGxhc1xuICAgICAgICAgICAgICAgICAgcMOpcmRpZGFzIHF1ZSByZXByZXNlbnRhIHRlbmVybG9zIGZ1ZXJhIGRlIHVzby4gwqFOdWVzdHJhc1xuICAgICAgICAgICAgICAgICAgcMOzbGl6YXMgaW5jbHV5ZW4gbWFudGVuaW1pZW50b3MgcHJldmVudGl2b3Mgc2luIGNvc3RvXG4gICAgICAgICAgICAgICAgICBhZGljaW9uYWwhIEFkZW3DoXMsIGxhcyBwdWVkZSBjYW5jZWxhciBlbiBjdWFscXVpZXIgbW9tZW50byB5XG4gICAgICAgICAgICAgICAgICDCoVNpbiBwZW5hbGl6YWNpb25lcyFcbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+UkVQQVJBQ0nDk04gUE9SIEVWRU5UTyDDmk5JQ088L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgU2kgbm8gY3VlbnRhIGNvbiB1bmEgcMOzbGl6YSBkZSByZXBhcmFjacOzbiwgc2FiZW1vcyBxdWUgdXN0ZWRcbiAgICAgICAgICAgICAgICAgIG5lY2VzaXRhIHF1ZSBzdXMgaGFuZGhlbGRzLCBsZWN0b3JlcyBkZSBjw7NkaWdvcyBkZSBiYXJyYXMgZSBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgc2UgcmVoYWJpbGl0ZW4gcsOhcGlkYW1lbnRlLCBzaW5cbiAgICAgICAgICAgICAgICAgIHRyw6FtaXRlcyBlbmdvcnJvc29zLCBhc8OtIHF1ZSBicmluZGFtb3MgcHJpbWVybyByZXBhcmFybG9zIHlcbiAgICAgICAgICAgICAgICAgIGRlc3B1w6lzIHJlYWxpemFyIGxvcyB0csOhbWl0ZXMgZGUgcGFnby4gwqFTaW4gY29zdG8gcG9yXG4gICAgICAgICAgICAgICAgICBkaWFnbsOzc3RpY28geSBjb24gYXRlbmNpw7NuIGVuIHNpdGlvIVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIEF1biBzaW4gcMOzbGl6YSBkZSBzZXJ2aWNpbywgbG9zIHRpZW1wb3MgZGUgZGlhZ27Ds3N0aWNvIHNvbiBkZVxuICAgICAgICAgICAgICAgICAgMiBkw61hcyB5IGxvcyB0aWVtcG9zIGRlIHJlcGFyYWNpw7NuIGRlIDMgZMOtYXMsIGNvbiBlbnRyZWdhIHNpblxuICAgICAgICAgICAgICAgICAgY29zdG8uIFRhbWJpw6luIGVuIGNhc28gZGUgc2VyIG5lY2VzYXJpbywgY29udGFtb3MgY29uIHNlcnZpY2lvXG4gICAgICAgICAgICAgICAgICBkZSByZWNvbGVjY2nDs24geSByZXBhcmFjacOzbiBlbiBzaXRpbyBzaW4gY2FyZ28gYWRpY2lvbmFsXG4gICAgICAgICAgICAgICAgICBkZW50cm8gZGVsIMOhcmVhIG1ldHJvcG9saXRhbmEgZGUgbGEgQ2l1ZGFkIGRlIE3DqXhpY28uIEFkZW3DoXMsXG4gICAgICAgICAgICAgICAgICBsbyByZXNwYWxkYW1vcyBjb24gc29wb3J0ZSB0w6ljbmljbyB0ZWxlZsOzbmljbyBlbiBjdWFscXVpZXJcbiAgICAgICAgICAgICAgICAgIG1vbWVudG8geSA8Yj5HQVJBTlTDjUEgZGUgMTAwIGTDrWFzLjwvYj5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgPC9JbmZvPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvc2VydmljaW8tcG9saXphLXJlcGFyYWNpb24ud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUmVwYXJhY2lvbiBkZSBIYW5kaGVsZCwgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlcGFyYWNpb247XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const TextoDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e9m69bm1",
    label: "TextoDiv"
  })(false ? undefined : {
    name: "zrwd5c",
    styles: "padding-top:10px;padding-bottom:10px;width:100%;text-align:justify",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlcGFyYWNpb25FcXVpcG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0c2QiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxSZXBhcmFjaW9uRXF1aXBvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IFJlcGFyYWNpb24gPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG8gPSBzdHlsZWQuZGl2YFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAzM3B4O1xuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjZweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogNDQlO1xuICAgIG1hcmdpbi1yaWdodDogMnJlbTtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogMTAwMXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDk1JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIHdpZHRoOiA2NSU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleFRpRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiAzcmVtO1xuICBgO1xuXG4gIGNvbnN0IFRleHRpID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAxLjI1cmVtO1xuICBgO1xuXG4gIGNvbnN0IEluZm8gPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiA0NSU7XG4gICAgbWFyZ2luLWxlZnQ6IDUuM3JlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogNzUlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZXBhcmFjaW9uXCI+XG4gICAgICAgIDxGb25kbyBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPFRpdHVsbz5cbiAgICAgICAgICAgIDxUaXR1bG9UZXh0bz5SZXBhcmFjacOzbiBkZSBFcXVpcG88L1RpdHVsb1RleHRvPlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICAgIDxDb250ZW5lZG9yIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlDDk0xJWkFTIERFIFNFUlZJQ0lPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIENvbnRhbW9zIGNvbiBww7NsaXphcyBhbnVhbGVzIGRlIHJlcGFyYWNpw7NuIGludGVncmFsIHBhcmEgc3VzIGhhbmRoZWxkcyBlIGltcHJlc29yYXMgZGUgZXRpcXVldGFzLCBxdWVcbiAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYW4gcmVwYXJhciBzdXMgZXF1aXBvcyBlbiBwb2NvcyBkw61hcyBvIGluY2x1c28gZWxcbiAgICAgICAgICAgICAgICAgIG1pc21vLCBwb3IgZGHDsW9zIGNhdXNhZG9zIHBvciB1c28gbm9ybWFsIHkgc29icmUgdG9kbyDCoVBvclxuICAgICAgICAgICAgICAgICAgYWNjaWRlbnRlcyEgTGFzIHDDs2xpemFzIGFzZWd1cmFuIGxhIHLDoXBpZGEgcmVoYWJpbGl0YWNpw7NuIGRlXG4gICAgICAgICAgICAgICAgICBzdXMgZXF1aXBvcyB5IGxhIGNvbnRpbnVpZGFkIGRlIHN1IG9wZXJhY2nDs24sIGV2aXRhbmRvIGxhc1xuICAgICAgICAgICAgICAgICAgcMOpcmRpZGFzIHF1ZSByZXByZXNlbnRhIHRlbmVybG9zIGZ1ZXJhIGRlIHVzby4gwqFOdWVzdHJhc1xuICAgICAgICAgICAgICAgICAgcMOzbGl6YXMgaW5jbHV5ZW4gbWFudGVuaW1pZW50b3MgcHJldmVudGl2b3Mgc2luIGNvc3RvXG4gICAgICAgICAgICAgICAgICBhZGljaW9uYWwhIEFkZW3DoXMsIGxhcyBwdWVkZSBjYW5jZWxhciBlbiBjdWFscXVpZXIgbW9tZW50byB5XG4gICAgICAgICAgICAgICAgICDCoVNpbiBwZW5hbGl6YWNpb25lcyFcbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+UkVQQVJBQ0nDk04gUE9SIEVWRU5UTyDDmk5JQ088L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgU2kgbm8gY3VlbnRhIGNvbiB1bmEgcMOzbGl6YSBkZSByZXBhcmFjacOzbiwgc2FiZW1vcyBxdWUgdXN0ZWRcbiAgICAgICAgICAgICAgICAgIG5lY2VzaXRhIHF1ZSBzdXMgaGFuZGhlbGRzLCBsZWN0b3JlcyBkZSBjw7NkaWdvcyBkZSBiYXJyYXMgZSBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgc2UgcmVoYWJpbGl0ZW4gcsOhcGlkYW1lbnRlLCBzaW5cbiAgICAgICAgICAgICAgICAgIHRyw6FtaXRlcyBlbmdvcnJvc29zLCBhc8OtIHF1ZSBicmluZGFtb3MgcHJpbWVybyByZXBhcmFybG9zIHlcbiAgICAgICAgICAgICAgICAgIGRlc3B1w6lzIHJlYWxpemFyIGxvcyB0csOhbWl0ZXMgZGUgcGFnby4gwqFTaW4gY29zdG8gcG9yXG4gICAgICAgICAgICAgICAgICBkaWFnbsOzc3RpY28geSBjb24gYXRlbmNpw7NuIGVuIHNpdGlvIVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIEF1biBzaW4gcMOzbGl6YSBkZSBzZXJ2aWNpbywgbG9zIHRpZW1wb3MgZGUgZGlhZ27Ds3N0aWNvIHNvbiBkZVxuICAgICAgICAgICAgICAgICAgMiBkw61hcyB5IGxvcyB0aWVtcG9zIGRlIHJlcGFyYWNpw7NuIGRlIDMgZMOtYXMsIGNvbiBlbnRyZWdhIHNpblxuICAgICAgICAgICAgICAgICAgY29zdG8uIFRhbWJpw6luIGVuIGNhc28gZGUgc2VyIG5lY2VzYXJpbywgY29udGFtb3MgY29uIHNlcnZpY2lvXG4gICAgICAgICAgICAgICAgICBkZSByZWNvbGVjY2nDs24geSByZXBhcmFjacOzbiBlbiBzaXRpbyBzaW4gY2FyZ28gYWRpY2lvbmFsXG4gICAgICAgICAgICAgICAgICBkZW50cm8gZGVsIMOhcmVhIG1ldHJvcG9saXRhbmEgZGUgbGEgQ2l1ZGFkIGRlIE3DqXhpY28uIEFkZW3DoXMsXG4gICAgICAgICAgICAgICAgICBsbyByZXNwYWxkYW1vcyBjb24gc29wb3J0ZSB0w6ljbmljbyB0ZWxlZsOzbmljbyBlbiBjdWFscXVpZXJcbiAgICAgICAgICAgICAgICAgIG1vbWVudG8geSA8Yj5HQVJBTlTDjUEgZGUgMTAwIGTDrWFzLjwvYj5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgPC9JbmZvPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvc2VydmljaW8tcG9saXphLXJlcGFyYWNpb24ud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUmVwYXJhY2lvbiBkZSBIYW5kaGVsZCwgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlcGFyYWNpb247XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Texto = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "e9m69bm0",
    label: "Texto"
  })(false ? undefined : {
    name: "11g4mt0",
    styles: "font-size:16px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFJlcGFyYWNpb25FcXVpcG8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUd3QiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxSZXBhcmFjaW9uRXF1aXBvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IFJlcGFyYWNpb24gPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgYDtcblxuICBjb25zdCBUaXR1bG8gPSBzdHlsZWQuZGl2YFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAzM3B4O1xuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjZweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogNDQlO1xuICAgIG1hcmdpbi1yaWdodDogMnJlbTtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICBAbWVkaWEgKG1pbi13aWR0aDogMTAwMXB4KSB7XG4gICAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDk1JTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTAwcHgpIHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIHdpZHRoOiA2NSU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDByZW07XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleFRpRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiAzcmVtO1xuICBgO1xuXG4gIGNvbnN0IFRleHRpID0gc3R5bGVkLnBgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAxLjI1cmVtO1xuICBgO1xuXG4gIGNvbnN0IEluZm8gPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiA0NSU7XG4gICAgbWFyZ2luLWxlZnQ6IDUuM3JlbTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICB3aWR0aDogNzUlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJyZXBhcmFjaW9uXCI+XG4gICAgICAgIDxGb25kbyBjbGFzc05hbWU9XCJtdC01XCI+XG4gICAgICAgICAgPFRpdHVsbz5cbiAgICAgICAgICAgIDxUaXR1bG9UZXh0bz5SZXBhcmFjacOzbiBkZSBFcXVpcG88L1RpdHVsb1RleHRvPlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICAgIDxDb250ZW5lZG9yIGNsYXNzTmFtZT1cIm10LTVcIj5cbiAgICAgICAgICAgIDxJbmZvPlxuICAgICAgICAgICAgICA8VGV4VGlEaXY+XG4gICAgICAgICAgICAgICAgPFRleHRpPlDDk0xJWkFTIERFIFNFUlZJQ0lPPC9UZXh0aT5cbiAgICAgICAgICAgICAgPC9UZXhUaURpdj5cbiAgICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICAgIDxUZXh0bz5cbiAgICAgICAgICAgICAgICAgIENvbnRhbW9zIGNvbiBww7NsaXphcyBhbnVhbGVzIGRlIHJlcGFyYWNpw7NuIGludGVncmFsIHBhcmEgc3VzIGhhbmRoZWxkcyBlIGltcHJlc29yYXMgZGUgZXRpcXVldGFzLCBxdWVcbiAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYW4gcmVwYXJhciBzdXMgZXF1aXBvcyBlbiBwb2NvcyBkw61hcyBvIGluY2x1c28gZWxcbiAgICAgICAgICAgICAgICAgIG1pc21vLCBwb3IgZGHDsW9zIGNhdXNhZG9zIHBvciB1c28gbm9ybWFsIHkgc29icmUgdG9kbyDCoVBvclxuICAgICAgICAgICAgICAgICAgYWNjaWRlbnRlcyEgTGFzIHDDs2xpemFzIGFzZWd1cmFuIGxhIHLDoXBpZGEgcmVoYWJpbGl0YWNpw7NuIGRlXG4gICAgICAgICAgICAgICAgICBzdXMgZXF1aXBvcyB5IGxhIGNvbnRpbnVpZGFkIGRlIHN1IG9wZXJhY2nDs24sIGV2aXRhbmRvIGxhc1xuICAgICAgICAgICAgICAgICAgcMOpcmRpZGFzIHF1ZSByZXByZXNlbnRhIHRlbmVybG9zIGZ1ZXJhIGRlIHVzby4gwqFOdWVzdHJhc1xuICAgICAgICAgICAgICAgICAgcMOzbGl6YXMgaW5jbHV5ZW4gbWFudGVuaW1pZW50b3MgcHJldmVudGl2b3Mgc2luIGNvc3RvXG4gICAgICAgICAgICAgICAgICBhZGljaW9uYWwhIEFkZW3DoXMsIGxhcyBwdWVkZSBjYW5jZWxhciBlbiBjdWFscXVpZXIgbW9tZW50byB5XG4gICAgICAgICAgICAgICAgICDCoVNpbiBwZW5hbGl6YWNpb25lcyFcbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgICAgIDxUZXhUaURpdj5cbiAgICAgICAgICAgICAgICA8VGV4dGk+UkVQQVJBQ0nDk04gUE9SIEVWRU5UTyDDmk5JQ088L1RleHRpPlxuICAgICAgICAgICAgICA8L1RleFRpRGl2PlxuICAgICAgICAgICAgICA8VGV4dG9EaXY+XG4gICAgICAgICAgICAgICAgPFRleHRvPlxuICAgICAgICAgICAgICAgICAgU2kgbm8gY3VlbnRhIGNvbiB1bmEgcMOzbGl6YSBkZSByZXBhcmFjacOzbiwgc2FiZW1vcyBxdWUgdXN0ZWRcbiAgICAgICAgICAgICAgICAgIG5lY2VzaXRhIHF1ZSBzdXMgaGFuZGhlbGRzLCBsZWN0b3JlcyBkZSBjw7NkaWdvcyBkZSBiYXJyYXMgZSBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcywgc2UgcmVoYWJpbGl0ZW4gcsOhcGlkYW1lbnRlLCBzaW5cbiAgICAgICAgICAgICAgICAgIHRyw6FtaXRlcyBlbmdvcnJvc29zLCBhc8OtIHF1ZSBicmluZGFtb3MgcHJpbWVybyByZXBhcmFybG9zIHlcbiAgICAgICAgICAgICAgICAgIGRlc3B1w6lzIHJlYWxpemFyIGxvcyB0csOhbWl0ZXMgZGUgcGFnby4gwqFTaW4gY29zdG8gcG9yXG4gICAgICAgICAgICAgICAgICBkaWFnbsOzc3RpY28geSBjb24gYXRlbmNpw7NuIGVuIHNpdGlvIVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIEF1biBzaW4gcMOzbGl6YSBkZSBzZXJ2aWNpbywgbG9zIHRpZW1wb3MgZGUgZGlhZ27Ds3N0aWNvIHNvbiBkZVxuICAgICAgICAgICAgICAgICAgMiBkw61hcyB5IGxvcyB0aWVtcG9zIGRlIHJlcGFyYWNpw7NuIGRlIDMgZMOtYXMsIGNvbiBlbnRyZWdhIHNpblxuICAgICAgICAgICAgICAgICAgY29zdG8uIFRhbWJpw6luIGVuIGNhc28gZGUgc2VyIG5lY2VzYXJpbywgY29udGFtb3MgY29uIHNlcnZpY2lvXG4gICAgICAgICAgICAgICAgICBkZSByZWNvbGVjY2nDs24geSByZXBhcmFjacOzbiBlbiBzaXRpbyBzaW4gY2FyZ28gYWRpY2lvbmFsXG4gICAgICAgICAgICAgICAgICBkZW50cm8gZGVsIMOhcmVhIG1ldHJvcG9saXRhbmEgZGUgbGEgQ2l1ZGFkIGRlIE3DqXhpY28uIEFkZW3DoXMsXG4gICAgICAgICAgICAgICAgICBsbyByZXNwYWxkYW1vcyBjb24gc29wb3J0ZSB0w6ljbmljbyB0ZWxlZsOzbmljbyBlbiBjdWFscXVpZXJcbiAgICAgICAgICAgICAgICAgIG1vbWVudG8geSA8Yj5HQVJBTlTDjUEgZGUgMTAwIGTDrWFzLjwvYj5cbiAgICAgICAgICAgICAgICA8L1RleHRvPlxuICAgICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgICAgPC9JbmZvPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvc2VydmljaW8tcG9saXphLXJlcGFyYWNpb24ud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUmVwYXJhY2lvbiBkZSBIYW5kaGVsZCwgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlcGFyYWNpb247XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("section", {
    id: "reparacion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 112,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Fondo, {
    className: "mt-5",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 113,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Titulo, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 114,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TituloTexto, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 115,
      columnNumber: 13
    }
  }, "Reparaci\xF3n de Equipo")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Contenedor, {
    className: "mt-5",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 117,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Info, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 118,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TexTiDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 119,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texti, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 120,
      columnNumber: 17
    }
  }, "P\xD3LIZAS DE SERVICIO")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TextoDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 122,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texto, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 123,
      columnNumber: 17
    }
  }, "Contamos con p\xF3lizas anuales de reparaci\xF3n integral para sus handhelds e impresoras de etiquetas, que consideran reparar sus equipos en pocos d\xEDas o incluso el mismo, por da\xF1os causados por uso normal y sobre todo \xA1Por accidentes! Las p\xF3lizas aseguran la r\xE1pida rehabilitaci\xF3n de sus equipos y la continuidad de su operaci\xF3n, evitando las p\xE9rdidas que representa tenerlos fuera de uso. \xA1Nuestras p\xF3lizas incluyen mantenimientos preventivos sin costo adicional! Adem\xE1s, las puede cancelar en cualquier momento y \xA1Sin penalizaciones!", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 133,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TexTiDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 136,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texti, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 137,
      columnNumber: 17
    }
  }, "REPARACI\xD3N POR EVENTO \xDANICO")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TextoDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 139,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texto, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 140,
      columnNumber: 17
    }
  }, "Si no cuenta con una p\xF3liza de reparaci\xF3n, sabemos que usted necesita que sus handhelds, lectores de c\xF3digos de barras e impresoras de etiquetas, se rehabiliten r\xE1pidamente, sin tr\xE1mites engorrosos, as\xED que brindamos primero repararlos y despu\xE9s realizar los tr\xE1mites de pago. \xA1Sin costo por diagn\xF3stico y con atenci\xF3n en sitio!", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 146,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 147,
      columnNumber: 19
    }
  }), "Aun sin p\xF3liza de servicio, los tiempos de diagn\xF3stico son de 2 d\xEDas y los tiempos de reparaci\xF3n de 3 d\xEDas, con entrega sin costo. Tambi\xE9n en caso de ser necesario, contamos con servicio de recolecci\xF3n y reparaci\xF3n en sitio sin cargo adicional dentro del \xE1rea metropolitana de la Ciudad de M\xE9xico. Adem\xE1s, lo respaldamos con soporte t\xE9cnico telef\xF3nico en cualquier momento y ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("b", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 154,
      columnNumber: 29
    }
  }, "GARANT\xCDA de 100 d\xEDas.")))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(ImagenDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 158,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Imagen, {
    src: "/img/servicio-poliza-reparacion.webp",
    alt: "Reparacion de Handheld, Impresoras de Etiquetas y Lectores de codigo de barras",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 159,
      columnNumber: 15
    }
  }))))));
};

/* harmony default export */ __webpack_exports__["default"] = (Reparacion);

/***/ }),

/***/ "./components/layout/Servicios.js":
/*!****************************************!*\
  !*** ./components/layout/Servicios.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/head */ "next/head");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @fortawesome/react-fontawesome */ "@fortawesome/react-fontawesome");
/* harmony import */ var _fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ "@fortawesome/free-solid-svg-icons");
/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-bootstrap */ "react-bootstrap");
/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_7__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\Servicios.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }









const Servicios = () => {
  const Servicios = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "eopc5ll14",
    label: "Servicios"
  })(false ? undefined : {
    name: "hltamm",
    styles: "margin-top:2rem",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const ServiciosDif = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "eopc5ll13",
    label: "ServiciosDif"
  })(false ? undefined : {
    name: "18ko2av",
    styles: "text-align:center;font-size:18px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Eslogan = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "eopc5ll12",
    label: "Eslogan"
  })(false ? undefined : {
    name: "1oq9yjh",
    styles: "font-weight:bold;font-size:25px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Sello = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "eopc5ll11",
    label: "Sello"
  })(false ? undefined : {
    name: "1l9ozfu",
    styles: "width:100%;margin-bottom:3.5rem;display:flex;justify-content:space-around;text-align:center",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const IMG = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "eopc5ll10",
    label: "IMG"
  })(false ? undefined : {
    name: "1g4rrwk",
    styles: "width:35%;@media (max-width: 650px){width:60%;}@media (max-width: 410px){width:70%;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const IMGDSD = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "eopc5ll9",
    label: "IMGDSD"
  })(false ? undefined : {
    name: "1a529y1",
    styles: "width:30%;cursor:pointer;@media (max-width: 650px){width:60%;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const IMGID = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "eopc5ll8",
    label: "IMGID"
  })(false ? undefined : {
    name: "1a529y1",
    styles: "width:30%;cursor:pointer;@media (max-width: 650px){width:60%;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFNlcnZpY2lvcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxRDBCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFNlcnZpY2lvcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5pbXBvcnQgSGVhZCBmcm9tIFwibmV4dC9oZWFkXCI7XG5pbXBvcnQgTGluayBmcm9tIFwibmV4dC9saW5rXCI7XG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tIFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCI7XG5pbXBvcnQgeyBmYUNoZWNrQ2lyY2xlIH0gZnJvbSBcIkBmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29uc1wiO1xuXG5pbXBvcnQgeyBNb2RhbCwgQnV0dG9uLCBDYXJvdXNlbCB9IGZyb20gXCJyZWFjdC1ib290c3RyYXBcIjtcblxuY29uc3QgU2VydmljaW9zID0gKCkgPT4ge1xuICBjb25zdCBTZXJ2aWNpb3MgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDJyZW07XG4gIGA7XG5cbiAgY29uc3QgU2VydmljaW9zRGlmID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICBgO1xuXG4gIGNvbnN0IEVzbG9nYW4gPSBzdHlsZWQucGBcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDI1cHg7XG4gIGA7XG5cbiAgY29uc3QgU2VsbG8gPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1ib3R0b206IDMuNXJlbTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgYDtcblxuICBjb25zdCBJTUcgPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiAzNSU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjUwcHgpIHtcbiAgICAgIHdpZHRoOiA2MCU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDQxMHB4KSB7XG4gICAgICB3aWR0aDogNzAlO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJTUdEU0QgPSBzdHlsZWQuaW1nYFxuICAgIHdpZHRoOiAzMCU7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KSB7XG4gICAgICB3aWR0aDogNjAlO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJTUdJRCA9IHN0eWxlZC5pbWdgXG4gICAgd2lkdGg6IDMwJTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjUwcHgpIHtcbiAgICAgIHdpZHRoOiA2MCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFJSViA9IHN0eWxlZC5kaXZgXG4gICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW46IGF1dG87XG4gICAgLy9ib3JkZXI6IDFweCBzb2xpZCByZWQ7XG4gIGA7XG5cbiAgY29uc3QgQ2FyZCA9IHN0eWxlZC5kaXZgXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICB3aWR0aDogMjAlO1xuXG4gICAgbWFyZ2luOiBhdXRvO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE0MDlweCkge1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDMuNXJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgQ2FyZEltZyA9IHN0eWxlZC5pbWdgXG4gICAgYm94LXNoYWRvdzogMHB4IDFweCA1cHggYmxhY2s7XG4gICAgYm9yZGVyLXJhZGl1czogMXJlbSAhaW1wb3J0YW50O1xuICAgIHdpZHRoOiA3MCU7XG4gICAgbWF4LWhlaWdodDogMTYwcHg7XG4gIGA7XG5cbiAgY29uc3QgQ2FyZFRpdHVsbyA9IHN0eWxlZC5oNWBcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgZm9udC1zaXplOiAyNnB4O1xuICBgO1xuXG4gIGNvbnN0IENhcmRUZXh0byA9IHN0eWxlZC5wYFxuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE0MDlweCkge1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgcGFkZGluZzogNXB4O1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTJweCkge1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1ODVweCkge1xuICAgICAgZm9udC1zaXplOiAxNXB4O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJbmZvcm1hY2lvbiA9IHN0eWxlZC5hYFxuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgYDtcblxuICBjb25zdCBUZXh0RGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNDAlO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTQwMHB4KSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTYwcHgpIHtcbiAgICAgIHdpZHRoOiA3MCU7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDYzNHB4KSB7XG4gICAgICB3aWR0aDogNjAlO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xuICAgICAgd2lkdGg6IDc1JTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dCA9IHN0eWxlZC5wYFxuICAgIGZvbnQtc2l6ZTogMTlweDtcbiAgICBmb250LXdlaWdodDogYm9sZDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5NjBweCkge1xuICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4OTlweCkge1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2OTlweCkge1xuICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xuICAgICAgZm9udC1zaXplOiAxMHB4O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBbYWJpZXJ0b01vZGFsLCBjYW1iaWFyQWJpZXJ0b01vZGFsXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2FiaWVydG9Nb2RhbEQsIGNhbWJpYXJBYmllcnRvTW9kYWxEXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2FiaWVydG9Nb2RhbEUsIGNhbWJpYXJBYmllcnRvTW9kYWxFXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2FiaWVydG9Nb2RhbFRnLCBjYW1iaWFyQWJpZXJ0b01vZGFsVGddID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGFicmlyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9Nb2RhbCh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBjZXJyYXJNb2RhbCA9ICgpID0+IHtcbiAgICBjYW1iaWFyQWJpZXJ0b01vZGFsKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCBhYnJpck1vZGFsRCA9ICgpID0+IHtcbiAgICBjYW1iaWFyQWJpZXJ0b01vZGFsRCh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBjZXJyYXJNb2RhbEQgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9Nb2RhbEQoZmFsc2UpO1xuICB9O1xuXG4gIGNvbnN0IGFicmlyTW9kYWxFID0gKCkgPT4ge1xuICAgIGNhbWJpYXJBYmllcnRvTW9kYWxFKHRydWUpO1xuICB9O1xuXG4gIGNvbnN0IGNlcnJhck1vZGFsRSA9ICgpID0+IHtcbiAgICBjYW1iaWFyQWJpZXJ0b01vZGFsRShmYWxzZSk7XG4gIH07XG5cbiAgY29uc3QgYWJyaXJNb2RhbFRnID0gKCkgPT4ge1xuICAgIGNhbWJpYXJBYmllcnRvTW9kYWxUZyh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBjZXJyYXJNb2RhbFRnID0gKCkgPT4ge1xuICAgIGNhbWJpYXJBYmllcnRvTW9kYWxUZyhmYWxzZSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEhlYWQ+XG4gICAgICAgIDxsaW5rXG4gICAgICAgICAgcmVsPVwic3R5bGVzaGVldCBwcmVsb2FkXCJcbiAgICAgICAgICBhcz1cInN0eWxlXCJcbiAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9ib290c3RyYXBANC42LjAvZGlzdC9jc3MvYm9vdHN0cmFwLm1pbi5jc3NcIlxuICAgICAgICAgIGludGVncml0eT1cInNoYTM4NC1CMHZQNXhtQVR3MStLOUtSUWpRRVJKdlR1bVFXMG5QRXp2RjZML1o2bnJvbkozb1VPRlVGcENqRVVRb3VxMitsXCJcbiAgICAgICAgICBjcm9zc29yaWdpbj1cImFub255bW91c1wiXG4gICAgICAgIC8+XG4gICAgICA8L0hlYWQ+XG4gICAgICA8c2VjdGlvbj5cbiAgICAgICAgPFNlcnZpY2lvcz5cbiAgICAgICAgICA8U2VydmljaW9zRGlmPlxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgIEhhbmQgSGVsZCBTb2x1dGlvbnMgY3VlbnRhIGNvbiBhw7FvcyBkZSBleHBlcmllbmNpYSBvZnJlY2llbmRvIGxvc1xuICAgICAgICAgICAgICBzZXJ2aWNpb3MgZGUgcmVudGEsIHJlcGFyYWNpw7NuIHkgdmVudGEgZGUgSGFuZCBIZWxkwrRzLCBsZWN0b3JlcyBkZVxuICAgICAgICAgICAgICBjw7NkaWdvcyAxRCB5IDJELCBpbXByZXNvcmFzIGluZHVzdHJpYWxlcywgZGUgZXNjcml0b3JpbyB5XG4gICAgICAgICAgICAgIHBvcnTDoXRpbGVzLiBDb250YW1vcyBjb24gbG9zIGFjY2Vzb3Jpb3MgeSBjb25zdW1pYmxlcyBhZGVjdWFkb3NcbiAgICAgICAgICAgICAgcGFyYSBjYWRhIGVxdWlwby5cbiAgICAgICAgICAgICAgPGJyIC8+ICBcbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgIDxTZWxsbz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpZHNkIG10b29wXCI+XG4gICAgICAgICAgICAgICAgPElNR0RTRFxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9pY29ub2RzZC53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cImdhcmFudGkgaGFuZCBoZWxkXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2FicmlyTW9kYWx9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8VGV4dERpdj5cbiAgICAgICAgICAgICAgICAgIDxUZXh0PkNvbm96Y2EgbnVlc3RyYSBcIlNvbHVjacOzbiBEU0RcIiBwYXJhIHZlbnRhIGVuIHJ1dGE8L1RleHQ+XG4gICAgICAgICAgICAgICAgPC9UZXh0RGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpZHNkIG10b29wXCI+XG4gICAgICAgICAgICAgICAgPElNR0RTRFxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9pbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcy53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cImdhcmFudGkgaGFuZCBoZWxkXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2FicmlyTW9kYWxFfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPFRleHREaXY+XG4gICAgICAgICAgICAgICAgICA8VGV4dD5JbXByZXNpb24gZGUgQ3JlZGVuY2lhbGVzPC9UZXh0PlxuICAgICAgICAgICAgICAgIDwvVGV4dERpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgey8qIElDT05PIEdBUkFOVElBXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaWRzZFwiPlxuICAgICAgICAgICAgICAgIDxJTUcgc3JjPVwiL2ltZy9zZWxsb2dhcmFudGlhLndlYnBcIiBhbHQ9XCJnYXJhbnRpIGhhbmQgaGVsZFwiIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICovfVxuXG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaWRzZCBtdG9vcFwiPlxuICAgICAgICAgICAgICAgIDxJTUdEU0RcbiAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvSWNvbm9fZXRpcXVldGFzLndlYnBcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiZ2FyYW50aSBoYW5kIGhlbGRcIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17YWJyaXJNb2RhbFRnfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPFRleHREaXY+XG4gICAgICAgICAgICAgICAgICA8VGV4dD5JbXByZXNpb24gZGUgRXRpcXVldGFzPC9UZXh0PlxuICAgICAgICAgICAgICAgIDwvVGV4dERpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlkc2QgbXRvb3BcIj5cbiAgICAgICAgICAgICAgICA8SU1HSURcbiAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvZnVuZGEud2VicFwiXG4gICAgICAgICAgICAgICAgICBhbHQ9XCJnYXJhbnRpIGhhbmQgaGVsZFwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXthYnJpck1vZGFsRH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxUZXh0RGl2PlxuICAgICAgICAgICAgICAgICAgPFRleHQ+VmVudGEgZGUgZnVuZGFzPC9UZXh0PlxuICAgICAgICAgICAgICAgIDwvVGV4dERpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L1NlbGxvPlxuICAgICAgICAgICAgPEVzbG9nYW4+wqFGw4FDSUwsIFLDgVBJRE8gWSBGTEVYSUJMRSE8L0VzbG9nYW4+XG4gICAgICAgICAgPC9TZXJ2aWNpb3NEaWY+XG4gICAgICAgICAgPFJSViBjbGFzc05hbWU9XCIgbXQtNVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkZHNcIj5cbiAgICAgICAgICAgICAgPENhcmQgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8Q2FyZEltZ1xuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9SZW50YSBoYW5kaGVsZCBsZWN0b3IgZGUgY29kaWdvcy53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIlJlbnRhIGRlIEhhbmQgSGVsZCBJbXByZXNvcmFzIGRlIEV0aXF1ZXRhcyB5IExlY3RvcmVzIGRlIGNvZGlnbyBkZSBiYXJyYXNcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPENhcmRUaXR1bG8gY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgcHQtMlwiPlxuICAgICAgICAgICAgICAgICAgUmVudGEgZGUgZXF1aXBvXG4gICAgICAgICAgICAgICAgPC9DYXJkVGl0dWxvPlxuICAgICAgICAgICAgICAgIDxDYXJkVGV4dG8gY2xhc3NOYW1lPVwicHQtM1wiPlxuICAgICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNoZWNrQ2lyY2xlfSAvPlxuICAgICAgICAgICAgICAgICAgwqFQcmltZXJvIHRlbmRyw6EgZWwgZXF1aXBvIGVuIG9wZXJhY2nDs24geSBkZXNwdcOpcyByZWFsaXphcsOhIGVsXG4gICAgICAgICAgICAgICAgICBwYWdvISA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNoZWNrQ2lyY2xlfSAvPiDCoVNpbiBkZXDDs3NpdG8gaW5pY2lhbFxuICAgICAgICAgICAgICAgICAgZSBpbmNsdXllIHRvZG9zIGxvcyBhY2Nlc29yaW9zIG5lY2VzYXJpb3MhIDxiciAvPlxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2hlY2tDaXJjbGV9IC8+IMKhUmVwYXJhY2lvbmVzIHBvciB1c29cbiAgICAgICAgICAgICAgICAgIG5vcm1hbCB5IGFjY2lkZW50ZXMgc2luIGNvc3RvIGFkaWNpb25hbCEgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFDaGVja0NpcmNsZX0gLz4gwqFQdWVkZSBjYW5jZWxhciBlblxuICAgICAgICAgICAgICAgICAgY3VhbHF1aWVyIG1vbWVudG8geSBzaW4gcGVuYWxpemFjacOzbiEgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFDaGVja0NpcmNsZX0gLz4gwqFSZW50YSBkZSBoYW5kaGVsZHMsIGxlY3RvcmVzIGRlIGPDs2RpZ29zIGRlIGJhcnJhcyxcbiAgICAgICAgICAgICAgICAgIGltcHJlc29yYXMgZGUgZXRpcXVldGFzIHkgY3JlZGVuY2lhbGVzISA8YnIgLz5cbiAgICAgICAgICAgICAgICA8L0NhcmRUZXh0bz5cbiAgICAgICAgICAgICAgICA8SW5mb3JtYWNpb25cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeSBidG4tbGcgbXQtMyBtaW1cIlxuICAgICAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICBocmVmPVwiI3JlbnRhXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICBNw6FzIEluZm9ybWFjacOzblxuICAgICAgICAgICAgICAgIDwvSW5mb3JtYWNpb24+XG4gICAgICAgICAgICAgIDwvQ2FyZD5cblxuICAgICAgICAgICAgICA8Q2FyZCBjbGFzc05hbWU9XCIgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8Q2FyZEltZ1xuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9SZXBhcmFjaW9uIGhhbmRoZWxkIGxlY3RvciBkZSBjb2RpZ29zLndlYnBcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiUmVwYXJhY2lvbiBkZSBIYW5kIEhlbGQgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxDYXJkVGl0dWxvIGNsYXNzTmFtZT1cInRleHQtY2VudGVyIHB0LTJcIj5cbiAgICAgICAgICAgICAgICAgIFJlcGFyYWNpw7NuIGRlIGVxdWlwb1xuICAgICAgICAgICAgICAgIDwvQ2FyZFRpdHVsbz5cbiAgICAgICAgICAgICAgICA8Q2FyZFRleHRvIGNsYXNzTmFtZT1cInB0LTNcIj5cbiAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFDaGVja0NpcmNsZX0gLz4gwqFEaWFnbsOzc3RpY28gc2luXG4gICAgICAgICAgICAgICAgICBjb3N0byB5IHJlcGFyYWNpb25lcyBlbiB0cmVzIGTDrWFzIVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFDaGVja0NpcmNsZX0gLz4gwqFQcmltZXJvIGxlIHJlcGFyYW1vc1xuICAgICAgICAgICAgICAgICAgeSBlbnRyZWdhbW9zIHN1IGVxdWlwbyB5IGRlc3B1w6lzIHJlYWxpemEgZWwgcGFnbyEgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFDaGVja0NpcmNsZX0gLz4gwqFSZXBhcmFjacOzblxuICAgICAgICAgICAgICAgICAgZW4gc3VzIGluc3RhbGFjaW9uZXMgc2luIGNvc3RvIGFkaWNpb25hbCEgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFDaGVja0NpcmNsZX0gLz4gwqFOdWVzdHJhc1xuICAgICAgICAgICAgICAgICAgcmVwYXJhY2lvbmVzIGN1ZW50YSBjb24gZ2FyYW50w61hIDEwMCEgKDEwMCBkw61hcyBkZSBnYXJhbnTDrWEpIVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFDaGVja0NpcmNsZX0gLz4gwqFTb3BvcnRlIHTDqWNuaWNvIGVuIHNpdGlvLCBzaW4gY29zdG8sIFxuICAgICAgICAgICAgICAgICAgZGVudHJvIGRlbCDDoXJlYSBtZXRyb3BvbGl0YW5hISA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNoZWNrQ2lyY2xlfSAvPiDCoVJlcGFyYWNpw7NuIGRlIGhhbmRoZWxkcywgbGVjdG9yZXMgZGUgY8OzZGlnb3MgZGUgYmFycmFzLFxuICAgICAgICAgICAgICAgICAgaW1wcmVzb3JhcyBkZSBldGlxdWV0YXMgeSBjcmVkZW5jaWFsZXMhIDxiciAvPlxuICAgICAgICAgICAgICAgIDwvQ2FyZFRleHRvPlxuICAgICAgICAgICAgICAgIDxJbmZvcm1hY2lvblxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1sZyBtdC0zIG1pbVwiXG4gICAgICAgICAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCIjcmVwYXJhY2lvblwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgTcOhcyBJbmZvcm1hY2nDs25cbiAgICAgICAgICAgICAgICA8L0luZm9ybWFjaW9uPlxuICAgICAgICAgICAgICA8L0NhcmQ+XG5cbiAgICAgICAgICAgICAgPENhcmQgY2xhc3NOYW1lPVwiIHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgPENhcmRJbWdcbiAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvVmVudGEgaGFuZGhlbGQgbGVjdG9yIGRlIGPDs2RpZ29zLndlYnBcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiVmVudGEgZGUgSGFuZCBIZWxkIEltcHJlc29yYXMgZGUgRXRpcXVldGFzIHkgTGVjdG9yZXMgZGUgY29kaWdvIGRlIGJhcnJhc1wiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8Q2FyZFRpdHVsbyBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciBwdC0yXCI+XG4gICAgICAgICAgICAgICAgICBWZW50YSBkZSBlcXVpcG9cbiAgICAgICAgICAgICAgICA8L0NhcmRUaXR1bG8+XG4gICAgICAgICAgICAgICAgPENhcmRUZXh0byBjbGFzc05hbWU9XCJwdC0zXCI+XG4gICAgICAgICAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQ2hlY2tDaXJjbGV9IC8+IMKhTG9zIG1lam9yZXMgcHJlY2lvcyxcbiAgICAgICAgICAgICAgICAgIGNyw6lkaXRvIHkgcGxhbmVzIGRlIGZpbmFuY2lhbWllbnRvISA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNoZWNrQ2lyY2xlfSAvPiDCoUVxdWlwbyBkZW1vIHNpblxuICAgICAgICAgICAgICAgICAgY29zdG8gcGFyYSBwcnVlYmFzIGVuIHN1cyBpbnN0YWxhY2lvbmVzISA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgPEZvbnRBd2Vzb21lSWNvbiBpY29uPXtmYUNoZWNrQ2lyY2xlfSAvPiDCoVNlZ3VpbWllbnRvIGhvbWJybyBhXG4gICAgICAgICAgICAgICAgICBob21icm8gZHVyYW50ZSBwcnVlYmFzIGUgaW1wbGVtZW50YWNpb25lcyEgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFDaGVja0NpcmNsZX0gLz4gwqFTb3BvcnRlIHTDqWNuaWNvXG4gICAgICAgICAgICAgICAgICBwcmV2ZW50YSB5IHBvc3R2ZW50YSBjb24gbMOtbmVhIGRpcmVjdGEgbGFzIDI0IGhvcmFzIVxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgIDxGb250QXdlc29tZUljb24gaWNvbj17ZmFDaGVja0NpcmNsZX0gLz4gwqFWZW50YSBkZSBoYW5kaGVsZHMsIGxlY3RvcmVzIGRlIGPDs2RpZ29zIGRlIGJhcnJhcyxcbiAgICAgICAgICAgICAgICAgIGltcHJlc29yYXMgZGUgZXRpcXVldGFzIHkgY3JlZGVuY2lhbGVzISA8YnIgLz5cbiAgICAgICAgICAgICAgICA8L0NhcmRUZXh0bz5cbiAgICAgICAgICAgICAgICA8SW5mb3JtYWNpb25cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeSBidG4tbGcgbXQtMyBtaW1cIlxuICAgICAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICBocmVmPVwiI3ZlbnRhXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICBNw6FzIEluZm9ybWFjacOzblxuICAgICAgICAgICAgICAgIDwvSW5mb3JtYWNpb24+XG4gICAgICAgICAgICAgIDwvQ2FyZD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvUlJWPlxuICAgICAgICA8L1NlcnZpY2lvcz5cbiAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgPE1vZGFsXG4gICAgICAgIHNob3c9e2FiaWVydG9Nb2RhbH1cbiAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbH1cbiAgICAgICAga2V5Ym9hcmQ9e2ZhbHNlfVxuICAgICAgICBzaXplPVwibGdcIlxuICAgICAgICBjbGFzc05hbWU9XCJtb2RhbC1hbHR1cmFcIlxuICAgICAgPlxuICAgICAgICA8TW9kYWwuSGVhZGVyIGNsb3NlQnV0dG9uPlxuICAgICAgICAgIDxNb2RhbC5UaXRsZT5cbiAgICAgICAgICAgIENvbm96Y2EgbnVlc3RyYSBcIlNvbHVjacOzbiBEU0RcIiBwYXJhIHZlbnRhIGVuIHJ1dGFcbiAgICAgICAgICA8L01vZGFsLlRpdGxlPlxuICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgQWRxdWllcmEgbGEgXCJTb2x1Y2nDs24gRFNEXCIgcGFyYSB2ZW50YSBlbiBydXRhLiBIZXJyYW1pZW50YSB0ZWNub2zDs2dpY2FcbiAgICAgICAgICBxdWUgbGUgcGVybWl0aXLDoSBhZG1pbmlzdHJhciBzdXMgdmlzaXRhcywgdGllbXBvcyBkZSBlbnRyZWdhIGVcbiAgICAgICAgICBpbnZlbnRhcmlvIGVuIHRvZG8gbW9tZW50byBkZSBsYSBydXRhLiBDb250cm9sZSBhIHN1IGZ1ZXJ6YSBkZSB2ZW50YXNcbiAgICAgICAgICB5IG1vbml0b3JlZSBzdSBkZXNlbXBlw7FvIGNvbiBudWVzdHJhIGFwbGljYWNpw7NuIFwiRGlyZWN0IFN0b3JlXG4gICAgICAgICAgRGVsaXZlcnlcIi4gSW1wbGVtZW50ZSBlbCBzb2Z0d2FyZSBxdWUgY3VtcGxpcsOhIGNvbiBzdXMgbmVjZXNpZGFkZXMgeVxuICAgICAgICAgIGRpc3BvbmdhIHNpbiBjb3N0byBhZGljaW9uYWwgZGUgbGEgcmVudGEgZGUgdW5hIGhhbmRoZWxkIGUgaW1wcmVzb3JhXG4gICAgICAgICAgcG9ydMOhdGlsLlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm90bW9kYWxcIj5cbiAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvRFNELXZlbnRhLWVuLXJ1dGFcIj5cbiAgICAgICAgICAgICAgPEJ1dHRvbiBjb2xvcj1cInByaW1hcnlcIiB3LTUwPlxuICAgICAgICAgICAgICAgIMKhQ29ub3pjYWxvIVxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImxpZ2h0XCIgb25DbGljaz17Y2VycmFyTW9kYWx9PlxuICAgICAgICAgICAgQ2VycmFyXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgICAgPC9Nb2RhbD5cbiAgICAgIDxNb2RhbFxuICAgICAgICBzaG93PXthYmllcnRvTW9kYWxEfVxuICAgICAgICBvbkhpZGU9e2NlcnJhck1vZGFsRH1cbiAgICAgICAga2V5Ym9hcmQ9e2ZhbHNlfVxuICAgICAgICBzaXplPVwibGdcIlxuICAgICAgICBjbGFzc05hbWU9XCJtb2RhbC1hbHR1cmFcIlxuICAgICAgPlxuICAgICAgICA8TW9kYWwuSGVhZGVyIGNsb3NlQnV0dG9uPlxuICAgICAgICAgIDxNb2RhbC5UaXRsZT5WZW50YSBkZSBmdW5kYXM8L01vZGFsLlRpdGxlPlxuICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgRmFicmljYW1vcyBsYXMgbWVqb3JlcyBmdW5kYXMgZGVsIG1lcmNhZG8sIGRpc2XDsWFkYXMgcGFyYSBjdWJyaXIgc3VzXG4gICAgICAgICAgbmVjZXNpZGFkZXMuIEFkcXVpZXJhIGxhIHByb3RlY2Npw7NuIHF1ZSBzdXMgZXF1aXBvcyBuZWNlc2l0YW4uIERpc2XDsW9zXG4gICAgICAgICAgZGUgbGEgbWVqb3IgY2FsaWRhZCwgaGVjaG9zIGNvbiBtYXRlcmlhbGVzIGRlIHByaW1lcmEuIEZ1bmRhc1xuICAgICAgICAgIGZhYnJpY2FkYXMgYSBsYXMgbWVkaWRhcyBkZSBkaWZlcmVudGVzIG1hcmNhcyB5IG1vZGVsb3MsIHByb3RlY2Npw7NuXG4gICAgICAgICAgaW5kaXNwZW5zYWJsZSBxdWUgYXl1ZGFyw6EgYSBzdXMgZXF1aXBvcyBhIHNvcG9ydGFyIGNhw61kYXMgbyBkYcOxb3NcbiAgICAgICAgICBhY2NpZGVudGFsZXMuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJib3Rtb2RhbFwiPlxuICAgICAgICAgICAgPExpbmsgaHJlZj1cIi92ZW50YS1mdW5kYXMtaGFuZGhlbGQtaW1wcmVzb3JhLXBvcnRhdGlsXCI+XG4gICAgICAgICAgICAgIDxCdXR0b24gY29sb3I9XCJwcmltYXJ5XCIgdy01MD5cbiAgICAgICAgICAgICAgICDCoUFkcXVpZXJhIGxhcyBmdW5kYXMgcXVlIG5lY2VzaXRlIVxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImxpZ2h0XCIgb25DbGljaz17Y2VycmFyTW9kYWxEfT5cbiAgICAgICAgICAgIENlcnJhclxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L01vZGFsLkZvb3Rlcj5cbiAgICAgIDwvTW9kYWw+XG4gICAgICA8TW9kYWxcbiAgICAgICAgc2hvdz17YWJpZXJ0b01vZGFsVGd9XG4gICAgICAgIG9uSGlkZT17Y2VycmFyTW9kYWxUZ31cbiAgICAgICAga2V5Ym9hcmQ9e2ZhbHNlfVxuICAgICAgICBzaXplPVwibGdcIlxuICAgICAgICBjbGFzc05hbWU9XCJtb2RhbC1hbHR1cmFcIlxuICAgICAgPlxuICAgICAgICA8TW9kYWwuSGVhZGVyIGNsb3NlQnV0dG9uPlxuICAgICAgICAgIDxNb2RhbC5UaXRsZT5cbiAgICAgICAgICAgIENvbm96Y2EgbnVlc3RybyBzZXJ2aWNpbyBwYXJhIGxhIEltcHJlc2lvbiBkZSBFdGlxdWV0YXNcbiAgICAgICAgICA8L01vZGFsLlRpdGxlPlxuICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgIFNvbW9zIGVzcGVjaWFsaXN0YXMgZW4gbGEgaW1wcmVzacOzbiBkZSBldGlxdWV0YXMuIEltcHJlc2nDs24gdMOpcm1pY28gZGlyZWN0byB5IHRyYW5zZmVyZW5jaWEgdMOpcm1pY2EuIEltcHJlc2nDs24gZGUgZXRpcXVldGFzIGVuIHBvbGlvbGVmaW5hLCBwb2xpcHJvcGlsZW5vLCBwb2xpw6lzdGVyLCBwb2xpYW1pZGEgeSBwYXBlbC4gSW1wcmVzacOzbiBkZSBldGlxdWV0YXMgcGFyYSBlbCBzZWN0b3IgYXV0b21vdHJpeiwgbWFudWZhY3R1cmEsIHNhbHVkLCB0ZXh0aWwsIGNvbnRyb2wgZGUgcHJvZHVjdG9zIHkgbcOhcy4gSW1wcmVzacOzbiBkZSBldGlxdWV0YXMgY29uIGFkaGVzaXZvcyBwZXJtYW5lbnRlcywgcmVtb3ZpYmxlcyB5IGRlIGFsdGEgYWRoZXJlbmNpYS4gSW1wcmVzacOzbiBkZSBldGlxdWV0YXMgY2FwYWNlcyBkZSByZXNpc3RpciBiYWphcyB5IGFsdGFzIHRlbXBlcmF0dXJhcy5cbiDCoUxsYW1lIGFob3JhLCBhc2lzdGVuY2lhIGlubWVkaWF0YSEgXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJib3Rtb2RhbFwiPlxuICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9pbXByZXNpb24tZXRpcXVldGFzXCI+XG4gICAgICAgICAgICAgIDxCdXR0b24gY29sb3I9XCJwcmltYXJ5XCIgdy01MD5cbiAgICAgICAgICAgICAgwqFJbXByaW1hIGxhcyBldGlxdWV0YXMgcXVlIG5lY2VzaXRlIVxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImxpZ2h0XCIgb25DbGljaz17Y2VycmFyTW9kYWxUZ30+XG4gICAgICAgICAgICBDZXJyYXJcbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICA8L01vZGFsPlxuXG4gICAgICA8TW9kYWxcbiAgICAgICAgc2hvdz17YWJpZXJ0b01vZGFsRX1cbiAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbEV9XG4gICAgICAgIGtleWJvYXJkPXtmYWxzZX1cbiAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgY2xhc3NOYW1lPVwibW9kYWwtYWx0dXJhXCJcbiAgICAgID5cbiAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cbiAgICAgICAgICA8TW9kYWwuVGl0bGU+SW1wcmVzaW9uIGRlIGNyZWRlbmNpYWxlczwvTW9kYWwuVGl0bGU+XG4gICAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgICA8TW9kYWwuQm9keT5cbiAgICAgICAgU29tb3MgZXNwZWNpYWxpc3RhcyBlbiBsYSBlbGFib3JhY2nDs24sIGRpc2XDsW8gZSBpbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcy4gXG4gICAgICAgIENvbnRhbW9zIGNvbiB0ZWNub2xvZ8OtYSBhdmFuemFkYSBwYXJhIGltcHJpbWlyIHRhcmpldGFzIGNvbiBtYXRlcmlhbGVzIGFsdGFtZW50ZSByZXNpc3RlbnRlcyB5IGR1cmFkZXJvcywgXG4gICAgICAgIHF1ZSBsZSBkYW4gYSBjYWRhIGNyZWRlbmNpYWwgdW5hIGxhcmdhIHZpZGEgZGUgdXNvLiBJbXByZXNpw7NuIGVuIFBWQywgUEVUIHkgcG9saWNhcmJvbmF0by4gXG4gICAgICAgIEltcHJlc2nDs24gZGUgZ2FmZXRlcyBjb24gaG9sb2dyYW1hIGRlIHNlZ3VyaWRhZCBwYXJhIGV2aXRhciBmYWxzaWZpY2FjaW9uZXMgeSBwcmV2ZW5pciBkZXNnYXN0ZXMgbyBtYWxvcyB1c29zLiBcbiAgICAgICAgQ29udGFtb3MgY29uIGVsIGJlbmVmaWNpbyBkZSBpbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBjb24gdW4gY8OzZGlnbyBRUiBwYXJhIHZhbGlkYXIgZWwgY2VydGlmaWNhZG8gZGUgdmFjdW5hY2nDs24gXG4gICAgICAgIGNvbnRyYSBDT1ZJRC0xOS4gQ3JlZGVuY2lhbGVzIGlkZWFsZXMgcGFyYSBlbXByZXNhcywgaW5zdGl0dWNpb25lcyBlZHVjYXRpdmFzLCBhc29jaWFjaW9uZXMsIGV2ZW50b3MsIHNlZ3VyaWRhZCB5IGNvbnRyb2wgZGUgYWNjZXNvLiBcbiAgICAgICAgQ29udGFtb3MgY29uIGVsIGJlbmVmaWNpbyBkZSBpbXByaW1pciBzdXMgY3JlZGVuY2lhbGVzIGEgZG9taWNpbGlvLiDCoUxsYW1lIHBhcmEgbcOhcyBpbmZvcm1hY2nDs24hXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJib3Rtb2RhbFwiPlxuICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9pbXByZXNpb24tY3JlZGVuY2lhbGVzLXRhcmpldGFzLWdhZmV0ZXMtcHZjXCI+XG4gICAgICAgICAgICAgIDxCdXR0b24gY29sb3I9XCJwcmltYXJ5XCIgdy01MD5cbiAgICAgICAgICAgICAgICDCoUltcHJpbWEgbGFzIGNyZWRlbmNpYWxlcyBxdWUgbmVjZXNpdGUhXG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L01vZGFsLkJvZHk+XG4gICAgICAgIDxNb2RhbC5Gb290ZXI+XG4gICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBvbkNsaWNrPXtjZXJyYXJNb2RhbEV9PlxuICAgICAgICAgICAgQ2VycmFyXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgICAgPC9Nb2RhbD5cblxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VydmljaW9zO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const RRV = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "eopc5ll7",
    label: "RRV"
  })(false ? undefined : {
    name: "1cgrli9",
    styles: "margin-top:2rem;width:100%;margin:auto",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Card = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "eopc5ll6",
    label: "Card"
  })(false ? undefined : {
    name: "1er8lxt",
    styles: "margin-bottom:20px;width:20%;margin:auto;@media (max-width: 1409px){width:80%;}@media (max-width: 900px){margin-bottom:3.5rem;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const CardImg = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "eopc5ll5",
    label: "CardImg"
  })(false ? undefined : {
    name: "1dgczc",
    styles: "box-shadow:0px 1px 5px black;border-radius:1rem!important;width:70%;max-height:160px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const CardTitulo = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("h5", false ? undefined : {
    target: "eopc5ll4",
    label: "CardTitulo"
  })(false ? undefined : {
    name: "cd6lrp",
    styles: "font-weight:bold;margin-top:10px;margin-bottom:10px;font-size:26px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const CardTexto = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "eopc5ll3",
    label: "CardTexto"
  })(false ? undefined : {
    name: "11wtnj2",
    styles: "font-size:16px;text-align:left;@media (max-width: 1409px){text-align:center;padding:5px;}@media (max-width: 992px){text-align:center;}@media (max-width: 585px){font-size:15px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Informacion = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("a", false ? undefined : {
    target: "eopc5ll2",
    label: "Informacion"
  })(false ? undefined : {
    name: "2pg1ps",
    styles: "font-size:18px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const TextDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "eopc5ll1",
    label: "TextDiv"
  })(false ? undefined : {
    name: "iwfa3z",
    styles: "width:40%;margin:0px auto;@media (max-width: 1400px){width:100%;}@media (max-width: 960px){width:70%;}@media (max-width: 634px){width:60%;}@media (max-width: 450px){width:75%;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Text = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "eopc5ll0",
    label: "Text"
  })(false ? undefined : {
    name: "1s06api",
    styles: "font-size:19px;font-weight:bold;@media (max-width: 960px){font-size:16px;}@media (max-width: 899px){font-size:14px;}@media (max-width: 699px){font-size:12px;}@media (max-width: 450px){font-size:10px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const {
    0: abiertoModal,
    1: cambiarAbiertoModal
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const {
    0: abiertoModalD,
    1: cambiarAbiertoModalD
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const {
    0: abiertoModalE,
    1: cambiarAbiertoModalE
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const {
    0: abiertoModalTg,
    1: cambiarAbiertoModalTg
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);

  const abrirModal = () => {
    cambiarAbiertoModal(true);
  };

  const cerrarModal = () => {
    cambiarAbiertoModal(false);
  };

  const abrirModalD = () => {
    cambiarAbiertoModalD(true);
  };

  const cerrarModalD = () => {
    cambiarAbiertoModalD(false);
  };

  const abrirModalE = () => {
    cambiarAbiertoModalE(true);
  };

  const cerrarModalE = () => {
    cambiarAbiertoModalE(false);
  };

  const abrirModalTg = () => {
    cambiarAbiertoModalTg(true);
  };

  const cerrarModalTg = () => {
    cambiarAbiertoModalTg(false);
  };

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(next_head__WEBPACK_IMPORTED_MODULE_2___default.a, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 202,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("link", {
    rel: "stylesheet preload",
    as: "style",
    href: "https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css",
    integrity: "sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l",
    crossorigin: "anonymous",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 203,
      columnNumber: 9
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("section", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 211,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Servicios, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 212,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(ServiciosDif, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 213,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 214,
      columnNumber: 13
    }
  }, "Hand Held Solutions cuenta con a\xF1os de experiencia ofreciendo los servicios de renta, reparaci\xF3n y venta de Hand Held\xB4s, lectores de c\xF3digos 1D y 2D, impresoras industriales, de escritorio y port\xE1tiles. Contamos con los accesorios y consumibles adecuados para cada equipo.", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 220,
      columnNumber: 15
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Sello, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 222,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("div", {
    className: "idsd mtoop",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 223,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(IMGDSD, {
    src: "/img/iconodsd.webp",
    alt: "garanti hand held",
    onClick: abrirModal,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 224,
      columnNumber: 17
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(TextDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 229,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Text, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 230,
      columnNumber: 19
    }
  }, "Conozca nuestra \"Soluci\xF3n DSD\" para venta en ruta"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("div", {
    className: "idsd mtoop",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 233,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(IMGDSD, {
    src: "/img/impresi\xF3n de credenciales.webp",
    alt: "garanti hand held",
    onClick: abrirModalE,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 234,
      columnNumber: 17
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(TextDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 239,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Text, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 240,
      columnNumber: 19
    }
  }, "Impresion de Credenciales"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("div", {
    className: "idsd mtoop",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 252,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(IMGDSD, {
    src: "/img/Icono_etiquetas.webp",
    alt: "garanti hand held",
    onClick: abrirModalTg,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 253,
      columnNumber: 17
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(TextDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 258,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Text, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 259,
      columnNumber: 19
    }
  }, "Impresion de Etiquetas"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("div", {
    className: "idsd mtoop",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 264,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(IMGID, {
    src: "/img/funda.webp",
    alt: "garanti hand held",
    onClick: abrirModalD,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 265,
      columnNumber: 17
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(TextDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 270,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Text, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 271,
      columnNumber: 19
    }
  }, "Venta de fundas")))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Eslogan, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 275,
      columnNumber: 13
    }
  }, "\xA1F\xC1CIL, R\xC1PIDO Y FLEXIBLE!")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(RRV, {
    className: " mt-5",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 277,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("div", {
    className: "cardds",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 278,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Card, {
    className: "text-center",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 279,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(CardImg, {
    src: "/img/Renta handheld lector de codigos.webp",
    alt: "Renta de Hand Held Impresoras de Etiquetas y Lectores de codigo de barras",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 280,
      columnNumber: 17
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(CardTitulo, {
    className: "text-center pt-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 284,
      columnNumber: 17
    }
  }, "Renta de equipo"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(CardTexto, {
    className: "pt-3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 287,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 288,
      columnNumber: 19
    }
  }), "\xA1Primero tendr\xE1 el equipo en operaci\xF3n y despu\xE9s realizar\xE1 el pago! ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 290,
      columnNumber: 25
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 291,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 292,
      columnNumber: 19
    }
  }), " \xA1Sin dep\xF3sito inicial e incluye todos los accesorios necesarios! ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 293,
      columnNumber: 62
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 294,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 295,
      columnNumber: 19
    }
  }), " \xA1Reparaciones por uso normal y accidentes sin costo adicional! ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 296,
      columnNumber: 60
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 297,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 298,
      columnNumber: 19
    }
  }), " \xA1Puede cancelar en cualquier momento y sin penalizaci\xF3n! ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 299,
      columnNumber: 57
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 300,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 301,
      columnNumber: 19
    }
  }), " \xA1Renta de handhelds, lectores de c\xF3digos de barras, impresoras de etiquetas y credenciales! ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 302,
      columnNumber: 59
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Informacion, {
    className: "btn btn-primary btn-lg mt-3 mim",
    role: "button",
    href: "#renta",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 304,
      columnNumber: 17
    }
  }, "M\xE1s Informaci\xF3n")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Card, {
    className: " text-center",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 313,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(CardImg, {
    src: "/img/Reparacion handheld lector de codigos.webp",
    alt: "Reparacion de Hand Held Impresoras de Etiquetas y Lectores de codigo de barras",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 314,
      columnNumber: 17
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(CardTitulo, {
    className: "text-center pt-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 318,
      columnNumber: 17
    }
  }, "Reparaci\xF3n de equipo"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(CardTexto, {
    className: "pt-3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 321,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 322,
      columnNumber: 19
    }
  }), " \xA1Diagn\xF3stico sin costo y reparaciones en tres d\xEDas!", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 324,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 325,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 326,
      columnNumber: 19
    }
  }), " \xA1Primero le reparamos y entregamos su equipo y despu\xE9s realiza el pago! ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 327,
      columnNumber: 69
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 328,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 329,
      columnNumber: 19
    }
  }), " \xA1Reparaci\xF3n en sus instalaciones sin costo adicional! ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 330,
      columnNumber: 61
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 331,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 332,
      columnNumber: 19
    }
  }), " \xA1Nuestras reparaciones cuenta con garant\xEDa 100! (100 d\xEDas de garant\xEDa)!", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 334,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 335,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 336,
      columnNumber: 19
    }
  }), " \xA1Soporte t\xE9cnico en sitio, sin costo, dentro del \xE1rea metropolitana! ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 337,
      columnNumber: 50
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 338,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 339,
      columnNumber: 19
    }
  }), " \xA1Reparaci\xF3n de handhelds, lectores de c\xF3digos de barras, impresoras de etiquetas y credenciales! ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 340,
      columnNumber: 59
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Informacion, {
    className: "btn btn-primary btn-lg mt-3 mim",
    role: "button",
    href: "#reparacion",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 342,
      columnNumber: 17
    }
  }, "M\xE1s Informaci\xF3n")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Card, {
    className: " text-center",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 351,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(CardImg, {
    src: "/img/Venta handheld lector de c\xF3digos.webp",
    alt: "Venta de Hand Held Impresoras de Etiquetas y Lectores de codigo de barras",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 352,
      columnNumber: 17
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(CardTitulo, {
    className: "text-center pt-2",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 356,
      columnNumber: 17
    }
  }, "Venta de equipo"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(CardTexto, {
    className: "pt-3",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 359,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 360,
      columnNumber: 19
    }
  }), " \xA1Los mejores precios, cr\xE9dito y planes de financiamiento! ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 361,
      columnNumber: 55
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 362,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 363,
      columnNumber: 19
    }
  }), " \xA1Equipo demo sin costo para pruebas en sus instalaciones! ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 364,
      columnNumber: 60
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 365,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 366,
      columnNumber: 19
    }
  }), " \xA1Seguimiento hombro a hombro durante pruebas e implementaciones! ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 367,
      columnNumber: 62
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 368,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 369,
      columnNumber: 19
    }
  }), " \xA1Soporte t\xE9cnico preventa y postventa con l\xEDnea directa las 24 horas!", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 371,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 372,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_4__["FontAwesomeIcon"], {
    icon: _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_5__["faCheckCircle"],
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 373,
      columnNumber: 19
    }
  }), " \xA1Venta de handhelds, lectores de c\xF3digos de barras, impresoras de etiquetas y credenciales! ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 374,
      columnNumber: 59
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(Informacion, {
    className: "btn btn-primary btn-lg mt-3 mim",
    role: "button",
    href: "#venta",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 376,
      columnNumber: 17
    }
  }, "M\xE1s Informaci\xF3n")))))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"], {
    show: abiertoModal,
    onHide: cerrarModal,
    keyboard: false,
    size: "lg",
    className: "modal-altura",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 389,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Header, {
    closeButton: true,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 396,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Title, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 397,
      columnNumber: 11
    }
  }, "Conozca nuestra \"Soluci\xF3n DSD\" para venta en ruta")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Body, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 401,
      columnNumber: 9
    }
  }, "Adquiera la \"Soluci\xF3n DSD\" para venta en ruta. Herramienta tecnol\xF3gica que le permitir\xE1 administrar sus visitas, tiempos de entrega e inventario en todo momento de la ruta. Controle a su fuerza de ventas y monitoree su desempe\xF1o con nuestra aplicaci\xF3n \"Direct Store Delivery\". Implemente el software que cumplir\xE1 con sus necesidades y disponga sin costo adicional de la renta de una handheld e impresora port\xE1til.", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("div", {
    className: "botmodal",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 409,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_3___default.a, {
    href: "/DSD-venta-en-ruta",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 410,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Button"], {
    color: "primary",
    "w-50": true,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 411,
      columnNumber: 15
    }
  }, "\xA1Conozcalo!")))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Footer, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 417,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Button"], {
    variant: "light",
    onClick: cerrarModal,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 418,
      columnNumber: 11
    }
  }, "Cerrar"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"], {
    show: abiertoModalD,
    onHide: cerrarModalD,
    keyboard: false,
    size: "lg",
    className: "modal-altura",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 423,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Header, {
    closeButton: true,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 430,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Title, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 431,
      columnNumber: 11
    }
  }, "Venta de fundas")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Body, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 433,
      columnNumber: 9
    }
  }, "Fabricamos las mejores fundas del mercado, dise\xF1adas para cubrir sus necesidades. Adquiera la protecci\xF3n que sus equipos necesitan. Dise\xF1os de la mejor calidad, hechos con materiales de primera. Fundas fabricadas a las medidas de diferentes marcas y modelos, protecci\xF3n indispensable que ayudar\xE1 a sus equipos a soportar ca\xEDdas o da\xF1os accidentales.", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("div", {
    className: "botmodal",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 440,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_3___default.a, {
    href: "/venta-fundas-handheld-impresora-portatil",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 441,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Button"], {
    color: "primary",
    "w-50": true,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 442,
      columnNumber: 15
    }
  }, "\xA1Adquiera las fundas que necesite!")))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Footer, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 448,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Button"], {
    variant: "light",
    onClick: cerrarModalD,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 449,
      columnNumber: 11
    }
  }, "Cerrar"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"], {
    show: abiertoModalTg,
    onHide: cerrarModalTg,
    keyboard: false,
    size: "lg",
    className: "modal-altura",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 454,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Header, {
    closeButton: true,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 461,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Title, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 462,
      columnNumber: 11
    }
  }, "Conozca nuestro servicio para la Impresion de Etiquetas")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Body, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 466,
      columnNumber: 9
    }
  }, "Somos especialistas en la impresi\xF3n de etiquetas. Impresi\xF3n t\xE9rmico directo y transferencia t\xE9rmica. Impresi\xF3n de etiquetas en poliolefina, polipropileno, poli\xE9ster, poliamida y papel. Impresi\xF3n de etiquetas para el sector automotriz, manufactura, salud, textil, control de productos y m\xE1s. Impresi\xF3n de etiquetas con adhesivos permanentes, removibles y de alta adherencia. Impresi\xF3n de etiquetas capaces de resistir bajas y altas temperaturas. \xA1Llame ahora, asistencia inmediata!", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("div", {
    className: "botmodal",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 469,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_3___default.a, {
    href: "/impresion-etiquetas",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 470,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Button"], {
    color: "primary",
    "w-50": true,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 471,
      columnNumber: 15
    }
  }, "\xA1Imprima las etiquetas que necesite!")))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Footer, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 477,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Button"], {
    variant: "light",
    onClick: cerrarModalTg,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 478,
      columnNumber: 11
    }
  }, "Cerrar"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"], {
    show: abiertoModalE,
    onHide: cerrarModalE,
    keyboard: false,
    size: "lg",
    className: "modal-altura",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 484,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Header, {
    closeButton: true,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 491,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Title, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 492,
      columnNumber: 11
    }
  }, "Impresion de credenciales")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Body, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 494,
      columnNumber: 9
    }
  }, "Somos especialistas en la elaboraci\xF3n, dise\xF1o e impresi\xF3n de credenciales. Contamos con tecnolog\xEDa avanzada para imprimir tarjetas con materiales altamente resistentes y duraderos, que le dan a cada credencial una larga vida de uso. Impresi\xF3n en PVC, PET y policarbonato. Impresi\xF3n de gafetes con holograma de seguridad para evitar falsificaciones y prevenir desgastes o malos usos. Contamos con el beneficio de impresi\xF3n de credenciales con un c\xF3digo QR para validar el certificado de vacunaci\xF3n contra COVID-19. Credenciales ideales para empresas, instituciones educativas, asociaciones, eventos, seguridad y control de acceso. Contamos con el beneficio de imprimir sus credenciales a domicilio. \xA1Llame para m\xE1s informaci\xF3n!", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])("div", {
    className: "botmodal",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 502,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_3___default.a, {
    href: "/impresion-credenciales-tarjetas-gafetes-pvc",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 503,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Button"], {
    color: "primary",
    "w-50": true,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 504,
      columnNumber: 15
    }
  }, "\xA1Imprima las credenciales que necesite!")))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Footer, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 510,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_7__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Button"], {
    variant: "light",
    onClick: cerrarModalE,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 511,
      columnNumber: 11
    }
  }, "Cerrar"))));
};

/* harmony default export */ __webpack_exports__["default"] = (Servicios);

/***/ }),

/***/ "./components/layout/Tarjeta.js":
/*!**************************************!*\
  !*** ./components/layout/Tarjeta.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_2__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\Tarjeta.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }




const Tarjeta = () => {
  const FondoBase = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "evw8oqo3",
    label: "FondoBase"
  })(false ? undefined : {
    name: "ppp1hx",
    styles: "width:100%;height:40px;background-color:white;border-top:1px solid black;@media (max-width: 1950px){height:38px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFRhcmpldGEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSThCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFRhcmpldGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgVGFyamV0YSA9ICgpID0+IHtcbiAgY29uc3QgRm9uZG9CYXNlID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIGJsYWNrO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE5NTBweCkge1xuICAgICAgaGVpZ2h0OiAzOHB4O1xuICAgIH1cblxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IGJsYWNrO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBwYWRkaW5nLXRvcDogNXB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE5NTBweCkge1xuICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgcGFkZGluZy10b3A6IDhweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTAwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgIHBhZGRpbmctdG9wOiA3LjVweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgRmxleCA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYDtcblxuICBjb25zdCBJTUcgPSBzdHlsZWQuaW1nYFxuICAgIGhlaWdodDogMzlweCAhaW1wb3J0YW50O1xuICAgIG1hcmdpbi1sZWZ0OiAxNXB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE5NTBweCkge1xuICAgICAgaGVpZ2h0OiAzMHB4ICFpbXBvcnRhbnQ7XG4gICAgICBtYXJnaW4tYm90dG9tOiAwcHg7XG4gICAgICBtYXJnaW4tdG9wOiA1cHg7XG4gICAgfVxuICBgO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxGb25kb0Jhc2U+XG4gICAgICAgIDxGbGV4PlxuICAgICAgICAgIDxUZXh0bz7CoUFjZXB0YW1vcyBwYWdvIGNvbiB0YXJqZXRhITwvVGV4dG8+XG4gICAgICAgICAgPElNR1xuICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGloYXdxcm50L2ltYWdlL3VwbG9hZC92MTYyNTc2MTA3Mi9JY29ub3MvQ29waWFfZGVfbWV0b2Rvc19kZV9wYWdvXzUwMHg0MF8yX253MmxoYy5wbmdcIlxuICAgICAgICAgICAgYWx0PVwicGFnbyBjb24gdGFyamV0YVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9GbGV4PlxuICAgICAgPC9Gb25kb0Jhc2U+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUYXJqZXRhO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Texto = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "evw8oqo2",
    label: "Texto"
  })(false ? undefined : {
    name: "tlfmqr",
    styles: "color:black;font-size:20px;font-weight:bold;padding-top:5px;@media (max-width: 1950px){font-size:16px;padding-top:8px;}@media (max-width: 900px){font-size:16px;padding-top:7.5px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFRhcmpldGEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0J3QiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxUYXJqZXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IFRhcmpldGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvQmFzZSA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCBibGFjaztcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgIGhlaWdodDogMzhweDtcbiAgICB9XG5cbiAgYDtcblxuICBjb25zdCBUZXh0byA9IHN0eWxlZC5wYFxuICAgIGNvbG9yOiBibGFjaztcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgcGFkZGluZy10b3A6IDVweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgIHBhZGRpbmctdG9wOiA4cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICBwYWRkaW5nLXRvcDogNy41cHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEZsZXggPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGA7XG5cbiAgY29uc3QgSU1HID0gc3R5bGVkLmltZ2BcbiAgICBoZWlnaHQ6IDM5cHggIWltcG9ydGFudDtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgIGhlaWdodDogMzBweCAhaW1wb3J0YW50O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMHB4O1xuICAgICAgbWFyZ2luLXRvcDogNXB4O1xuICAgIH1cbiAgYDtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Rm9uZG9CYXNlPlxuICAgICAgICA8RmxleD5cbiAgICAgICAgICA8VGV4dG8+wqFBY2VwdGFtb3MgcGFnbyBjb24gdGFyamV0YSE8L1RleHRvPlxuICAgICAgICAgIDxJTUdcbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RpaGF3cXJudC9pbWFnZS91cGxvYWQvdjE2MjU3NjEwNzIvSWNvbm9zL0NvcGlhX2RlX21ldG9kb3NfZGVfcGFnb181MDB4NDBfMl9udzJsaGMucG5nXCJcbiAgICAgICAgICAgIGFsdD1cInBhZ28gY29uIHRhcmpldGFcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRmxleD5cbiAgICAgIDwvRm9uZG9CYXNlPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGFyamV0YTtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Flex = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "evw8oqo1",
    label: "Flex"
  })(false ? undefined : {
    name: "zl1inp",
    styles: "display:flex;justify-content:center",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFRhcmpldGEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUN5QiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxUYXJqZXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IFRhcmpldGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvQmFzZSA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCBibGFjaztcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgIGhlaWdodDogMzhweDtcbiAgICB9XG5cbiAgYDtcblxuICBjb25zdCBUZXh0byA9IHN0eWxlZC5wYFxuICAgIGNvbG9yOiBibGFjaztcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgcGFkZGluZy10b3A6IDVweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgIHBhZGRpbmctdG9wOiA4cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICBwYWRkaW5nLXRvcDogNy41cHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEZsZXggPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGA7XG5cbiAgY29uc3QgSU1HID0gc3R5bGVkLmltZ2BcbiAgICBoZWlnaHQ6IDM5cHggIWltcG9ydGFudDtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgIGhlaWdodDogMzBweCAhaW1wb3J0YW50O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMHB4O1xuICAgICAgbWFyZ2luLXRvcDogNXB4O1xuICAgIH1cbiAgYDtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Rm9uZG9CYXNlPlxuICAgICAgICA8RmxleD5cbiAgICAgICAgICA8VGV4dG8+wqFBY2VwdGFtb3MgcGFnbyBjb24gdGFyamV0YSE8L1RleHRvPlxuICAgICAgICAgIDxJTUdcbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RpaGF3cXJudC9pbWFnZS91cGxvYWQvdjE2MjU3NjEwNzIvSWNvbm9zL0NvcGlhX2RlX21ldG9kb3NfZGVfcGFnb181MDB4NDBfMl9udzJsaGMucG5nXCJcbiAgICAgICAgICAgIGFsdD1cInBhZ28gY29uIHRhcmpldGFcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRmxleD5cbiAgICAgIDwvRm9uZG9CYXNlPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGFyamV0YTtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const IMG = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "evw8oqo0",
    label: "IMG"
  })(false ? undefined : {
    name: "1qhpvbq",
    styles: "height:39px!important;margin-left:15px;@media (max-width: 1950px){height:30px!important;margin-bottom:0px;margin-top:5px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFRhcmpldGEuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0N3QiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxUYXJqZXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IFRhcmpldGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvQmFzZSA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCBibGFjaztcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgIGhlaWdodDogMzhweDtcbiAgICB9XG5cbiAgYDtcblxuICBjb25zdCBUZXh0byA9IHN0eWxlZC5wYFxuICAgIGNvbG9yOiBibGFjaztcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgcGFkZGluZy10b3A6IDVweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgIHBhZGRpbmctdG9wOiA4cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDkwMHB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICBwYWRkaW5nLXRvcDogNy41cHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IEZsZXggPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGA7XG5cbiAgY29uc3QgSU1HID0gc3R5bGVkLmltZ2BcbiAgICBoZWlnaHQ6IDM5cHggIWltcG9ydGFudDtcbiAgICBtYXJnaW4tbGVmdDogMTVweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgIGhlaWdodDogMzBweCAhaW1wb3J0YW50O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMHB4O1xuICAgICAgbWFyZ2luLXRvcDogNXB4O1xuICAgIH1cbiAgYDtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Rm9uZG9CYXNlPlxuICAgICAgICA8RmxleD5cbiAgICAgICAgICA8VGV4dG8+wqFBY2VwdGFtb3MgcGFnbyBjb24gdGFyamV0YSE8L1RleHRvPlxuICAgICAgICAgIDxJTUdcbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RpaGF3cXJudC9pbWFnZS91cGxvYWQvdjE2MjU3NjEwNzIvSWNvbm9zL0NvcGlhX2RlX21ldG9kb3NfZGVfcGFnb181MDB4NDBfMl9udzJsaGMucG5nXCJcbiAgICAgICAgICAgIGFsdD1cInBhZ28gY29uIHRhcmpldGFcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRmxleD5cbiAgICAgIDwvRm9uZG9CYXNlPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGFyamV0YTtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(FondoBase, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 52,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Flex, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 53,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texto, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 54,
      columnNumber: 11
    }
  }, "\xA1Aceptamos pago con tarjeta!"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(IMG, {
    src: "https://res.cloudinary.com/dihawqrnt/image/upload/v1625761072/Iconos/Copia_de_metodos_de_pago_500x40_2_nw2lhc.png",
    alt: "pago con tarjeta",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 55,
      columnNumber: 11
    }
  }))));
};

/* harmony default export */ __webpack_exports__["default"] = (Tarjeta);

/***/ }),

/***/ "./components/layout/TarjetaDos.js":
/*!*****************************************!*\
  !*** ./components/layout/TarjetaDos.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_2__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\TarjetaDos.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }




const FondoBase = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
  target: "efpluk72",
  label: "FondoBase"
})(false ? undefined : {
  name: "lzq54k",
  styles: "width:100%;height:40px;background-color:white;border-top:1px solid black;@media (max-width: 400px){height:30px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFRhcmpldGFEb3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRzRCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFRhcmpldGFEb3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgRm9uZG9CYXNlID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogNDBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCBibGFjaztcblxuICBAbWVkaWEgKG1heC13aWR0aDogNDAwcHgpIHtcbiAgICBoZWlnaHQ6IDMwcHg7XG4gIH1cbmA7XG5cbmNvbnN0IEZsZXggPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IElNRyA9IHN0eWxlZC5pbWdgXG4gIGhlaWdodDogMzlweCAhaW1wb3J0YW50O1xuICBtYXJnaW4tbGVmdDogMTVweDtcblxuICBAbWVkaWEgKG1heC13aWR0aDogNTUwcHgpIHtcbiAgICB3aWR0aDogOTAlO1xuICB9XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDQwMHB4KSB7XG4gICAgaGVpZ2h0OiAyOXB4ICFpbXBvcnRhbnQ7XG4gIH1cblxuICBAbWVkaWEgKG1heC13aWR0aDogMzc1cHgpIHtcbiAgICB3aWR0aDogOTAlO1xuICB9XG5gO1xuXG5jb25zdCBUYXJqZXRhRG9zID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Rm9uZG9CYXNlPlxuICAgICAgICA8RmxleD5cbiAgICAgICAgICA8SU1HXG4gICAgICAgICAgICBzcmM9XCJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kaWhhd3FybnQvaW1hZ2UvdXBsb2FkL3YxNjI1NzYxMDcyL0ljb25vcy9Db3BpYV9kZV9tZXRvZG9zX2RlX3BhZ29fNTAweDQwXzJfbncybGhjLnBuZ1wiXG4gICAgICAgICAgICBhbHQ9XCJwYWdvIGNvbiB0YXJqZXRhXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L0ZsZXg+XG4gICAgICA8L0ZvbmRvQmFzZT5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRhcmpldGFEb3M7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const Flex = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
  target: "efpluk71",
  label: "Flex"
})(false ? undefined : {
  name: "zl1inp",
  styles: "display:flex;justify-content:center",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFRhcmpldGFEb3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBY3VCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFRhcmpldGFEb3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgRm9uZG9CYXNlID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogNDBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCBibGFjaztcblxuICBAbWVkaWEgKG1heC13aWR0aDogNDAwcHgpIHtcbiAgICBoZWlnaHQ6IDMwcHg7XG4gIH1cbmA7XG5cbmNvbnN0IEZsZXggPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IElNRyA9IHN0eWxlZC5pbWdgXG4gIGhlaWdodDogMzlweCAhaW1wb3J0YW50O1xuICBtYXJnaW4tbGVmdDogMTVweDtcblxuICBAbWVkaWEgKG1heC13aWR0aDogNTUwcHgpIHtcbiAgICB3aWR0aDogOTAlO1xuICB9XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDQwMHB4KSB7XG4gICAgaGVpZ2h0OiAyOXB4ICFpbXBvcnRhbnQ7XG4gIH1cblxuICBAbWVkaWEgKG1heC13aWR0aDogMzc1cHgpIHtcbiAgICB3aWR0aDogOTAlO1xuICB9XG5gO1xuXG5jb25zdCBUYXJqZXRhRG9zID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Rm9uZG9CYXNlPlxuICAgICAgICA8RmxleD5cbiAgICAgICAgICA8SU1HXG4gICAgICAgICAgICBzcmM9XCJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kaWhhd3FybnQvaW1hZ2UvdXBsb2FkL3YxNjI1NzYxMDcyL0ljb25vcy9Db3BpYV9kZV9tZXRvZG9zX2RlX3BhZ29fNTAweDQwXzJfbncybGhjLnBuZ1wiXG4gICAgICAgICAgICBhbHQ9XCJwYWdvIGNvbiB0YXJqZXRhXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L0ZsZXg+XG4gICAgICA8L0ZvbmRvQmFzZT5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRhcmpldGFEb3M7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const IMG = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
  target: "efpluk70",
  label: "IMG"
})(false ? undefined : {
  name: "1abknmm",
  styles: "height:39px!important;margin-left:15px;@media (max-width: 550px){width:90%;}@media (max-width: 400px){height:29px!important;}@media (max-width: 375px){width:90%;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFRhcmpldGFEb3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUJzQiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxUYXJqZXRhRG9zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5cbmNvbnN0IEZvbmRvQmFzZSA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDQwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBib3JkZXItdG9wOiAxcHggc29saWQgYmxhY2s7XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDQwMHB4KSB7XG4gICAgaGVpZ2h0OiAzMHB4O1xuICB9XG5gO1xuXG5jb25zdCBGbGV4ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5gO1xuXG5jb25zdCBJTUcgPSBzdHlsZWQuaW1nYFxuICBoZWlnaHQ6IDM5cHggIWltcG9ydGFudDtcbiAgbWFyZ2luLWxlZnQ6IDE1cHg7XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDU1MHB4KSB7XG4gICAgd2lkdGg6IDkwJTtcbiAgfVxuXG4gIEBtZWRpYSAobWF4LXdpZHRoOiA0MDBweCkge1xuICAgIGhlaWdodDogMjlweCAhaW1wb3J0YW50O1xuICB9XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDM3NXB4KSB7XG4gICAgd2lkdGg6IDkwJTtcbiAgfVxuYDtcblxuY29uc3QgVGFyamV0YURvcyA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEZvbmRvQmFzZT5cbiAgICAgICAgPEZsZXg+XG4gICAgICAgICAgPElNR1xuICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGloYXdxcm50L2ltYWdlL3VwbG9hZC92MTYyNTc2MTA3Mi9JY29ub3MvQ29waWFfZGVfbWV0b2Rvc19kZV9wYWdvXzUwMHg0MF8yX253MmxoYy5wbmdcIlxuICAgICAgICAgICAgYWx0PVwicGFnbyBjb24gdGFyamV0YVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9GbGV4PlxuICAgICAgPC9Gb25kb0Jhc2U+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUYXJqZXRhRG9zO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const TarjetaDos = () => {
  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(FondoBase, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 40,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Flex, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 41,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(IMG, {
    src: "https://res.cloudinary.com/dihawqrnt/image/upload/v1625761072/Iconos/Copia_de_metodos_de_pago_500x40_2_nw2lhc.png",
    alt: "pago con tarjeta",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 42,
      columnNumber: 11
    }
  }))));
};

/* harmony default export */ __webpack_exports__["default"] = (TarjetaDos);

/***/ }),

/***/ "./components/layout/VentaEquipo.js":
/*!******************************************!*\
  !*** ./components/layout/VentaEquipo.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_2__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\VentaEquipo.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }




const Venta = () => {
  const Fondo = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e13qnpjh7",
    label: "Fondo"
  })(false ? undefined : {
    name: "19wi2je",
    styles: "background-color:#0076c0;width:100%",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUkwQiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxWZW50YUVxdWlwby5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBWZW50YSA9ICgpID0+IHtcbiAgY29uc3QgRm9uZG8gPSBzdHlsZWQuZGl2YFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICB3aWR0aDogMThyZW07XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvVGV4dG8gPSBzdHlsZWQucGBcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAzM3B4O1xuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjZweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTFweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJbWFnZW5EaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogNDQlO1xuICAgIG1hcmdpbi1sZWZ0OiA1LjNyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBtaW4td2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBib3gtc2hhZG93OiAwcHggMHB4IDVweCBibGFjaztcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTFweCkge1xuICAgICAgd2lkdGg6IDUzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDg1MHB4KSB7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgIG1heC13aWR0aDogNDIlO1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgbWFyZ2luLXJpZ2h0OiA3cmVtO1xuICAgIG1hcmdpbi1sZWZ0OiAycmVtO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBtaW4td2lkdGg6IDUyJTtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwcHg7XG4gICAgICBtaW4td2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgY29sb3I6IHdoaXRlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEyOTBweCkge1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTcwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgIHdpZHRoOiA2MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8c2VjdGlvbiBpZD1cInZlbnRhXCI+XG4gICAgICAgIDxGb25kbyBjbGFzc05hbWU9XCIgbXQtNSBwdC01XCI+XG4gICAgICAgICAgPFRpdHVsbz5cbiAgICAgICAgICAgIDxUaXR1bG9UZXh0bz5WZW50YSBkZSBFcXVpcG88L1RpdHVsb1RleHRvPlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICAgIDxDb250ZW5lZG9yPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvSU1BR0VOX1ZFTlRBUy53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJWZW50YSBkZSBIYW5kIEhlbGQgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4dG8gY2xhc3NOYW1lPVwidGV4dC1qdXN0aWZ5XCI+XG4gICAgICAgICAgICAgICAgU29tb3MgZGlzdHJpYnVpZG9yZXMgYXV0b3JpemFkb3MgZGUgaGFuZGhlbGRzLCBsZWN0b3JlcyBkZSBjw7NkaWdvcywgaW1wcmVzb3JhcyBkZSBldGlxdWV0YXMgZSBpbXByZXNvcmFzIGRlIGNyZWRlbmNpYWxlcy5cbiAgICAgICAgICAgICAgICBQcm9wb3JjaW9uYW1vcyBhc2Vzb3LDrWEgc2luIGNvc3RvIHBhcmEgc2VsZWNjaW9uYXIgZWwgZXF1aXBvIHF1ZVxuICAgICAgICAgICAgICAgIHNlIGFqdXN0ZSBhIHN1cyBuZWNlc2lkYWRlcyB5IHByZXN1cHVlc3RvLCBkZXNwdcOpcyBkZSBlbGxvLCBsZVxuICAgICAgICAgICAgICAgIGhhY2Vtb3MgbGxlZ2FyIGVxdWlwbyBkZW1vIHBhcmEgcmVhbGl6YXIgbGFzIHBydWViYXMgbmVjZXNhcmlhcyxcbiAgICAgICAgICAgICAgICBhc2VndXJhbmRvIHF1ZSBzdSBlbGVjY2nDs24gc2VhIHRvdGFsbWVudGUgZnVuY2lvbmFsIHkgYWRlY3VhZGEuXG4gICAgICAgICAgICAgICAgVGFudG8gcGFyYSBhbG1hY8OpbiwgcGlja2luZywgaW52ZW50YXJpbywgZW50cmFkYXMgeSBzYWxpZGFzLFxuICAgICAgICAgICAgICAgIHN1cGVydmlzacOzbiB5IHZlbnRhIGVuIHJ1dGEuIFRyYWJhamFtb3MgZW4gY29uanVudG8gY29uIGxvcyBtw6FzXG4gICAgICAgICAgICAgICAgcmVjb25vY2lkb3MgZmFicmljYW50ZXMgcGFyYSBicmluZGFyIHNvcG9ydGUgcHJldmVudGEsIHBvc3R2ZW50YVxuICAgICAgICAgICAgICAgIHkgZ2FyYW50w61hcy4mbmJzcDtcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8L0ZvbmRvPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVmVudGE7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Titulo = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e13qnpjh6",
    label: "Titulo"
  })(false ? undefined : {
    name: "7gsvjs",
    styles: "text-align:center;margin:0px auto;padding-top:10px;width:18rem",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVMyQiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxWZW50YUVxdWlwby5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuXG5jb25zdCBWZW50YSA9ICgpID0+IHtcbiAgY29uc3QgRm9uZG8gPSBzdHlsZWQuZGl2YFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgd2lkdGg6IDEwMCU7XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvID0gc3R5bGVkLmRpdmBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcbiAgICB3aWR0aDogMThyZW07XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvVGV4dG8gPSBzdHlsZWQucGBcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAzM3B4O1xuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjZweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTFweCkge1xuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcmVtO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJbWFnZW5EaXYgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogNDQlO1xuICAgIG1hcmdpbi1sZWZ0OiA1LjNyZW07XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBtaW4td2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJbWFnZW4gPSBzdHlsZWQuaW1nYFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBib3gtc2hhZG93OiAwcHggMHB4IDVweCBibGFjaztcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTFweCkge1xuICAgICAgd2lkdGg6IDUzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDg1MHB4KSB7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgIG1heC13aWR0aDogNDIlO1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgbWFyZ2luLXJpZ2h0OiA3cmVtO1xuICAgIG1hcmdpbi1sZWZ0OiAycmVtO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBtaW4td2lkdGg6IDUyJTtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwcHg7XG4gICAgICBtaW4td2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgVGV4dG8gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgY29sb3I6IHdoaXRlO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEyOTBweCkge1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMTcwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgIHdpZHRoOiA2MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cbiAgYDtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8c2VjdGlvbiBpZD1cInZlbnRhXCI+XG4gICAgICAgIDxGb25kbyBjbGFzc05hbWU9XCIgbXQtNSBwdC01XCI+XG4gICAgICAgICAgPFRpdHVsbz5cbiAgICAgICAgICAgIDxUaXR1bG9UZXh0bz5WZW50YSBkZSBFcXVpcG88L1RpdHVsb1RleHRvPlxuICAgICAgICAgIDwvVGl0dWxvPlxuICAgICAgICAgIDxDb250ZW5lZG9yPlxuICAgICAgICAgICAgPEltYWdlbkRpdj5cbiAgICAgICAgICAgICAgPEltYWdlblxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvSU1BR0VOX1ZFTlRBUy53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJWZW50YSBkZSBIYW5kIEhlbGQgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBjb2RpZ28gZGUgYmFycmFzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvSW1hZ2VuRGl2PlxuICAgICAgICAgICAgPFRleHRvRGl2PlxuICAgICAgICAgICAgICA8VGV4dG8gY2xhc3NOYW1lPVwidGV4dC1qdXN0aWZ5XCI+XG4gICAgICAgICAgICAgICAgU29tb3MgZGlzdHJpYnVpZG9yZXMgYXV0b3JpemFkb3MgZGUgaGFuZGhlbGRzLCBsZWN0b3JlcyBkZSBjw7NkaWdvcywgaW1wcmVzb3JhcyBkZSBldGlxdWV0YXMgZSBpbXByZXNvcmFzIGRlIGNyZWRlbmNpYWxlcy5cbiAgICAgICAgICAgICAgICBQcm9wb3JjaW9uYW1vcyBhc2Vzb3LDrWEgc2luIGNvc3RvIHBhcmEgc2VsZWNjaW9uYXIgZWwgZXF1aXBvIHF1ZVxuICAgICAgICAgICAgICAgIHNlIGFqdXN0ZSBhIHN1cyBuZWNlc2lkYWRlcyB5IHByZXN1cHVlc3RvLCBkZXNwdcOpcyBkZSBlbGxvLCBsZVxuICAgICAgICAgICAgICAgIGhhY2Vtb3MgbGxlZ2FyIGVxdWlwbyBkZW1vIHBhcmEgcmVhbGl6YXIgbGFzIHBydWViYXMgbmVjZXNhcmlhcyxcbiAgICAgICAgICAgICAgICBhc2VndXJhbmRvIHF1ZSBzdSBlbGVjY2nDs24gc2VhIHRvdGFsbWVudGUgZnVuY2lvbmFsIHkgYWRlY3VhZGEuXG4gICAgICAgICAgICAgICAgVGFudG8gcGFyYSBhbG1hY8OpbiwgcGlja2luZywgaW52ZW50YXJpbywgZW50cmFkYXMgeSBzYWxpZGFzLFxuICAgICAgICAgICAgICAgIHN1cGVydmlzacOzbiB5IHZlbnRhIGVuIHJ1dGEuIFRyYWJhamFtb3MgZW4gY29uanVudG8gY29uIGxvcyBtw6FzXG4gICAgICAgICAgICAgICAgcmVjb25vY2lkb3MgZmFicmljYW50ZXMgcGFyYSBicmluZGFyIHNvcG9ydGUgcHJldmVudGEsIHBvc3R2ZW50YVxuICAgICAgICAgICAgICAgIHkgZ2FyYW50w61hcy4mbmJzcDtcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgPC9UZXh0bz5cbiAgICAgICAgICAgIDwvVGV4dG9EaXY+XG4gICAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8L0ZvbmRvPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVmVudGE7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const TituloTexto = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "e13qnpjh5",
    label: "TituloTexto"
  })(false ? undefined : {
    name: "1jdehpd",
    styles: "color:white;font-weight:bold;font-size:33px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdCOEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcVmVudGFFcXVpcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgVmVudGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDE4cmVtO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMzNweDtcbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDI2cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDQ0JTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIHdpZHRoOiA1MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4NTBweCkge1xuICAgICAgd2lkdGg6IDYzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICBtYXgtd2lkdGg6IDQyJTtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIG1hcmdpbi1yaWdodDogN3JlbTtcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiA1MiU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjkwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJ2ZW50YVwiPlxuICAgICAgICA8Rm9uZG8gY2xhc3NOYW1lPVwiIG10LTUgcHQtNVwiPlxuICAgICAgICAgIDxUaXR1bG8+XG4gICAgICAgICAgICA8VGl0dWxvVGV4dG8+VmVudGEgZGUgRXF1aXBvPC9UaXR1bG9UZXh0bz5cbiAgICAgICAgICA8L1RpdHVsbz5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0lNQUdFTl9WRU5UQVMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiVmVudGEgZGUgSGFuZCBIZWxkIEltcHJlc29yYXMgZGUgRXRpcXVldGFzIHkgTGVjdG9yZXMgZGUgY29kaWdvIGRlIGJhcnJhc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleHRvIGNsYXNzTmFtZT1cInRleHQtanVzdGlmeVwiPlxuICAgICAgICAgICAgICAgIFNvbW9zIGRpc3RyaWJ1aWRvcmVzIGF1dG9yaXphZG9zIGRlIGhhbmRoZWxkcywgbGVjdG9yZXMgZGUgY8OzZGlnb3MsIGltcHJlc29yYXMgZGUgZXRpcXVldGFzIGUgaW1wcmVzb3JhcyBkZSBjcmVkZW5jaWFsZXMuXG4gICAgICAgICAgICAgICAgUHJvcG9yY2lvbmFtb3MgYXNlc29yw61hIHNpbiBjb3N0byBwYXJhIHNlbGVjY2lvbmFyIGVsIGVxdWlwbyBxdWVcbiAgICAgICAgICAgICAgICBzZSBhanVzdGUgYSBzdXMgbmVjZXNpZGFkZXMgeSBwcmVzdXB1ZXN0bywgZGVzcHXDqXMgZGUgZWxsbywgbGVcbiAgICAgICAgICAgICAgICBoYWNlbW9zIGxsZWdhciBlcXVpcG8gZGVtbyBwYXJhIHJlYWxpemFyIGxhcyBwcnVlYmFzIG5lY2VzYXJpYXMsXG4gICAgICAgICAgICAgICAgYXNlZ3VyYW5kbyBxdWUgc3UgZWxlY2Npw7NuIHNlYSB0b3RhbG1lbnRlIGZ1bmNpb25hbCB5IGFkZWN1YWRhLlxuICAgICAgICAgICAgICAgIFRhbnRvIHBhcmEgYWxtYWPDqW4sIHBpY2tpbmcsIGludmVudGFyaW8sIGVudHJhZGFzIHkgc2FsaWRhcyxcbiAgICAgICAgICAgICAgICBzdXBlcnZpc2nDs24geSB2ZW50YSBlbiBydXRhLiBUcmFiYWphbW9zIGVuIGNvbmp1bnRvIGNvbiBsb3MgbcOhc1xuICAgICAgICAgICAgICAgIHJlY29ub2NpZG9zIGZhYnJpY2FudGVzIHBhcmEgYnJpbmRhciBzb3BvcnRlIHByZXZlbnRhLCBwb3N0dmVudGFcbiAgICAgICAgICAgICAgICB5IGdhcmFudMOtYXMuJm5ic3A7XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZlbnRhO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Contenedor = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e13qnpjh4",
    label: "Contenedor"
  })(false ? undefined : {
    name: "dj02wn",
    styles: "display:flex;justify-content:space-between;max-width:100%;padding-bottom:26px;@media (max-width: 991px){display:grid;margin-top:10px;margin-bottom:10px;margin-right:0rem;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNCK0IiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcVmVudGFFcXVpcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgVmVudGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDE4cmVtO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMzNweDtcbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDI2cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDQ0JTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIHdpZHRoOiA1MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4NTBweCkge1xuICAgICAgd2lkdGg6IDYzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICBtYXgtd2lkdGg6IDQyJTtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIG1hcmdpbi1yaWdodDogN3JlbTtcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiA1MiU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjkwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJ2ZW50YVwiPlxuICAgICAgICA8Rm9uZG8gY2xhc3NOYW1lPVwiIG10LTUgcHQtNVwiPlxuICAgICAgICAgIDxUaXR1bG8+XG4gICAgICAgICAgICA8VGl0dWxvVGV4dG8+VmVudGEgZGUgRXF1aXBvPC9UaXR1bG9UZXh0bz5cbiAgICAgICAgICA8L1RpdHVsbz5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0lNQUdFTl9WRU5UQVMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiVmVudGEgZGUgSGFuZCBIZWxkIEltcHJlc29yYXMgZGUgRXRpcXVldGFzIHkgTGVjdG9yZXMgZGUgY29kaWdvIGRlIGJhcnJhc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleHRvIGNsYXNzTmFtZT1cInRleHQtanVzdGlmeVwiPlxuICAgICAgICAgICAgICAgIFNvbW9zIGRpc3RyaWJ1aWRvcmVzIGF1dG9yaXphZG9zIGRlIGhhbmRoZWxkcywgbGVjdG9yZXMgZGUgY8OzZGlnb3MsIGltcHJlc29yYXMgZGUgZXRpcXVldGFzIGUgaW1wcmVzb3JhcyBkZSBjcmVkZW5jaWFsZXMuXG4gICAgICAgICAgICAgICAgUHJvcG9yY2lvbmFtb3MgYXNlc29yw61hIHNpbiBjb3N0byBwYXJhIHNlbGVjY2lvbmFyIGVsIGVxdWlwbyBxdWVcbiAgICAgICAgICAgICAgICBzZSBhanVzdGUgYSBzdXMgbmVjZXNpZGFkZXMgeSBwcmVzdXB1ZXN0bywgZGVzcHXDqXMgZGUgZWxsbywgbGVcbiAgICAgICAgICAgICAgICBoYWNlbW9zIGxsZWdhciBlcXVpcG8gZGVtbyBwYXJhIHJlYWxpemFyIGxhcyBwcnVlYmFzIG5lY2VzYXJpYXMsXG4gICAgICAgICAgICAgICAgYXNlZ3VyYW5kbyBxdWUgc3UgZWxlY2Npw7NuIHNlYSB0b3RhbG1lbnRlIGZ1bmNpb25hbCB5IGFkZWN1YWRhLlxuICAgICAgICAgICAgICAgIFRhbnRvIHBhcmEgYWxtYWPDqW4sIHBpY2tpbmcsIGludmVudGFyaW8sIGVudHJhZGFzIHkgc2FsaWRhcyxcbiAgICAgICAgICAgICAgICBzdXBlcnZpc2nDs24geSB2ZW50YSBlbiBydXRhLiBUcmFiYWphbW9zIGVuIGNvbmp1bnRvIGNvbiBsb3MgbcOhc1xuICAgICAgICAgICAgICAgIHJlY29ub2NpZG9zIGZhYnJpY2FudGVzIHBhcmEgYnJpbmRhciBzb3BvcnRlIHByZXZlbnRhLCBwb3N0dmVudGFcbiAgICAgICAgICAgICAgICB5IGdhcmFudMOtYXMuJm5ic3A7XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZlbnRhO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const ImagenDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e13qnpjh3",
    label: "ImagenDiv"
  })(false ? undefined : {
    name: "1fwd1df",
    styles: "margin-top:10px;margin-bottom:10px;width:44%;margin-left:5.3rem;@media (max-width: 991px){display:flex;min-width:100%;margin-left:0px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9DOEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcVmVudGFFcXVpcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgVmVudGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDE4cmVtO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMzNweDtcbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDI2cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDQ0JTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIHdpZHRoOiA1MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4NTBweCkge1xuICAgICAgd2lkdGg6IDYzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICBtYXgtd2lkdGg6IDQyJTtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIG1hcmdpbi1yaWdodDogN3JlbTtcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiA1MiU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjkwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJ2ZW50YVwiPlxuICAgICAgICA8Rm9uZG8gY2xhc3NOYW1lPVwiIG10LTUgcHQtNVwiPlxuICAgICAgICAgIDxUaXR1bG8+XG4gICAgICAgICAgICA8VGl0dWxvVGV4dG8+VmVudGEgZGUgRXF1aXBvPC9UaXR1bG9UZXh0bz5cbiAgICAgICAgICA8L1RpdHVsbz5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0lNQUdFTl9WRU5UQVMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiVmVudGEgZGUgSGFuZCBIZWxkIEltcHJlc29yYXMgZGUgRXRpcXVldGFzIHkgTGVjdG9yZXMgZGUgY29kaWdvIGRlIGJhcnJhc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleHRvIGNsYXNzTmFtZT1cInRleHQtanVzdGlmeVwiPlxuICAgICAgICAgICAgICAgIFNvbW9zIGRpc3RyaWJ1aWRvcmVzIGF1dG9yaXphZG9zIGRlIGhhbmRoZWxkcywgbGVjdG9yZXMgZGUgY8OzZGlnb3MsIGltcHJlc29yYXMgZGUgZXRpcXVldGFzIGUgaW1wcmVzb3JhcyBkZSBjcmVkZW5jaWFsZXMuXG4gICAgICAgICAgICAgICAgUHJvcG9yY2lvbmFtb3MgYXNlc29yw61hIHNpbiBjb3N0byBwYXJhIHNlbGVjY2lvbmFyIGVsIGVxdWlwbyBxdWVcbiAgICAgICAgICAgICAgICBzZSBhanVzdGUgYSBzdXMgbmVjZXNpZGFkZXMgeSBwcmVzdXB1ZXN0bywgZGVzcHXDqXMgZGUgZWxsbywgbGVcbiAgICAgICAgICAgICAgICBoYWNlbW9zIGxsZWdhciBlcXVpcG8gZGVtbyBwYXJhIHJlYWxpemFyIGxhcyBwcnVlYmFzIG5lY2VzYXJpYXMsXG4gICAgICAgICAgICAgICAgYXNlZ3VyYW5kbyBxdWUgc3UgZWxlY2Npw7NuIHNlYSB0b3RhbG1lbnRlIGZ1bmNpb25hbCB5IGFkZWN1YWRhLlxuICAgICAgICAgICAgICAgIFRhbnRvIHBhcmEgYWxtYWPDqW4sIHBpY2tpbmcsIGludmVudGFyaW8sIGVudHJhZGFzIHkgc2FsaWRhcyxcbiAgICAgICAgICAgICAgICBzdXBlcnZpc2nDs24geSB2ZW50YSBlbiBydXRhLiBUcmFiYWphbW9zIGVuIGNvbmp1bnRvIGNvbiBsb3MgbcOhc1xuICAgICAgICAgICAgICAgIHJlY29ub2NpZG9zIGZhYnJpY2FudGVzIHBhcmEgYnJpbmRhciBzb3BvcnRlIHByZXZlbnRhLCBwb3N0dmVudGFcbiAgICAgICAgICAgICAgICB5IGdhcmFudMOtYXMuJm5ic3A7XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZlbnRhO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Imagen = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("img", false ? undefined : {
    target: "e13qnpjh2",
    label: "Imagen"
  })(false ? undefined : {
    name: "xl7jbm",
    styles: "border-radius:5px;box-shadow:0px 0px 5px black;width:100%;@media (max-width: 991px){width:53%;margin:0px auto;}@media (max-width: 850px){width:63%;margin:0px auto;height:100%;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlEMkIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcVmVudGFFcXVpcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgVmVudGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDE4cmVtO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMzNweDtcbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDI2cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDQ0JTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIHdpZHRoOiA1MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4NTBweCkge1xuICAgICAgd2lkdGg6IDYzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICBtYXgtd2lkdGg6IDQyJTtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIG1hcmdpbi1yaWdodDogN3JlbTtcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiA1MiU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjkwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJ2ZW50YVwiPlxuICAgICAgICA8Rm9uZG8gY2xhc3NOYW1lPVwiIG10LTUgcHQtNVwiPlxuICAgICAgICAgIDxUaXR1bG8+XG4gICAgICAgICAgICA8VGl0dWxvVGV4dG8+VmVudGEgZGUgRXF1aXBvPC9UaXR1bG9UZXh0bz5cbiAgICAgICAgICA8L1RpdHVsbz5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0lNQUdFTl9WRU5UQVMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiVmVudGEgZGUgSGFuZCBIZWxkIEltcHJlc29yYXMgZGUgRXRpcXVldGFzIHkgTGVjdG9yZXMgZGUgY29kaWdvIGRlIGJhcnJhc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleHRvIGNsYXNzTmFtZT1cInRleHQtanVzdGlmeVwiPlxuICAgICAgICAgICAgICAgIFNvbW9zIGRpc3RyaWJ1aWRvcmVzIGF1dG9yaXphZG9zIGRlIGhhbmRoZWxkcywgbGVjdG9yZXMgZGUgY8OzZGlnb3MsIGltcHJlc29yYXMgZGUgZXRpcXVldGFzIGUgaW1wcmVzb3JhcyBkZSBjcmVkZW5jaWFsZXMuXG4gICAgICAgICAgICAgICAgUHJvcG9yY2lvbmFtb3MgYXNlc29yw61hIHNpbiBjb3N0byBwYXJhIHNlbGVjY2lvbmFyIGVsIGVxdWlwbyBxdWVcbiAgICAgICAgICAgICAgICBzZSBhanVzdGUgYSBzdXMgbmVjZXNpZGFkZXMgeSBwcmVzdXB1ZXN0bywgZGVzcHXDqXMgZGUgZWxsbywgbGVcbiAgICAgICAgICAgICAgICBoYWNlbW9zIGxsZWdhciBlcXVpcG8gZGVtbyBwYXJhIHJlYWxpemFyIGxhcyBwcnVlYmFzIG5lY2VzYXJpYXMsXG4gICAgICAgICAgICAgICAgYXNlZ3VyYW5kbyBxdWUgc3UgZWxlY2Npw7NuIHNlYSB0b3RhbG1lbnRlIGZ1bmNpb25hbCB5IGFkZWN1YWRhLlxuICAgICAgICAgICAgICAgIFRhbnRvIHBhcmEgYWxtYWPDqW4sIHBpY2tpbmcsIGludmVudGFyaW8sIGVudHJhZGFzIHkgc2FsaWRhcyxcbiAgICAgICAgICAgICAgICBzdXBlcnZpc2nDs24geSB2ZW50YSBlbiBydXRhLiBUcmFiYWphbW9zIGVuIGNvbmp1bnRvIGNvbiBsb3MgbcOhc1xuICAgICAgICAgICAgICAgIHJlY29ub2NpZG9zIGZhYnJpY2FudGVzIHBhcmEgYnJpbmRhciBzb3BvcnRlIHByZXZlbnRhLCBwb3N0dmVudGFcbiAgICAgICAgICAgICAgICB5IGdhcmFudMOtYXMuJm5ic3A7XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZlbnRhO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const TextoDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e13qnpjh1",
    label: "TextoDiv"
  })(false ? undefined : {
    name: "125iphh",
    styles: "display:flex;margin-top:10px;margin-bottom:10px;max-width:42%;text-align:justify;margin-right:7rem;margin-left:2rem;align-items:center;@media (max-width: 991px){display:flex;min-width:52%;margin-left:0px;min-width:100%;margin-right:0px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtFNkIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcVmVudGFFcXVpcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgVmVudGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDE4cmVtO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMzNweDtcbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDI2cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDQ0JTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIHdpZHRoOiA1MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4NTBweCkge1xuICAgICAgd2lkdGg6IDYzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICBtYXgtd2lkdGg6IDQyJTtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIG1hcmdpbi1yaWdodDogN3JlbTtcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiA1MiU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjkwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJ2ZW50YVwiPlxuICAgICAgICA8Rm9uZG8gY2xhc3NOYW1lPVwiIG10LTUgcHQtNVwiPlxuICAgICAgICAgIDxUaXR1bG8+XG4gICAgICAgICAgICA8VGl0dWxvVGV4dG8+VmVudGEgZGUgRXF1aXBvPC9UaXR1bG9UZXh0bz5cbiAgICAgICAgICA8L1RpdHVsbz5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0lNQUdFTl9WRU5UQVMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiVmVudGEgZGUgSGFuZCBIZWxkIEltcHJlc29yYXMgZGUgRXRpcXVldGFzIHkgTGVjdG9yZXMgZGUgY29kaWdvIGRlIGJhcnJhc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleHRvIGNsYXNzTmFtZT1cInRleHQtanVzdGlmeVwiPlxuICAgICAgICAgICAgICAgIFNvbW9zIGRpc3RyaWJ1aWRvcmVzIGF1dG9yaXphZG9zIGRlIGhhbmRoZWxkcywgbGVjdG9yZXMgZGUgY8OzZGlnb3MsIGltcHJlc29yYXMgZGUgZXRpcXVldGFzIGUgaW1wcmVzb3JhcyBkZSBjcmVkZW5jaWFsZXMuXG4gICAgICAgICAgICAgICAgUHJvcG9yY2lvbmFtb3MgYXNlc29yw61hIHNpbiBjb3N0byBwYXJhIHNlbGVjY2lvbmFyIGVsIGVxdWlwbyBxdWVcbiAgICAgICAgICAgICAgICBzZSBhanVzdGUgYSBzdXMgbmVjZXNpZGFkZXMgeSBwcmVzdXB1ZXN0bywgZGVzcHXDqXMgZGUgZWxsbywgbGVcbiAgICAgICAgICAgICAgICBoYWNlbW9zIGxsZWdhciBlcXVpcG8gZGVtbyBwYXJhIHJlYWxpemFyIGxhcyBwcnVlYmFzIG5lY2VzYXJpYXMsXG4gICAgICAgICAgICAgICAgYXNlZ3VyYW5kbyBxdWUgc3UgZWxlY2Npw7NuIHNlYSB0b3RhbG1lbnRlIGZ1bmNpb25hbCB5IGFkZWN1YWRhLlxuICAgICAgICAgICAgICAgIFRhbnRvIHBhcmEgYWxtYWPDqW4sIHBpY2tpbmcsIGludmVudGFyaW8sIGVudHJhZGFzIHkgc2FsaWRhcyxcbiAgICAgICAgICAgICAgICBzdXBlcnZpc2nDs24geSB2ZW50YSBlbiBydXRhLiBUcmFiYWphbW9zIGVuIGNvbmp1bnRvIGNvbiBsb3MgbcOhc1xuICAgICAgICAgICAgICAgIHJlY29ub2NpZG9zIGZhYnJpY2FudGVzIHBhcmEgYnJpbmRhciBzb3BvcnRlIHByZXZlbnRhLCBwb3N0dmVudGFcbiAgICAgICAgICAgICAgICB5IGdhcmFudMOtYXMuJm5ic3A7XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZlbnRhO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Texto = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "e13qnpjh0",
    label: "Texto"
  })(false ? undefined : {
    name: "8ug9gq",
    styles: "font-size:16px;color:white;@media (max-width: 1290px){font-size:14px;}@media (max-width: 1170px){font-size:12px;}@media (max-width: 991px){font-size:16px;width:63%;margin:0px auto;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZlbnRhRXF1aXBvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFGd0IiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbXBvbmVudHNcXGxheW91dFxcVmVudGFFcXVpcG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcblxuY29uc3QgVmVudGEgPSAoKSA9PiB7XG4gIGNvbnN0IEZvbmRvID0gc3R5bGVkLmRpdmBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xuICAgIHdpZHRoOiAxMDAlO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsbyA9IHN0eWxlZC5kaXZgXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgd2lkdGg6IDE4cmVtO1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb1RleHRvID0gc3R5bGVkLnBgXG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMzNweDtcbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy1ib3R0b206IDI2cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMHJlbTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDQ0JTtcbiAgICBtYXJnaW4tbGVmdDogNS4zcmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1hZ2VuID0gc3R5bGVkLmltZ2BcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm94LXNoYWRvdzogMHB4IDBweCA1cHggYmxhY2s7XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTkxcHgpIHtcbiAgICAgIHdpZHRoOiA1MyU7XG4gICAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4NTBweCkge1xuICAgICAgd2lkdGg6IDYzJTtcbiAgICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICBtYXgtd2lkdGg6IDQyJTtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIG1hcmdpbi1yaWdodDogN3JlbTtcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgbWluLXdpZHRoOiA1MiU7XG4gICAgICBtYXJnaW4tbGVmdDogMHB4O1xuICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjkwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KSB7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICB3aWR0aDogNjMlO1xuICAgICAgbWFyZ2luOiAwcHggYXV0bztcbiAgICB9XG4gIGA7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPHNlY3Rpb24gaWQ9XCJ2ZW50YVwiPlxuICAgICAgICA8Rm9uZG8gY2xhc3NOYW1lPVwiIG10LTUgcHQtNVwiPlxuICAgICAgICAgIDxUaXR1bG8+XG4gICAgICAgICAgICA8VGl0dWxvVGV4dG8+VmVudGEgZGUgRXF1aXBvPC9UaXR1bG9UZXh0bz5cbiAgICAgICAgICA8L1RpdHVsbz5cbiAgICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICAgIDxJbWFnZW5EaXY+XG4gICAgICAgICAgICAgIDxJbWFnZW5cbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0lNQUdFTl9WRU5UQVMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiVmVudGEgZGUgSGFuZCBIZWxkIEltcHJlc29yYXMgZGUgRXRpcXVldGFzIHkgTGVjdG9yZXMgZGUgY29kaWdvIGRlIGJhcnJhc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0ltYWdlbkRpdj5cbiAgICAgICAgICAgIDxUZXh0b0Rpdj5cbiAgICAgICAgICAgICAgPFRleHRvIGNsYXNzTmFtZT1cInRleHQtanVzdGlmeVwiPlxuICAgICAgICAgICAgICAgIFNvbW9zIGRpc3RyaWJ1aWRvcmVzIGF1dG9yaXphZG9zIGRlIGhhbmRoZWxkcywgbGVjdG9yZXMgZGUgY8OzZGlnb3MsIGltcHJlc29yYXMgZGUgZXRpcXVldGFzIGUgaW1wcmVzb3JhcyBkZSBjcmVkZW5jaWFsZXMuXG4gICAgICAgICAgICAgICAgUHJvcG9yY2lvbmFtb3MgYXNlc29yw61hIHNpbiBjb3N0byBwYXJhIHNlbGVjY2lvbmFyIGVsIGVxdWlwbyBxdWVcbiAgICAgICAgICAgICAgICBzZSBhanVzdGUgYSBzdXMgbmVjZXNpZGFkZXMgeSBwcmVzdXB1ZXN0bywgZGVzcHXDqXMgZGUgZWxsbywgbGVcbiAgICAgICAgICAgICAgICBoYWNlbW9zIGxsZWdhciBlcXVpcG8gZGVtbyBwYXJhIHJlYWxpemFyIGxhcyBwcnVlYmFzIG5lY2VzYXJpYXMsXG4gICAgICAgICAgICAgICAgYXNlZ3VyYW5kbyBxdWUgc3UgZWxlY2Npw7NuIHNlYSB0b3RhbG1lbnRlIGZ1bmNpb25hbCB5IGFkZWN1YWRhLlxuICAgICAgICAgICAgICAgIFRhbnRvIHBhcmEgYWxtYWPDqW4sIHBpY2tpbmcsIGludmVudGFyaW8sIGVudHJhZGFzIHkgc2FsaWRhcyxcbiAgICAgICAgICAgICAgICBzdXBlcnZpc2nDs24geSB2ZW50YSBlbiBydXRhLiBUcmFiYWphbW9zIGVuIGNvbmp1bnRvIGNvbiBsb3MgbcOhc1xuICAgICAgICAgICAgICAgIHJlY29ub2NpZG9zIGZhYnJpY2FudGVzIHBhcmEgYnJpbmRhciBzb3BvcnRlIHByZXZlbnRhLCBwb3N0dmVudGFcbiAgICAgICAgICAgICAgICB5IGdhcmFudMOtYXMuJm5ic3A7XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvVGV4dG8+XG4gICAgICAgICAgICA8L1RleHRvRGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvcj5cbiAgICAgICAgPC9Gb25kbz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZlbnRhO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("section", {
    id: "venta",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 107,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Fondo, {
    className: " mt-5 pt-5",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 108,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Titulo, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 109,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TituloTexto, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 110,
      columnNumber: 13
    }
  }, "Venta de Equipo")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Contenedor, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 112,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(ImagenDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 113,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Imagen, {
    src: "/img/IMAGEN_VENTAS.webp",
    alt: "Venta de Hand Held Impresoras de Etiquetas y Lectores de codigo de barras",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 114,
      columnNumber: 15
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(TextoDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 119,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])(Texto, {
    className: "text-justify",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 120,
      columnNumber: 15
    }
  }, "Somos distribuidores autorizados de handhelds, lectores de c\xF3digos, impresoras de etiquetas e impresoras de credenciales. Proporcionamos asesor\xEDa sin costo para seleccionar el equipo que se ajuste a sus necesidades y presupuesto, despu\xE9s de ello, le hacemos llegar equipo demo para realizar las pruebas necesarias, asegurando que su elecci\xF3n sea totalmente funcional y adecuada. Tanto para almac\xE9n, picking, inventario, entradas y salidas, supervisi\xF3n y venta en ruta. Trabajamos en conjunto con los m\xE1s reconocidos fabricantes para brindar soporte preventa, postventa y garant\xEDas.\xA0", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_2__["jsx"])("br", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 130,
      columnNumber: 17
    }
  })))))));
};

/* harmony default export */ __webpack_exports__["default"] = (Venta);

/***/ }),

/***/ "./components/layout/VideoCarousel.js":
/*!********************************************!*\
  !*** ./components/layout/VideoCarousel.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _carouselButtons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./carouselButtons */ "./components/layout/carouselButtons.js");
/* harmony import */ var embla_carousel_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! embla-carousel-react */ "embla-carousel-react");
/* harmony import */ var embla_carousel_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(embla_carousel_react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _hooks_CarouselMedia__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hooks/CarouselMedia */ "./hooks/CarouselMedia.js");
/* harmony import */ var _VideoModal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./VideoModal */ "./components/layout/VideoModal.js");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_5__);
var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\VideoCarousel.js";







const EmblaCarousel = ({
  slides
}) => {
  const [viewportRef, embla] = embla_carousel_react__WEBPACK_IMPORTED_MODULE_2___default()({
    slidesToScroll: 2,
    skipSnaps: false,
    loop: true
  });
  const {
    0: prevBtnEnabled,
    1: setPrevBtnEnabled
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const {
    0: nextBtnEnabled,
    1: setNextBtnEnabled
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const defaultScrollState = true;
  const {
    0: scrolling,
    1: setScrollState
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(defaultScrollState);
  const scrollingRef = Object(react__WEBPACK_IMPORTED_MODULE_0__["useRef"])(defaultScrollState);
  const {
    0: modalVideoUrl,
    1: setModalUrl
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])("");
  let scrollingForward = true;
  let interval = undefined;
  const IntervalDuration = _hooks_CarouselMedia__WEBPACK_IMPORTED_MODULE_3__["SwapDuration"] * 1000;
  const {
    0: videoModalOpen,
    1: showVideoModal
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(false);
  const scrollPrev = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])(() => embla && embla.scrollPrev(), [embla]);
  const scrollNext = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])(() => embla && embla.scrollNext(), [embla]);
  const onSelect = Object(react__WEBPACK_IMPORTED_MODULE_0__["useCallback"])(() => {
    if (!embla) return;
    setPrevBtnEnabled(embla.canScrollPrev());
    setNextBtnEnabled(embla.canScrollNext());
  }, [embla]);

  const ShowVideo = videoID => {
    setModalUrl(videoID);
    setScrollState(false);
    showVideoModal(prev => !prev);
  };

  const setModalVisibility = isOpen => {
    showVideoModal(isOpen);
    setScrollState(prev => !prev);
  };

  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    scrollingRef.current = scrolling;
  });
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    if (!embla) return;
    embla.on("select", onSelect);
    onSelect();

    if (interval == undefined) {
      startInterval();
      setScrollState(true);
    }
  }, [embla, onSelect]);

  const startInterval = () => {
    interval = setInterval(() => {
      if (scrollingRef.current == true) {
        if (scrollingForward == true) {
          if (embla.canScrollNext()) scrollNext();else {
            scrollingForward = false;
            scrollPrev();
          }
        } else {
          if (embla.canScrollPrev()) scrollPrev();else {
            scrollingForward = true;
            scrollNext();
          }
        }
      }
    }, IntervalDuration);
  };

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 94,
      columnNumber: 5
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    className: "embla",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 96,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    className: "embla__viewport",
    ref: viewportRef,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 97,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    className: "embla__container",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 98,
      columnNumber: 13
    }
  }, slides.map(index => Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    className: "embla__slide",
    key: index,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 100,
      columnNumber: 14
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    className: "embla__slide__inner",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 101,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    className: "video__carousel_slot",
    onClick: () => {
      ShowVideo(Object(_hooks_CarouselMedia__WEBPACK_IMPORTED_MODULE_3__["videoIndex"])(index).id);
    },
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 103,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("img", {
    src: Object(_hooks_CarouselMedia__WEBPACK_IMPORTED_MODULE_3__["videoThumbnail"])(Object(_hooks_CarouselMedia__WEBPACK_IMPORTED_MODULE_3__["videoIndex"])(index).id),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 104,
      columnNumber: 21
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])("p", {
    className: "carousel_item_name",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 105,
      columnNumber: 21
    }
  }, Object(_hooks_CarouselMedia__WEBPACK_IMPORTED_MODULE_3__["videoIndex"])(index).name), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(_carouselButtons__WEBPACK_IMPORTED_MODULE_1__["PlayButton"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 106,
      columnNumber: 21
    }
  }))))))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(_carouselButtons__WEBPACK_IMPORTED_MODULE_1__["PrevButton"], {
    onClick: scrollPrev,
    enabled: prevBtnEnabled,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 115,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(_carouselButtons__WEBPACK_IMPORTED_MODULE_1__["NextButton"], {
    onClick: scrollNext,
    enabled: nextBtnEnabled,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 116,
      columnNumber: 13
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_5__["jsx"])(_VideoModal__WEBPACK_IMPORTED_MODULE_4__["VideoModal"], {
    showModal: videoModalOpen,
    setShowModal: setModalVisibility,
    videoID: modalVideoUrl,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 119,
      columnNumber: 9
    }
  }));
};

/* harmony default export */ __webpack_exports__["default"] = (EmblaCarousel);

/***/ }),

/***/ "./components/layout/VideoModal.js":
/*!*****************************************!*\
  !*** ./components/layout/VideoModal.js ***!
  \*****************************************/
/*! exports provided: VideoModal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VideoModal", function() { return VideoModal; });
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_spring__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-spring */ "react-spring");
/* harmony import */ var react_spring__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_spring__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-icons/md */ "react-icons/md");
/* harmony import */ var react_icons_md__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_icons_md__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_4__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\VideoModal.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }






const Background = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
  target: "e2sx1vs3",
  label: "Background"
})(false ? undefined : {
  name: "13fdsvm",
  styles: "width:100%;height:100%;background-color:rgba(0,0,0,0.8);position:fixed;top:0;left:0;display:flex;justify-content:center;align-items:center;z-index:1500",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZpZGVvTW9kYWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSzZCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZpZGVvTW9kYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VTcHJpbmcsIGFuaW1hdGVkIH0gZnJvbSAncmVhY3Qtc3ByaW5nJztcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xyXG5pbXBvcnQgeyBNZENsb3NlIH0gZnJvbSAncmVhY3QtaWNvbnMvbWQnO1xyXG5cclxuY29uc3QgQmFja2dyb3VuZCA9IHN0eWxlZC5kaXZgXHJcbiAgICB3aWR0aDoxMDAlO1xyXG4gICAgaGVpZ2h0OjEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuOCk7XHJcbiAgICBwb3NpdGlvbjpmaXhlZDtcclxuICAgIHRvcDowO1xyXG4gICAgbGVmdDowO1xyXG4gICAgZGlzcGxheTpmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OmNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOmNlbnRlcjsgXHJcbiAgICB6LWluZGV4OjE1MDA7XHJcbmA7XHJcblxyXG5jb25zdCBNb2RhbFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBib3gtc2hhZG93OiAwIDVweCAxNnB4IHJnYmEoMCwwLDAsMC4yKTtcclxuICAgIGNvbG9yOiAjMDAwO1xyXG4gICAgZGlzcGxheTpibG9jaztcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHotaW5kZXg6IDEwO1xyXG5gO1xyXG5cclxuY29uc3QgTW9kYWxJbWcgPSBzdHlsZWQuaWZyYW1lYFxyXG4gICAgd2lkdGg6NzB2dztcclxuICAgIG1heC13aWR0aDoxMjAwcHg7XHJcbiAgICBtYXgtaGVpZ2h0Ojc4MHB4O1xyXG4gICAgaGVpZ2h0OiA0MHZ3O1xyXG4gICAgYm9yZGVyOm5vbmU7XHJcbiAgICBiYWNrZ3JvdW5kIDogIzAwMDtcclxuICAgIGJvcmRlci1yYWRpdXMgOiAxMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQ2xvc2VNb2RhbEJ1dHRvbiA9IHN0eWxlZChNZENsb3NlKWBcclxuICAgIEN1cnNvcjpwb2ludGVyO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAtNTBweDtcclxuICAgIHJpZ2h0OiAwcHg7XHJcbiAgICB3aWR0aDogMzJweDtcclxuICAgIGhlaWdodDogMzJweDtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICB6LWluZGV4OiAxMDtcclxuICAgIGZpbGw6IHdoaXRlO1xyXG5gO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBWaWRlb01vZGFsID0gKHsgc2hvd01vZGFsLCBzZXRTaG93TW9kYWwsdmlkZW9JRH0pID0+IHtcclxuICAgIGNvbnN0IG1vZGFsUmVmID0gdXNlUmVmKCk7XHJcbiAgICBjb25zdCB2aWRlb1VSTCA9IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvXCIrdmlkZW9JRCtcIj9hdXRvcGxheT0xXCI7XHJcbiAgICBjb25zdCBhbmltYXRpb24gPSB1c2VTcHJpbmcoe1xyXG4gICAgICBjb25maWc6IHtcclxuICAgICAgICBkdXJhdGlvbjogMjUwXHJcbiAgICAgIH0sXHJcbiAgICAgIG9wYWNpdHk6IHNob3dNb2RhbCA/IDEgOiAwLFxyXG4gICAgICB0cmFuc2Zvcm06IHNob3dNb2RhbCA/IGB0cmFuc2xhdGVZKDAlKWAgOiBgdHJhbnNsYXRlWSgtMTAwJSlgXHJcbiAgICB9KTtcclxuICBcclxuICAgIGNvbnN0IGNsb3NlTW9kYWwgPSBlID0+IHtcclxuICAgICAgaWYgKG1vZGFsUmVmLmN1cnJlbnQgPT09IGUudGFyZ2V0KSB7XHJcbiAgICAgICAgc2V0U2hvd01vZGFsKGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICBcclxuICAgIGNvbnN0IGtleVByZXNzID0gdXNlQ2FsbGJhY2soXHJcbiAgICAgIGUgPT4ge1xyXG4gICAgICAgIGlmIChlLmtleSA9PT0gJ0VzY2FwZScgJiYgc2hvd01vZGFsKSB7XHJcbiAgICAgICAgICBzZXRTaG93TW9kYWwoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgW3NldFNob3dNb2RhbCwgc2hvd01vZGFsXVxyXG4gICAgKTtcclxuICBcclxuICAgIHVzZUVmZmVjdChcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXlQcmVzcyk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXlQcmVzcyk7XHJcbiAgICAgIH0sXHJcbiAgICAgIFtrZXlQcmVzc11cclxuICAgICk7XHJcbiAgXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8PlxyXG4gICAgICAgIHtzaG93TW9kYWwgPyAoXHJcbiAgICAgICAgICA8QmFja2dyb3VuZCBvbkNsaWNrPXtjbG9zZU1vZGFsfSByZWY9e21vZGFsUmVmfT5cclxuICAgICAgICAgICAgPGFuaW1hdGVkLmRpdiBzdHlsZT17YW5pbWF0aW9ufT5cclxuICAgICAgICAgICAgICA8TW9kYWxXcmFwcGVyIHNob3dNb2RhbD17c2hvd01vZGFsfT5cclxuICAgICAgICAgICAgICAgIDxNb2RhbEltZyBzcmM9e3ZpZGVvVVJMfSB0aXRsZT1cIllvdVR1YmUgdmlkZW8gcGxheWVyXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3c9XCJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlXCIgYWxsb3dmdWxsc2NyZWVuIC8+XHJcbiAgICAgICAgICAgICAgICA8Q2xvc2VNb2RhbEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPSdDbG9zZSBtb2RhbCdcclxuICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2hvd01vZGFsKHByZXYgPT4gIXByZXYpfVxyXG5cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgPC9Nb2RhbFdyYXBwZXI+XHJcbiAgICAgICAgICAgIDwvYW5pbWF0ZWQuZGl2PlxyXG4gICAgICAgICAgPC9CYWNrZ3JvdW5kPlxyXG4gICAgICAgICkgOiBudWxsfVxyXG4gICAgICA8Lz5cclxuICAgICk7XHJcbiAgfTsiXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const ModalWrapper = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
  target: "e2sx1vs2",
  label: "ModalWrapper"
})(false ? undefined : {
  name: "h8td8x",
  styles: "width:100%;height:100%;box-shadow:0 5px 16px rgba(0,0,0,0.2);color:#000;display:block;position:relative;z-index:10",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZpZGVvTW9kYWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0IrQiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxWaWRlb01vZGFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlU3ByaW5nLCBhbmltYXRlZCB9IGZyb20gJ3JlYWN0LXNwcmluZyc7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcclxuaW1wb3J0IHsgTWRDbG9zZSB9IGZyb20gJ3JlYWN0LWljb25zL21kJztcclxuXHJcbmNvbnN0IEJhY2tncm91bmQgPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6MTAwJTtcclxuICAgIGhlaWdodDoxMDAlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwwLjgpO1xyXG4gICAgcG9zaXRpb246Zml4ZWQ7XHJcbiAgICB0b3A6MDtcclxuICAgIGxlZnQ6MDtcclxuICAgIGRpc3BsYXk6ZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDpjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczpjZW50ZXI7IFxyXG4gICAgei1pbmRleDoxNTAwO1xyXG5gO1xyXG5cclxuY29uc3QgTW9kYWxXcmFwcGVyID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgYm94LXNoYWRvdzogMCA1cHggMTZweCByZ2JhKDAsMCwwLDAuMik7XHJcbiAgICBjb2xvcjogIzAwMDtcclxuICAgIGRpc3BsYXk6YmxvY2s7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB6LWluZGV4OiAxMDtcclxuYDtcclxuXHJcbmNvbnN0IE1vZGFsSW1nID0gc3R5bGVkLmlmcmFtZWBcclxuICAgIHdpZHRoOjcwdnc7XHJcbiAgICBtYXgtd2lkdGg6MTIwMHB4O1xyXG4gICAgbWF4LWhlaWdodDo3ODBweDtcclxuICAgIGhlaWdodDogNDB2dztcclxuICAgIGJvcmRlcjpub25lO1xyXG4gICAgYmFja2dyb3VuZCA6ICMwMDA7XHJcbiAgICBib3JkZXItcmFkaXVzIDogMTBweDtcclxuYDtcclxuXHJcbmNvbnN0IENsb3NlTW9kYWxCdXR0b24gPSBzdHlsZWQoTWRDbG9zZSlgXHJcbiAgICBDdXJzb3I6cG9pbnRlcjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogLTUwcHg7XHJcbiAgICByaWdodDogMHB4O1xyXG4gICAgd2lkdGg6IDMycHg7XHJcbiAgICBoZWlnaHQ6IDMycHg7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgei1pbmRleDogMTA7XHJcbiAgICBmaWxsOiB3aGl0ZTtcclxuYDtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgVmlkZW9Nb2RhbCA9ICh7IHNob3dNb2RhbCwgc2V0U2hvd01vZGFsLHZpZGVvSUR9KSA9PiB7XHJcbiAgICBjb25zdCBtb2RhbFJlZiA9IHVzZVJlZigpO1xyXG4gICAgY29uc3QgdmlkZW9VUkwgPSBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL1wiK3ZpZGVvSUQrXCI/YXV0b3BsYXk9MVwiO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uID0gdXNlU3ByaW5nKHtcclxuICAgICAgY29uZmlnOiB7XHJcbiAgICAgICAgZHVyYXRpb246IDI1MFxyXG4gICAgICB9LFxyXG4gICAgICBvcGFjaXR5OiBzaG93TW9kYWwgPyAxIDogMCxcclxuICAgICAgdHJhbnNmb3JtOiBzaG93TW9kYWwgPyBgdHJhbnNsYXRlWSgwJSlgIDogYHRyYW5zbGF0ZVkoLTEwMCUpYFxyXG4gICAgfSk7XHJcbiAgXHJcbiAgICBjb25zdCBjbG9zZU1vZGFsID0gZSA9PiB7XHJcbiAgICAgIGlmIChtb2RhbFJlZi5jdXJyZW50ID09PSBlLnRhcmdldCkge1xyXG4gICAgICAgIHNldFNob3dNb2RhbChmYWxzZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgXHJcbiAgICBjb25zdCBrZXlQcmVzcyA9IHVzZUNhbGxiYWNrKFxyXG4gICAgICBlID0+IHtcclxuICAgICAgICBpZiAoZS5rZXkgPT09ICdFc2NhcGUnICYmIHNob3dNb2RhbCkge1xyXG4gICAgICAgICAgc2V0U2hvd01vZGFsKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIFtzZXRTaG93TW9kYWwsIHNob3dNb2RhbF1cclxuICAgICk7XHJcbiAgXHJcbiAgICB1c2VFZmZlY3QoXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywga2V5UHJlc3MpO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywga2V5UHJlc3MpO1xyXG4gICAgICB9LFxyXG4gICAgICBba2V5UHJlc3NdXHJcbiAgICApO1xyXG4gIFxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPD5cclxuICAgICAgICB7c2hvd01vZGFsID8gKFxyXG4gICAgICAgICAgPEJhY2tncm91bmQgb25DbGljaz17Y2xvc2VNb2RhbH0gcmVmPXttb2RhbFJlZn0+XHJcbiAgICAgICAgICAgIDxhbmltYXRlZC5kaXYgc3R5bGU9e2FuaW1hdGlvbn0+XHJcbiAgICAgICAgICAgICAgPE1vZGFsV3JhcHBlciBzaG93TW9kYWw9e3Nob3dNb2RhbH0+XHJcbiAgICAgICAgICAgICAgICA8TW9kYWxJbWcgc3JjPXt2aWRlb1VSTH0gdGl0bGU9XCJZb3VUdWJlIHZpZGVvIHBsYXllclwiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93PVwiYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZVwiIGFsbG93ZnVsbHNjcmVlbiAvPlxyXG4gICAgICAgICAgICAgICAgPENsb3NlTW9kYWxCdXR0b25cclxuICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0nQ2xvc2UgbW9kYWwnXHJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dNb2RhbChwcmV2ID0+ICFwcmV2KX1cclxuXHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgIDwvTW9kYWxXcmFwcGVyPlxyXG4gICAgICAgICAgICA8L2FuaW1hdGVkLmRpdj5cclxuICAgICAgICAgIDwvQmFja2dyb3VuZD5cclxuICAgICAgICApIDogbnVsbH1cclxuICAgICAgPC8+XHJcbiAgICApO1xyXG4gIH07Il19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const ModalImg = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("iframe", false ? undefined : {
  target: "e2sx1vs1",
  label: "ModalImg"
})(false ? undefined : {
  name: "54bove",
  styles: "width:70vw;max-width:1200px;max-height:780px;height:40vw;border:none;background:#000;border-radius:10px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZpZGVvTW9kYWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNEI4QiIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxWaWRlb01vZGFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlU3ByaW5nLCBhbmltYXRlZCB9IGZyb20gJ3JlYWN0LXNwcmluZyc7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcclxuaW1wb3J0IHsgTWRDbG9zZSB9IGZyb20gJ3JlYWN0LWljb25zL21kJztcclxuXHJcbmNvbnN0IEJhY2tncm91bmQgPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6MTAwJTtcclxuICAgIGhlaWdodDoxMDAlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwwLjgpO1xyXG4gICAgcG9zaXRpb246Zml4ZWQ7XHJcbiAgICB0b3A6MDtcclxuICAgIGxlZnQ6MDtcclxuICAgIGRpc3BsYXk6ZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDpjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczpjZW50ZXI7IFxyXG4gICAgei1pbmRleDoxNTAwO1xyXG5gO1xyXG5cclxuY29uc3QgTW9kYWxXcmFwcGVyID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgYm94LXNoYWRvdzogMCA1cHggMTZweCByZ2JhKDAsMCwwLDAuMik7XHJcbiAgICBjb2xvcjogIzAwMDtcclxuICAgIGRpc3BsYXk6YmxvY2s7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB6LWluZGV4OiAxMDtcclxuYDtcclxuXHJcbmNvbnN0IE1vZGFsSW1nID0gc3R5bGVkLmlmcmFtZWBcclxuICAgIHdpZHRoOjcwdnc7XHJcbiAgICBtYXgtd2lkdGg6MTIwMHB4O1xyXG4gICAgbWF4LWhlaWdodDo3ODBweDtcclxuICAgIGhlaWdodDogNDB2dztcclxuICAgIGJvcmRlcjpub25lO1xyXG4gICAgYmFja2dyb3VuZCA6ICMwMDA7XHJcbiAgICBib3JkZXItcmFkaXVzIDogMTBweDtcclxuYDtcclxuXHJcbmNvbnN0IENsb3NlTW9kYWxCdXR0b24gPSBzdHlsZWQoTWRDbG9zZSlgXHJcbiAgICBDdXJzb3I6cG9pbnRlcjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogLTUwcHg7XHJcbiAgICByaWdodDogMHB4O1xyXG4gICAgd2lkdGg6IDMycHg7XHJcbiAgICBoZWlnaHQ6IDMycHg7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgei1pbmRleDogMTA7XHJcbiAgICBmaWxsOiB3aGl0ZTtcclxuYDtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgVmlkZW9Nb2RhbCA9ICh7IHNob3dNb2RhbCwgc2V0U2hvd01vZGFsLHZpZGVvSUR9KSA9PiB7XHJcbiAgICBjb25zdCBtb2RhbFJlZiA9IHVzZVJlZigpO1xyXG4gICAgY29uc3QgdmlkZW9VUkwgPSBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL1wiK3ZpZGVvSUQrXCI/YXV0b3BsYXk9MVwiO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uID0gdXNlU3ByaW5nKHtcclxuICAgICAgY29uZmlnOiB7XHJcbiAgICAgICAgZHVyYXRpb246IDI1MFxyXG4gICAgICB9LFxyXG4gICAgICBvcGFjaXR5OiBzaG93TW9kYWwgPyAxIDogMCxcclxuICAgICAgdHJhbnNmb3JtOiBzaG93TW9kYWwgPyBgdHJhbnNsYXRlWSgwJSlgIDogYHRyYW5zbGF0ZVkoLTEwMCUpYFxyXG4gICAgfSk7XHJcbiAgXHJcbiAgICBjb25zdCBjbG9zZU1vZGFsID0gZSA9PiB7XHJcbiAgICAgIGlmIChtb2RhbFJlZi5jdXJyZW50ID09PSBlLnRhcmdldCkge1xyXG4gICAgICAgIHNldFNob3dNb2RhbChmYWxzZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgXHJcbiAgICBjb25zdCBrZXlQcmVzcyA9IHVzZUNhbGxiYWNrKFxyXG4gICAgICBlID0+IHtcclxuICAgICAgICBpZiAoZS5rZXkgPT09ICdFc2NhcGUnICYmIHNob3dNb2RhbCkge1xyXG4gICAgICAgICAgc2V0U2hvd01vZGFsKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIFtzZXRTaG93TW9kYWwsIHNob3dNb2RhbF1cclxuICAgICk7XHJcbiAgXHJcbiAgICB1c2VFZmZlY3QoXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywga2V5UHJlc3MpO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywga2V5UHJlc3MpO1xyXG4gICAgICB9LFxyXG4gICAgICBba2V5UHJlc3NdXHJcbiAgICApO1xyXG4gIFxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPD5cclxuICAgICAgICB7c2hvd01vZGFsID8gKFxyXG4gICAgICAgICAgPEJhY2tncm91bmQgb25DbGljaz17Y2xvc2VNb2RhbH0gcmVmPXttb2RhbFJlZn0+XHJcbiAgICAgICAgICAgIDxhbmltYXRlZC5kaXYgc3R5bGU9e2FuaW1hdGlvbn0+XHJcbiAgICAgICAgICAgICAgPE1vZGFsV3JhcHBlciBzaG93TW9kYWw9e3Nob3dNb2RhbH0+XHJcbiAgICAgICAgICAgICAgICA8TW9kYWxJbWcgc3JjPXt2aWRlb1VSTH0gdGl0bGU9XCJZb3VUdWJlIHZpZGVvIHBsYXllclwiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93PVwiYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZVwiIGFsbG93ZnVsbHNjcmVlbiAvPlxyXG4gICAgICAgICAgICAgICAgPENsb3NlTW9kYWxCdXR0b25cclxuICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0nQ2xvc2UgbW9kYWwnXHJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dNb2RhbChwcmV2ID0+ICFwcmV2KX1cclxuXHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgIDwvTW9kYWxXcmFwcGVyPlxyXG4gICAgICAgICAgICA8L2FuaW1hdGVkLmRpdj5cclxuICAgICAgICAgIDwvQmFja2dyb3VuZD5cclxuICAgICAgICApIDogbnVsbH1cclxuICAgICAgPC8+XHJcbiAgICApO1xyXG4gIH07Il19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const CloseModalButton = /*#__PURE__*/_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()(react_icons_md__WEBPACK_IMPORTED_MODULE_3__["MdClose"], false ? undefined : {
  target: "e2sx1vs0",
  label: "CloseModalButton"
})(false ? undefined : {
  name: "1n1bagv",
  styles: "Cursor:pointer;position:absolute;top:-50px;right:0px;width:32px;height:32px;padding:0;z-index:10;fill:white",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZpZGVvTW9kYWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0N3QyIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xcbGF5b3V0XFxWaWRlb01vZGFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlU3ByaW5nLCBhbmltYXRlZCB9IGZyb20gJ3JlYWN0LXNwcmluZyc7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcclxuaW1wb3J0IHsgTWRDbG9zZSB9IGZyb20gJ3JlYWN0LWljb25zL21kJztcclxuXHJcbmNvbnN0IEJhY2tncm91bmQgPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6MTAwJTtcclxuICAgIGhlaWdodDoxMDAlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwwLjgpO1xyXG4gICAgcG9zaXRpb246Zml4ZWQ7XHJcbiAgICB0b3A6MDtcclxuICAgIGxlZnQ6MDtcclxuICAgIGRpc3BsYXk6ZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDpjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczpjZW50ZXI7IFxyXG4gICAgei1pbmRleDoxNTAwO1xyXG5gO1xyXG5cclxuY29uc3QgTW9kYWxXcmFwcGVyID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgYm94LXNoYWRvdzogMCA1cHggMTZweCByZ2JhKDAsMCwwLDAuMik7XHJcbiAgICBjb2xvcjogIzAwMDtcclxuICAgIGRpc3BsYXk6YmxvY2s7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB6LWluZGV4OiAxMDtcclxuYDtcclxuXHJcbmNvbnN0IE1vZGFsSW1nID0gc3R5bGVkLmlmcmFtZWBcclxuICAgIHdpZHRoOjcwdnc7XHJcbiAgICBtYXgtd2lkdGg6MTIwMHB4O1xyXG4gICAgbWF4LWhlaWdodDo3ODBweDtcclxuICAgIGhlaWdodDogNDB2dztcclxuICAgIGJvcmRlcjpub25lO1xyXG4gICAgYmFja2dyb3VuZCA6ICMwMDA7XHJcbiAgICBib3JkZXItcmFkaXVzIDogMTBweDtcclxuYDtcclxuXHJcbmNvbnN0IENsb3NlTW9kYWxCdXR0b24gPSBzdHlsZWQoTWRDbG9zZSlgXHJcbiAgICBDdXJzb3I6cG9pbnRlcjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogLTUwcHg7XHJcbiAgICByaWdodDogMHB4O1xyXG4gICAgd2lkdGg6IDMycHg7XHJcbiAgICBoZWlnaHQ6IDMycHg7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgei1pbmRleDogMTA7XHJcbiAgICBmaWxsOiB3aGl0ZTtcclxuYDtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgVmlkZW9Nb2RhbCA9ICh7IHNob3dNb2RhbCwgc2V0U2hvd01vZGFsLHZpZGVvSUR9KSA9PiB7XHJcbiAgICBjb25zdCBtb2RhbFJlZiA9IHVzZVJlZigpO1xyXG4gICAgY29uc3QgdmlkZW9VUkwgPSBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL1wiK3ZpZGVvSUQrXCI/YXV0b3BsYXk9MVwiO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uID0gdXNlU3ByaW5nKHtcclxuICAgICAgY29uZmlnOiB7XHJcbiAgICAgICAgZHVyYXRpb246IDI1MFxyXG4gICAgICB9LFxyXG4gICAgICBvcGFjaXR5OiBzaG93TW9kYWwgPyAxIDogMCxcclxuICAgICAgdHJhbnNmb3JtOiBzaG93TW9kYWwgPyBgdHJhbnNsYXRlWSgwJSlgIDogYHRyYW5zbGF0ZVkoLTEwMCUpYFxyXG4gICAgfSk7XHJcbiAgXHJcbiAgICBjb25zdCBjbG9zZU1vZGFsID0gZSA9PiB7XHJcbiAgICAgIGlmIChtb2RhbFJlZi5jdXJyZW50ID09PSBlLnRhcmdldCkge1xyXG4gICAgICAgIHNldFNob3dNb2RhbChmYWxzZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgXHJcbiAgICBjb25zdCBrZXlQcmVzcyA9IHVzZUNhbGxiYWNrKFxyXG4gICAgICBlID0+IHtcclxuICAgICAgICBpZiAoZS5rZXkgPT09ICdFc2NhcGUnICYmIHNob3dNb2RhbCkge1xyXG4gICAgICAgICAgc2V0U2hvd01vZGFsKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIFtzZXRTaG93TW9kYWwsIHNob3dNb2RhbF1cclxuICAgICk7XHJcbiAgXHJcbiAgICB1c2VFZmZlY3QoXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywga2V5UHJlc3MpO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywga2V5UHJlc3MpO1xyXG4gICAgICB9LFxyXG4gICAgICBba2V5UHJlc3NdXHJcbiAgICApO1xyXG4gIFxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPD5cclxuICAgICAgICB7c2hvd01vZGFsID8gKFxyXG4gICAgICAgICAgPEJhY2tncm91bmQgb25DbGljaz17Y2xvc2VNb2RhbH0gcmVmPXttb2RhbFJlZn0+XHJcbiAgICAgICAgICAgIDxhbmltYXRlZC5kaXYgc3R5bGU9e2FuaW1hdGlvbn0+XHJcbiAgICAgICAgICAgICAgPE1vZGFsV3JhcHBlciBzaG93TW9kYWw9e3Nob3dNb2RhbH0+XHJcbiAgICAgICAgICAgICAgICA8TW9kYWxJbWcgc3JjPXt2aWRlb1VSTH0gdGl0bGU9XCJZb3VUdWJlIHZpZGVvIHBsYXllclwiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93PVwiYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZVwiIGFsbG93ZnVsbHNjcmVlbiAvPlxyXG4gICAgICAgICAgICAgICAgPENsb3NlTW9kYWxCdXR0b25cclxuICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0nQ2xvc2UgbW9kYWwnXHJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dNb2RhbChwcmV2ID0+ICFwcmV2KX1cclxuXHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgIDwvTW9kYWxXcmFwcGVyPlxyXG4gICAgICAgICAgICA8L2FuaW1hdGVkLmRpdj5cclxuICAgICAgICAgIDwvQmFja2dyb3VuZD5cclxuICAgICAgICApIDogbnVsbH1cclxuICAgICAgPC8+XHJcbiAgICApO1xyXG4gIH07Il19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

const VideoModal = ({
  showModal,
  setShowModal,
  videoID
}) => {
  const modalRef = Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])();
  const videoURL = "https://www.youtube.com/embed/" + videoID + "?autoplay=1";
  const animation = Object(react_spring__WEBPACK_IMPORTED_MODULE_2__["useSpring"])({
    config: {
      duration: 250
    },
    opacity: showModal ? 1 : 0,
    transform: showModal ? `translateY(0%)` : `translateY(-100%)`
  });

  const closeModal = e => {
    if (modalRef.current === e.target) {
      setShowModal(false);
    }
  };

  const keyPress = Object(react__WEBPACK_IMPORTED_MODULE_1__["useCallback"])(e => {
    if (e.key === 'Escape' && showModal) {
      setShowModal(false);
    }
  }, [setShowModal, showModal]);
  Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])(() => {
    document.addEventListener('keydown', keyPress);
    return () => document.removeEventListener('keydown', keyPress);
  }, [keyPress]);
  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_4__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, showModal ? Object(_emotion_react__WEBPACK_IMPORTED_MODULE_4__["jsx"])(Background, {
    onClick: closeModal,
    ref: modalRef,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 89,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_4__["jsx"])(react_spring__WEBPACK_IMPORTED_MODULE_2__["animated"].div, {
    style: animation,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 90,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_4__["jsx"])(ModalWrapper, {
    showModal: showModal,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 91,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_4__["jsx"])(ModalImg, {
    src: videoURL,
    title: "YouTube video player",
    frameborder: "0",
    allow: "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",
    allowfullscreen: true,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 92,
      columnNumber: 17
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_4__["jsx"])(CloseModalButton, {
    "aria-label": "Close modal",
    onClick: () => setShowModal(prev => !prev),
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 93,
      columnNumber: 17
    }
  })))) : null);
};

/***/ }),

/***/ "./components/layout/VideosSection.js":
/*!********************************************!*\
  !*** ./components/layout/VideosSection.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _VideoCarousel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VideoCarousel */ "./components/layout/VideoCarousel.js");
/* harmony import */ var _hooks_CarouselMedia__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../hooks/CarouselMedia */ "./hooks/CarouselMedia.js");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_4__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\VideosSection.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }






const VideosSection = () => {
  const TituloDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "ecp6ut81",
    label: "TituloDiv"
  })(false ? undefined : {
    name: "1h5e9aj",
    styles: "text-align:center;margin:0px auto;padding-top:3rem;width:100%",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZpZGVvc1NlY3Rpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUWdDIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZpZGVvc1NlY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgRW1ibGFDYXJvdXNlbCBmcm9tIFwiLi9WaWRlb0Nhcm91c2VsXCI7XG5pbXBvcnQge0NvdW50fSBmcm9tIFwiLi4vLi4vaG9va3MvQ2Fyb3VzZWxNZWRpYVwiO1xuXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5cbmNvbnN0IFZpZGVvc1NlY3Rpb24gPSAoKSA9PiB7XG5cbiAgICBjb25zdCBUaXR1bG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIHBhZGRpbmctdG9wOiAzcmVtO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGA7XG5cbiAgICBjb25zdCBUaXR1bG8gPSBzdHlsZWQucGBcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDMzcHg7XG4gICAgYDtcblxuXG4gICAgY29uc3QgU0xJREVfQ09VTlQgPSBDb3VudCsoQ291bnQlMik7XG4gICAgY29uc3Qgc2xpZGVzID0gQXJyYXkuZnJvbShBcnJheShTTElERV9DT1VOVCkua2V5cygpKTtcblxuICAgIHJldHVybiAoIFxuICAgICAgICA8PlxuICAgICAgICA8c2VjdGlvbiBpZD1cInZpZGVvc1wiID5cbiAgICAgICAgXG4gICAgICAgIDxUaXR1bG9EaXY+XG4gICAgICAgICAgICA8VGl0dWxvPlxuICAgICAgICAgICAgICAgIFZpZGVvcyBIYW5kIEhlbGQgU29sdXRpb25zXG4gICAgICAgICAgICA8L1RpdHVsbz5cbiAgICAgICAgPC9UaXR1bG9EaXY+XG4gICAgICAgIDxFbWJsYUNhcm91c2VsIHNsaWRlcz17c2xpZGVzfS8+XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICA8Lz5cbiAgICAgKTtcbn1cbiBcbmV4cG9ydCBkZWZhdWx0IFZpZGVvc1NlY3Rpb247Il19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Titulo = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("p", false ? undefined : {
    target: "ecp6ut80",
    label: "Titulo"
  })(false ? undefined : {
    name: "1w90bjz",
    styles: "font-weight:bold;font-size:33px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZpZGVvc1NlY3Rpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZTJCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXFZpZGVvc1NlY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgRW1ibGFDYXJvdXNlbCBmcm9tIFwiLi9WaWRlb0Nhcm91c2VsXCI7XG5pbXBvcnQge0NvdW50fSBmcm9tIFwiLi4vLi4vaG9va3MvQ2Fyb3VzZWxNZWRpYVwiO1xuXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5cbmNvbnN0IFZpZGVvc1NlY3Rpb24gPSAoKSA9PiB7XG5cbiAgICBjb25zdCBUaXR1bG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuICAgIHBhZGRpbmctdG9wOiAzcmVtO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGA7XG5cbiAgICBjb25zdCBUaXR1bG8gPSBzdHlsZWQucGBcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICBmb250LXNpemU6IDMzcHg7XG4gICAgYDtcblxuXG4gICAgY29uc3QgU0xJREVfQ09VTlQgPSBDb3VudCsoQ291bnQlMik7XG4gICAgY29uc3Qgc2xpZGVzID0gQXJyYXkuZnJvbShBcnJheShTTElERV9DT1VOVCkua2V5cygpKTtcblxuICAgIHJldHVybiAoIFxuICAgICAgICA8PlxuICAgICAgICA8c2VjdGlvbiBpZD1cInZpZGVvc1wiID5cbiAgICAgICAgXG4gICAgICAgIDxUaXR1bG9EaXY+XG4gICAgICAgICAgICA8VGl0dWxvPlxuICAgICAgICAgICAgICAgIFZpZGVvcyBIYW5kIEhlbGQgU29sdXRpb25zXG4gICAgICAgICAgICA8L1RpdHVsbz5cbiAgICAgICAgPC9UaXR1bG9EaXY+XG4gICAgICAgIDxFbWJsYUNhcm91c2VsIHNsaWRlcz17c2xpZGVzfS8+XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICA8Lz5cbiAgICAgKTtcbn1cbiBcbmV4cG9ydCBkZWZhdWx0IFZpZGVvc1NlY3Rpb247Il19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const SLIDE_COUNT = _hooks_CarouselMedia__WEBPACK_IMPORTED_MODULE_3__["Count"] + _hooks_CarouselMedia__WEBPACK_IMPORTED_MODULE_3__["Count"] % 2;
  const slides = Array.from(Array(SLIDE_COUNT).keys());
  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_4__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_4__["jsx"])("section", {
    id: "videos",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 27,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_4__["jsx"])(TituloDiv, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 29,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_4__["jsx"])(Titulo, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 30,
      columnNumber: 13
    }
  }, "Videos Hand Held Solutions")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_4__["jsx"])(_VideoCarousel__WEBPACK_IMPORTED_MODULE_2__["default"], {
    slides: slides,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 34,
      columnNumber: 9
    }
  })));
};

/* harmony default export */ __webpack_exports__["default"] = (VideosSection);

/***/ }),

/***/ "./components/layout/carouselButtons.js":
/*!**********************************************!*\
  !*** ./components/layout/carouselButtons.js ***!
  \**********************************************/
/*! exports provided: PrevButton, NextButton, PlayButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrevButton", function() { return PrevButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NextButton", function() { return NextButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlayButton", function() { return PlayButton; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\carouselButtons.js";


const PrevButton = ({
  enabled,
  onClick
}) => Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("button", {
  className: "embla__button embla__button--prev",
  onClick: onClick,
  disabled: !enabled,
  __self: undefined,
  __source: {
    fileName: _jsxFileName,
    lineNumber: 4,
    columnNumber: 3
  }
}, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("svg", {
  className: "embla__button__svg",
  viewBox: "137.718 -1.001 366.563 644",
  __self: undefined,
  __source: {
    fileName: _jsxFileName,
    lineNumber: 9,
    columnNumber: 5
  }
}, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("path", {
  d: "M428.36 12.5c16.67-16.67 43.76-16.67 60.42 0 16.67 16.67 16.67 43.76 0 60.42L241.7 320c148.25 148.24 230.61 230.6 247.08 247.08 16.67 16.66 16.67 43.75 0 60.42-16.67 16.66-43.76 16.67-60.42 0-27.72-27.71-249.45-249.37-277.16-277.08a42.308 42.308 0 0 1-12.48-30.34c0-11.1 4.1-22.05 12.48-30.42C206.63 234.23 400.64 40.21 428.36 12.5z",
  __self: undefined,
  __source: {
    fileName: _jsxFileName,
    lineNumber: 10,
    columnNumber: 7
  }
})));
const NextButton = ({
  enabled,
  onClick
}) => Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("button", {
  className: "embla__button embla__button--next",
  onClick: onClick,
  disabled: !enabled,
  __self: undefined,
  __source: {
    fileName: _jsxFileName,
    lineNumber: 16,
    columnNumber: 3
  }
}, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("svg", {
  className: "embla__button__svg",
  viewBox: "0 0 238.003 238.003",
  __self: undefined,
  __source: {
    fileName: _jsxFileName,
    lineNumber: 21,
    columnNumber: 5
  }
}, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("path", {
  d: "M181.776 107.719L78.705 4.648c-6.198-6.198-16.273-6.198-22.47 0s-6.198 16.273 0 22.47l91.883 91.883-91.883 91.883c-6.198 6.198-6.198 16.273 0 22.47s16.273 6.198 22.47 0l103.071-103.039a15.741 15.741 0 0 0 4.64-11.283c0-4.13-1.526-8.199-4.64-11.313z",
  __self: undefined,
  __source: {
    fileName: _jsxFileName,
    lineNumber: 22,
    columnNumber: 7
  }
})));
const PlayButton = ({
  onClick
}) => Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("button", {
  className: "video__slot_button",
  onClick: onClick,
  __self: undefined,
  __source: {
    fileName: _jsxFileName,
    lineNumber: 28,
    columnNumber: 5
  }
}, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("svg", {
  viewBox: "0 0 68 48",
  __self: undefined,
  __source: {
    fileName: _jsxFileName,
    lineNumber: 29,
    columnNumber: 5
  }
}, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("path", {
  className: "ytp-large-play-button-bg",
  d: "M66.52,7.74c-0.78-2.93-2.49-5.41-5.42-6.19C55.79,.13,34,0,34,0S12.21,.13,6.9,1.55 C3.97,2.33,2.27,4.81,1.48,7.74C0.06,13.05,0,24,0,24s0.06,10.95,1.48,16.26c0.78,2.93,2.49,5.41,5.42,6.19 C12.21,47.87,34,48,34,48s21.79-0.13,27.1-1.55c2.93-0.78,4.64-3.26,5.42-6.19C67.94,34.95,68,24,68,24S67.94,13.05,66.52,7.74z",
  fill: "#f00",
  __self: undefined,
  __source: {
    fileName: _jsxFileName,
    lineNumber: 30,
    columnNumber: 9
  }
}), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("path", {
  d: "M 45,24 27,14 27,34",
  fill: "#fff",
  __self: undefined,
  __source: {
    fileName: _jsxFileName,
    lineNumber: 31,
    columnNumber: 9
  }
})));

/***/ }),

/***/ "./config/FormEmail.js":
/*!*****************************!*\
  !*** ./config/FormEmail.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "@emotion/styled/base");
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var emailjs_com__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! emailjs-com */ "emailjs-com");
/* harmony import */ var emailjs_com__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(emailjs_com__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _hooks_useForm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hooks/useForm */ "./hooks/useForm.js");
/* harmony import */ var _components_ErrorMensaje__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/ErrorMensaje */ "./components/ErrorMensaje.js");
/* harmony import */ var _components_ExitoMensaje__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/ExitoMensaje */ "./components/ExitoMensaje.js");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_6__);

var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\config\\FormEmail.js";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }








const FormEmail = () => {
  const TituloDiv = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("div", false ? undefined : {
    target: "e1hrfotk2",
    label: "TituloDiv"
  })(false ? undefined : {
    name: "hyck8i",
    styles: "width:100%;text-align:center",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb25maWdcXEZvcm1FbWFpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTOEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbmZpZ1xcRm9ybUVtYWlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCBlbWFpbGpzIGZyb20gXCJlbWFpbGpzLWNvbVwiO1xuaW1wb3J0IHsgdXNlRm9ybSB9IGZyb20gXCIuLi9ob29rcy91c2VGb3JtXCI7XG5cbmltcG9ydCBFcnJvciBmcm9tIFwiLi4vY29tcG9uZW50cy9FcnJvck1lbnNhamVcIjtcbmltcG9ydCBFeGl0byBmcm9tIFwiLi4vY29tcG9uZW50cy9FeGl0b01lbnNhamVcIjtcblxuY29uc3QgRm9ybUVtYWlsID0gKCkgPT4ge1xuICBjb25zdCBUaXR1bG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgYDtcblxuICBjb25zdCBUaXR1bG8gPSBzdHlsZWQuaDFgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAyNnB4O1xuICBgO1xuXG4gIGNvbnN0IEJvdG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgICBmb250LXNpemU6IDE2cHggIWltcG9ydGFudDtcbiAgICBoZWlnaHQ6IGNhbGMoMS41ZW0gKyAwLjc1cmVtICsgMnB4KTtcbiAgYDtcblxuICBjb25zdCBbZXJyb3IsIGNhbWJpYXJFcnJvcl0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgW21lbnNhamVFeGl0bywgY2FtYmlhck1lbnNhamVFeGl0b10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgW2NvbnRhY3RvLCBsZWVyRm9ybSwgc2luVmFsb3Jlc10gPSB1c2VGb3JtKHtcbiAgICBuYW1lVXNlcjogXCJcIixcbiAgICBlbWFpbFVzZXI6IFwiXCIsXG4gICAgcGhvbmVOdW1iZXI6IFwiXCIsXG4gICAgY29tcGFueTogXCJcIixcbiAgICBtZXNzYWdlOiBcIlwiLFxuICB9KTtcblxuICBjb25zdCB7IG5hbWVVc2VyLCBlbWFpbFVzZXIsIHBob25lTnVtYmVyLCBjb21wYW55LCBtZXNzYWdlIH0gPSBjb250YWN0bztcblxuICBjb25zdCBlbnZpYXJGb3JtID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoXG4gICAgICBuYW1lVXNlci50cmltKCkgPT09IFwiXCIgfHxcbiAgICAgIGVtYWlsVXNlci50cmltKCkgPT09IFwiXCIgfHxcbiAgICAgIHBob25lTnVtYmVyLnRyaW0oKSA9PT0gXCJcIiB8fFxuICAgICAgY29tcGFueS50cmltKCkgPT09IFwiXCIgfHxcbiAgICAgIG1lc3NhZ2UudHJpbSgpID09PSBcIlwiXG4gICAgKSB7XG4gICAgICBjYW1iaWFyRXJyb3IodHJ1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FtYmlhckVycm9yKGZhbHNlKTtcblxuICAgIGVtYWlsanNcbiAgICAgIC5zZW5kKFxuICAgICAgICBcInNlcnZpY2VfbnA1Y242Y1wiLFxuICAgICAgICBcInRlbXBsYXRlX3dnOG1tb2tcIixcbiAgICAgICAgY29udGFjdG8sXG4gICAgICAgIFwidXNlcl9DdFhhSzFHTUJ1UW5yQkxKQ014dHVcIlxuICAgICAgKVxuICAgICAgLnRoZW4oXG4gICAgICAgIChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiU1VDQ0VTUyFcIiwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS50ZXh0KTtcbiAgICAgICAgfSxcbiAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiRkFJTEVELi4uXCIsIGVycik7XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICBzaW5WYWxvcmVzKCk7XG5cbiAgICBjYW1iaWFyTWVuc2FqZUV4aXRvKHRydWUpO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjYW1iaWFyTWVuc2FqZUV4aXRvKGZhbHNlKTtcbiAgICB9LCA1MDAwKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8VGl0dWxvRGl2IGNsYXNzTmFtZT1cIm1iLTRcIj5cbiAgICAgICAgPFRpdHVsbz7CoUNvbnTDoWN0ZW5vcyE8L1RpdHVsbz5cbiAgICAgIDwvVGl0dWxvRGl2PlxuXG4gICAgICB7ZXJyb3IgPyA8RXJyb3IgbWVuc2FqZT1cIlRvZG9zIGxvcyBjYW1wb3Mgc29uIG9ibGlnYXRvcmlvc1wiIC8+IDogbnVsbH1cblxuICAgICAge21lbnNhamVFeGl0byA/IDxFeGl0byBtZW5zYWplPVwiRm9ybXVsYXJpbyBlbnZpYWRvIGNvbiDDqXhpdG8uXCIgLz4gOiBudWxsfVxuXG4gICAgICA8Zm9ybSBvblN1Ym1pdD17ZW52aWFyRm9ybX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3J1cG9zIGZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICA8bGFiZWw+Tm9tYnJlIHkgQXBlbGxpZG86IDwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJpbnB1dF9zdHlsZXNcIlxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgbmFtZT1cIm5hbWVVc2VyXCJcbiAgICAgICAgICAgIHZhbHVlPXtuYW1lVXNlcn1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiTm9tYnJlXCJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtsZWVyRm9ybX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdydXBvcyBmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgPGxhYmVsPkVtcHJlc2E6IDwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJpbnB1dF9zdHlsZXNcIlxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgbmFtZT1cImNvbXBhbnlcIlxuICAgICAgICAgICAgdmFsdWU9e2NvbXBhbnl9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVtcHJlc2FcIlxuICAgICAgICAgICAgb25DaGFuZ2U9e2xlZXJGb3JtfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3J1cG9zIGZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICA8bGFiZWw+RW1haWw6IDwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJpbnB1dF9zdHlsZXNcIlxuICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICAgIG5hbWU9XCJlbWFpbFVzZXJcIlxuICAgICAgICAgICAgdmFsdWU9e2VtYWlsVXNlcn1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW1haWxcIlxuICAgICAgICAgICAgb25DaGFuZ2U9e2xlZXJGb3JtfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3J1cG9zIGZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICA8bGFiZWw+VGVsw6lmb25vOiA8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW5wdXRfc3R5bGVzXCJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIG5hbWU9XCJwaG9uZU51bWJlclwiXG4gICAgICAgICAgICB2YWx1ZT17cGhvbmVOdW1iZXJ9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIk7Dum1lcm8gZGUgdGVsw6lmb25vXCJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtsZWVyRm9ybX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdydXBvcyBmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgPGxhYmVsPk1lbnNhamU6IDwvbGFiZWw+XG4gICAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0YXJlYV9zdHlsZXNcIlxuICAgICAgICAgICAgbmFtZT1cIm1lc3NhZ2VcIlxuICAgICAgICAgICAgdmFsdWU9e21lc3NhZ2V9XG4gICAgICAgICAgICBvbkNoYW5nZT17bGVlckZvcm19XG4gICAgICAgICAgPjwvdGV4dGFyZWE+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxCb3RvblxuICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tc3VjY2VzcyBidG4tYmxvY2sgYnRuLWxnIHRleHQtY2VudGVyXCJcbiAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgPlxuICAgICAgICAgIEVudmlhclxuICAgICAgICA8L0JvdG9uPlxuICAgICAgPC9mb3JtPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9ybUVtYWlsO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Titulo = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("h1", false ? undefined : {
    target: "e1hrfotk1",
    label: "Titulo"
  })(false ? undefined : {
    name: "yk56cp",
    styles: "font-weight:bold;font-size:26px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb25maWdcXEZvcm1FbWFpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFjMEIiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXGNvbmZpZ1xcRm9ybUVtYWlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCBlbWFpbGpzIGZyb20gXCJlbWFpbGpzLWNvbVwiO1xuaW1wb3J0IHsgdXNlRm9ybSB9IGZyb20gXCIuLi9ob29rcy91c2VGb3JtXCI7XG5cbmltcG9ydCBFcnJvciBmcm9tIFwiLi4vY29tcG9uZW50cy9FcnJvck1lbnNhamVcIjtcbmltcG9ydCBFeGl0byBmcm9tIFwiLi4vY29tcG9uZW50cy9FeGl0b01lbnNhamVcIjtcblxuY29uc3QgRm9ybUVtYWlsID0gKCkgPT4ge1xuICBjb25zdCBUaXR1bG9EaXYgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgYDtcblxuICBjb25zdCBUaXR1bG8gPSBzdHlsZWQuaDFgXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgZm9udC1zaXplOiAyNnB4O1xuICBgO1xuXG4gIGNvbnN0IEJvdG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgICBmb250LXNpemU6IDE2cHggIWltcG9ydGFudDtcbiAgICBoZWlnaHQ6IGNhbGMoMS41ZW0gKyAwLjc1cmVtICsgMnB4KTtcbiAgYDtcblxuICBjb25zdCBbZXJyb3IsIGNhbWJpYXJFcnJvcl0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgW21lbnNhamVFeGl0bywgY2FtYmlhck1lbnNhamVFeGl0b10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgW2NvbnRhY3RvLCBsZWVyRm9ybSwgc2luVmFsb3Jlc10gPSB1c2VGb3JtKHtcbiAgICBuYW1lVXNlcjogXCJcIixcbiAgICBlbWFpbFVzZXI6IFwiXCIsXG4gICAgcGhvbmVOdW1iZXI6IFwiXCIsXG4gICAgY29tcGFueTogXCJcIixcbiAgICBtZXNzYWdlOiBcIlwiLFxuICB9KTtcblxuICBjb25zdCB7IG5hbWVVc2VyLCBlbWFpbFVzZXIsIHBob25lTnVtYmVyLCBjb21wYW55LCBtZXNzYWdlIH0gPSBjb250YWN0bztcblxuICBjb25zdCBlbnZpYXJGb3JtID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoXG4gICAgICBuYW1lVXNlci50cmltKCkgPT09IFwiXCIgfHxcbiAgICAgIGVtYWlsVXNlci50cmltKCkgPT09IFwiXCIgfHxcbiAgICAgIHBob25lTnVtYmVyLnRyaW0oKSA9PT0gXCJcIiB8fFxuICAgICAgY29tcGFueS50cmltKCkgPT09IFwiXCIgfHxcbiAgICAgIG1lc3NhZ2UudHJpbSgpID09PSBcIlwiXG4gICAgKSB7XG4gICAgICBjYW1iaWFyRXJyb3IodHJ1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FtYmlhckVycm9yKGZhbHNlKTtcblxuICAgIGVtYWlsanNcbiAgICAgIC5zZW5kKFxuICAgICAgICBcInNlcnZpY2VfbnA1Y242Y1wiLFxuICAgICAgICBcInRlbXBsYXRlX3dnOG1tb2tcIixcbiAgICAgICAgY29udGFjdG8sXG4gICAgICAgIFwidXNlcl9DdFhhSzFHTUJ1UW5yQkxKQ014dHVcIlxuICAgICAgKVxuICAgICAgLnRoZW4oXG4gICAgICAgIChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiU1VDQ0VTUyFcIiwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS50ZXh0KTtcbiAgICAgICAgfSxcbiAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiRkFJTEVELi4uXCIsIGVycik7XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICBzaW5WYWxvcmVzKCk7XG5cbiAgICBjYW1iaWFyTWVuc2FqZUV4aXRvKHRydWUpO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjYW1iaWFyTWVuc2FqZUV4aXRvKGZhbHNlKTtcbiAgICB9LCA1MDAwKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8VGl0dWxvRGl2IGNsYXNzTmFtZT1cIm1iLTRcIj5cbiAgICAgICAgPFRpdHVsbz7CoUNvbnTDoWN0ZW5vcyE8L1RpdHVsbz5cbiAgICAgIDwvVGl0dWxvRGl2PlxuXG4gICAgICB7ZXJyb3IgPyA8RXJyb3IgbWVuc2FqZT1cIlRvZG9zIGxvcyBjYW1wb3Mgc29uIG9ibGlnYXRvcmlvc1wiIC8+IDogbnVsbH1cblxuICAgICAge21lbnNhamVFeGl0byA/IDxFeGl0byBtZW5zYWplPVwiRm9ybXVsYXJpbyBlbnZpYWRvIGNvbiDDqXhpdG8uXCIgLz4gOiBudWxsfVxuXG4gICAgICA8Zm9ybSBvblN1Ym1pdD17ZW52aWFyRm9ybX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3J1cG9zIGZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICA8bGFiZWw+Tm9tYnJlIHkgQXBlbGxpZG86IDwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJpbnB1dF9zdHlsZXNcIlxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgbmFtZT1cIm5hbWVVc2VyXCJcbiAgICAgICAgICAgIHZhbHVlPXtuYW1lVXNlcn1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiTm9tYnJlXCJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtsZWVyRm9ybX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdydXBvcyBmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgPGxhYmVsPkVtcHJlc2E6IDwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJpbnB1dF9zdHlsZXNcIlxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgbmFtZT1cImNvbXBhbnlcIlxuICAgICAgICAgICAgdmFsdWU9e2NvbXBhbnl9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVtcHJlc2FcIlxuICAgICAgICAgICAgb25DaGFuZ2U9e2xlZXJGb3JtfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3J1cG9zIGZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICA8bGFiZWw+RW1haWw6IDwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJpbnB1dF9zdHlsZXNcIlxuICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICAgIG5hbWU9XCJlbWFpbFVzZXJcIlxuICAgICAgICAgICAgdmFsdWU9e2VtYWlsVXNlcn1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW1haWxcIlxuICAgICAgICAgICAgb25DaGFuZ2U9e2xlZXJGb3JtfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3J1cG9zIGZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICA8bGFiZWw+VGVsw6lmb25vOiA8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW5wdXRfc3R5bGVzXCJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIG5hbWU9XCJwaG9uZU51bWJlclwiXG4gICAgICAgICAgICB2YWx1ZT17cGhvbmVOdW1iZXJ9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIk7Dum1lcm8gZGUgdGVsw6lmb25vXCJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtsZWVyRm9ybX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdydXBvcyBmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgPGxhYmVsPk1lbnNhamU6IDwvbGFiZWw+XG4gICAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0YXJlYV9zdHlsZXNcIlxuICAgICAgICAgICAgbmFtZT1cIm1lc3NhZ2VcIlxuICAgICAgICAgICAgdmFsdWU9e21lc3NhZ2V9XG4gICAgICAgICAgICBvbkNoYW5nZT17bGVlckZvcm19XG4gICAgICAgICAgPjwvdGV4dGFyZWE+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxCb3RvblxuICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tc3VjY2VzcyBidG4tYmxvY2sgYnRuLWxnIHRleHQtY2VudGVyXCJcbiAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgPlxuICAgICAgICAgIEVudmlhclxuICAgICAgICA8L0JvdG9uPlxuICAgICAgPC9mb3JtPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9ybUVtYWlsO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const Boton = _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0___default()("button", false ? undefined : {
    target: "e1hrfotk0",
    label: "Boton"
  })(false ? undefined : {
    name: "xas8xw",
    styles: "font-size:16px!important;height:calc(1.5em + 0.75rem + 2px)",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb25maWdcXEZvcm1FbWFpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtQjZCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb25maWdcXEZvcm1FbWFpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5pbXBvcnQgZW1haWxqcyBmcm9tIFwiZW1haWxqcy1jb21cIjtcbmltcG9ydCB7IHVzZUZvcm0gfSBmcm9tIFwiLi4vaG9va3MvdXNlRm9ybVwiO1xuXG5pbXBvcnQgRXJyb3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRXJyb3JNZW5zYWplXCI7XG5pbXBvcnQgRXhpdG8gZnJvbSBcIi4uL2NvbXBvbmVudHMvRXhpdG9NZW5zYWplXCI7XG5cbmNvbnN0IEZvcm1FbWFpbCA9ICgpID0+IHtcbiAgY29uc3QgVGl0dWxvRGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGA7XG5cbiAgY29uc3QgVGl0dWxvID0gc3R5bGVkLmgxYFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogMjZweDtcbiAgYDtcblxuICBjb25zdCBCb3RvbiA9IHN0eWxlZC5idXR0b25gXG4gICAgZm9udC1zaXplOiAxNnB4ICFpbXBvcnRhbnQ7XG4gICAgaGVpZ2h0OiBjYWxjKDEuNWVtICsgMC43NXJlbSArIDJweCk7XG4gIGA7XG5cbiAgY29uc3QgW2Vycm9yLCBjYW1iaWFyRXJyb3JdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IFttZW5zYWplRXhpdG8sIGNhbWJpYXJNZW5zYWplRXhpdG9dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IFtjb250YWN0bywgbGVlckZvcm0sIHNpblZhbG9yZXNdID0gdXNlRm9ybSh7XG4gICAgbmFtZVVzZXI6IFwiXCIsXG4gICAgZW1haWxVc2VyOiBcIlwiLFxuICAgIHBob25lTnVtYmVyOiBcIlwiLFxuICAgIGNvbXBhbnk6IFwiXCIsXG4gICAgbWVzc2FnZTogXCJcIixcbiAgfSk7XG5cbiAgY29uc3QgeyBuYW1lVXNlciwgZW1haWxVc2VyLCBwaG9uZU51bWJlciwgY29tcGFueSwgbWVzc2FnZSB9ID0gY29udGFjdG87XG5cbiAgY29uc3QgZW52aWFyRm9ybSA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKFxuICAgICAgbmFtZVVzZXIudHJpbSgpID09PSBcIlwiIHx8XG4gICAgICBlbWFpbFVzZXIudHJpbSgpID09PSBcIlwiIHx8XG4gICAgICBwaG9uZU51bWJlci50cmltKCkgPT09IFwiXCIgfHxcbiAgICAgIGNvbXBhbnkudHJpbSgpID09PSBcIlwiIHx8XG4gICAgICBtZXNzYWdlLnRyaW0oKSA9PT0gXCJcIlxuICAgICkge1xuICAgICAgY2FtYmlhckVycm9yKHRydWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNhbWJpYXJFcnJvcihmYWxzZSk7XG5cbiAgICBlbWFpbGpzXG4gICAgICAuc2VuZChcbiAgICAgICAgXCJzZXJ2aWNlX25wNWNuNmNcIixcbiAgICAgICAgXCJ0ZW1wbGF0ZV93ZzhtbW9rXCIsXG4gICAgICAgIGNvbnRhY3RvLFxuICAgICAgICBcInVzZXJfQ3RYYUsxR01CdVFuckJMSkNNeHR1XCJcbiAgICAgIClcbiAgICAgIC50aGVuKFxuICAgICAgICAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlNVQ0NFU1MhXCIsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UudGV4dCk7XG4gICAgICAgIH0sXG4gICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkZBSUxFRC4uLlwiLCBlcnIpO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgc2luVmFsb3JlcygpO1xuXG4gICAgY2FtYmlhck1lbnNhamVFeGl0byh0cnVlKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2FtYmlhck1lbnNhamVFeGl0byhmYWxzZSk7XG4gICAgfSwgNTAwMCk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPFRpdHVsb0RpdiBjbGFzc05hbWU9XCJtYi00XCI+XG4gICAgICAgIDxUaXR1bG8+wqFDb250w6FjdGVub3MhPC9UaXR1bG8+XG4gICAgICA8L1RpdHVsb0Rpdj5cblxuICAgICAge2Vycm9yID8gPEVycm9yIG1lbnNhamU9XCJUb2RvcyBsb3MgY2FtcG9zIHNvbiBvYmxpZ2F0b3Jpb3NcIiAvPiA6IG51bGx9XG5cbiAgICAgIHttZW5zYWplRXhpdG8gPyA8RXhpdG8gbWVuc2FqZT1cIkZvcm11bGFyaW8gZW52aWFkbyBjb24gw6l4aXRvLlwiIC8+IDogbnVsbH1cblxuICAgICAgPGZvcm0gb25TdWJtaXQ9e2VudmlhckZvcm19PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdydXBvcyBmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgPGxhYmVsPk5vbWJyZSB5IEFwZWxsaWRvOiA8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW5wdXRfc3R5bGVzXCJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIG5hbWU9XCJuYW1lVXNlclwiXG4gICAgICAgICAgICB2YWx1ZT17bmFtZVVzZXJ9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIk5vbWJyZVwiXG4gICAgICAgICAgICBvbkNoYW5nZT17bGVlckZvcm19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncnVwb3MgZm9ybS1ncm91cFwiPlxuICAgICAgICAgIDxsYWJlbD5FbXByZXNhOiA8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW5wdXRfc3R5bGVzXCJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIG5hbWU9XCJjb21wYW55XCJcbiAgICAgICAgICAgIHZhbHVlPXtjb21wYW55fVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbXByZXNhXCJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtsZWVyRm9ybX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdydXBvcyBmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgPGxhYmVsPkVtYWlsOiA8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW5wdXRfc3R5bGVzXCJcbiAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXG4gICAgICAgICAgICBuYW1lPVwiZW1haWxVc2VyXCJcbiAgICAgICAgICAgIHZhbHVlPXtlbWFpbFVzZXJ9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVtYWlsXCJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtsZWVyRm9ybX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdydXBvcyBmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgPGxhYmVsPlRlbMOpZm9ubzogPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0X3N0eWxlc1wiXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBuYW1lPVwicGhvbmVOdW1iZXJcIlxuICAgICAgICAgICAgdmFsdWU9e3Bob25lTnVtYmVyfVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJOw7ptZXJvIGRlIHRlbMOpZm9ub1wiXG4gICAgICAgICAgICBvbkNoYW5nZT17bGVlckZvcm19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncnVwb3MgZm9ybS1ncm91cFwiPlxuICAgICAgICAgIDxsYWJlbD5NZW5zYWplOiA8L2xhYmVsPlxuICAgICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dGFyZWFfc3R5bGVzXCJcbiAgICAgICAgICAgIG5hbWU9XCJtZXNzYWdlXCJcbiAgICAgICAgICAgIHZhbHVlPXttZXNzYWdlfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2xlZXJGb3JtfVxuICAgICAgICAgID48L3RleHRhcmVhPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8Qm90b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLXN1Y2Nlc3MgYnRuLWJsb2NrIGJ0bi1sZyB0ZXh0LWNlbnRlclwiXG4gICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgID5cbiAgICAgICAgICBFbnZpYXJcbiAgICAgICAgPC9Cb3Rvbj5cbiAgICAgIDwvZm9ybT5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1FbWFpbDtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  const {
    0: error,
    1: cambiarError
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const {
    0: mensajeExito,
    1: cambiarMensajeExito
  } = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false);
  const [contacto, leerForm, sinValores] = Object(_hooks_useForm__WEBPACK_IMPORTED_MODULE_3__["useForm"])({
    nameUser: "",
    emailUser: "",
    phoneNumber: "",
    company: "",
    message: ""
  });
  const {
    nameUser,
    emailUser,
    phoneNumber,
    company,
    message
  } = contacto;

  const enviarForm = e => {
    e.preventDefault();

    if (nameUser.trim() === "" || emailUser.trim() === "" || phoneNumber.trim() === "" || company.trim() === "" || message.trim() === "") {
      cambiarError(true);
      return;
    }

    cambiarError(false);
    emailjs_com__WEBPACK_IMPORTED_MODULE_2___default.a.send("service_np5cn6c", "template_wg8mmok", contacto, "user_CtXaK1GMBuQnrBLJCMxtu").then(response => {
      console.log("SUCCESS!", response.status, response.text);
    }, err => {
      console.log("FAILED...", err);
    });
    sinValores();
    cambiarMensajeExito(true);
    setTimeout(() => {
      cambiarMensajeExito(false);
    }, 5000);
  };

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(TituloDiv, {
    className: "mb-4",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 82,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(Titulo, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 83,
      columnNumber: 9
    }
  }, "\xA1Cont\xE1ctenos!")), error ? Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(_components_ErrorMensaje__WEBPACK_IMPORTED_MODULE_4__["default"], {
    mensaje: "Todos los campos son obligatorios",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 86,
      columnNumber: 16
    }
  }) : null, mensajeExito ? Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(_components_ExitoMensaje__WEBPACK_IMPORTED_MODULE_5__["default"], {
    mensaje: "Formulario enviado con \xE9xito.",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 88,
      columnNumber: 23
    }
  }) : null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("form", {
    onSubmit: enviarForm,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 90,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("div", {
    className: "grupos form-group",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 91,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("label", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 92,
      columnNumber: 11
    }
  }, "Nombre y Apellido: "), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("input", {
    className: "input_styles",
    type: "text",
    name: "nameUser",
    value: nameUser,
    placeholder: "Nombre",
    onChange: leerForm,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 93,
      columnNumber: 11
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("div", {
    className: "grupos form-group",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 103,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("label", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 104,
      columnNumber: 11
    }
  }, "Empresa: "), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("input", {
    className: "input_styles",
    type: "text",
    name: "company",
    value: company,
    placeholder: "Empresa",
    onChange: leerForm,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 105,
      columnNumber: 11
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("div", {
    className: "grupos form-group",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 115,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("label", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 116,
      columnNumber: 11
    }
  }, "Email: "), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("input", {
    className: "input_styles",
    type: "email",
    name: "emailUser",
    value: emailUser,
    placeholder: "Email",
    onChange: leerForm,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 117,
      columnNumber: 11
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("div", {
    className: "grupos form-group",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 127,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("label", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 128,
      columnNumber: 11
    }
  }, "Tel\xE9fono: "), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("input", {
    className: "input_styles",
    type: "text",
    name: "phoneNumber",
    value: phoneNumber,
    placeholder: "N\xFAmero de tel\xE9fono",
    onChange: leerForm,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 129,
      columnNumber: 11
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("div", {
    className: "grupos form-group",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 139,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("label", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 140,
      columnNumber: 11
    }
  }, "Mensaje: "), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])("textarea", {
    className: "textarea_styles",
    name: "message",
    value: message,
    onChange: leerForm,
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 141,
      columnNumber: 11
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_6__["jsx"])(Boton, {
    className: "btn btn-success btn-block btn-lg text-center",
    type: "submit",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 149,
      columnNumber: 9
    }
  }, "Enviar")));
};

/* harmony default export */ __webpack_exports__["default"] = (FormEmail);

/***/ }),

/***/ "./hooks/CarouselMedia.js":
/*!********************************!*\
  !*** ./hooks/CarouselMedia.js ***!
  \********************************/
/*! exports provided: videos, SwapDuration, Count, videoIndex, videoThumbnail */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "videos", function() { return videos; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SwapDuration", function() { return SwapDuration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Count", function() { return Count; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "videoIndex", function() { return videoIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "videoThumbnail", function() { return videoThumbnail; });
const videos = [{
  id: "XNbo_mE5gNo",
  name: "Renta De Handhelds, La Solución Para Esta Temporada Logística"
}, {
  id: "-ejwdBb-GUo",
  name: "Lo De Hoy Es Rentar, ¡Conoce Los Equipos HANDHELD!"
}, {
  id: "7xQ8Xv_ECSg",
  name: "Conoce 6 Opciones Para Mejorar Tu Operación"
}, {
  id: "NazyKAJQGu4",
  name: "Diferencias entre un lector de códigos y una handheld"
}, {
  id: "U4-WhfiHKWM",
  name: "Diferencias entre una handheld y un smartphone"
}, {
  id: "aO1uxeycoqo",
  name: "Diferentes formas de nombrar a una handheld"
} // {id:"DEj48QC0ef4",name:"Importancia de equipos Handheld"},
// {id:"jfTvTGgKjBI",name:"Renta de impresoras de etiquetas"},
// {id:"z37Kpe5ubBQ",name:"Servicios de reparación"},
// {id:"JLDk3mYtdRg",name:"Servicio de renta para handhelds"},
];
const SwapDuration = 10;
const Count = videos.length;
const videoIndex = index => videos[index % videos.length];
const videoThumbnail = videoID => "https://img.youtube.com/vi/" + videoID + "/0.jpg"; //export const videoThumbnail = videoID => ("http://img.youtube.com/vi/"+videoID+"/hqdefault.jpg");
//export const videoThumbnail = videoID => ("https://i.ytimg.com/vi_webp/"+videoID+"/maxresdefault.webp");

/***/ }),

/***/ "./hooks/useForm.js":
/*!**************************!*\
  !*** ./hooks/useForm.js ***!
  \**************************/
/*! exports provided: useForm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useForm", function() { return useForm; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


const useForm = (initialState = {}) => {
  const {
    0: contacto,
    1: cambiarContacto
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(initialState);

  const leerForm = e => {
    cambiarContacto(_objectSpread(_objectSpread({}, contacto), {}, {
      [e.target.name]: e.target.value
    }));
  };

  const sinValores = () => {
    cambiarContacto({
      nameUser: "",
      emailUser: "",
      phoneNumber: "",
      company: "",
      message: ""
    });
  };

  const sinValoresSegundoForm = () => {
    cambiarContacto({
      nameUser: "",
      emailUser: "",
      phoneNumber: "",
      company: "",
      message: "",
      model: "",
      servicio: "",
      hhnumber: ""
    });
  };

  return [contacto, leerForm, sinValores, sinValoresSegundoForm];
};

/***/ }),

/***/ "./hooks/useWindowSize.js":
/*!********************************!*\
  !*** ./hooks/useWindowSize.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);


const useWindowSize = () => {
  const {
    0: windowSize,
    1: setWindowSize
  } = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])({
    width: undefined,
    height: undefined
  });
  Object(react__WEBPACK_IMPORTED_MODULE_0__["useEffect"])(() => {
    function handleResize() {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight
      });
    }

    window.addEventListener("resize", handleResize);
    handleResize();
    return () => window.removeEventListener("resize", handleResize);
  }, []);
  return windowSize.width;
};

/* harmony default export */ __webpack_exports__["default"] = (useWindowSize);

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireWildcard.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "react"));

var _router = __webpack_require__(/*! ../next-server/lib/router/router */ "./node_modules/next/dist/next-server/lib/router/router.js");

var _router2 = __webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js");

var _useIntersection = __webpack_require__(/*! ./use-intersection */ "./node_modules/next/dist/client/use-intersection.js");

const prefetched = {};

function prefetch(router, href, as, options) {
  if (true) return;
  if (!(0, _router.isLocalURL)(href)) return; // Prefetch the JSON page if asked (only in the client)
  // We need to handle a prefetch error here since we may be
  // loading with priority which can reject but we don't
  // want to force navigation since this is only a prefetch

  router.prefetch(href, as, options).catch(err => {
    if (true) {
      // rethrow to show invalid URL errors
      throw err;
    }
  });
  const curLocale = options && typeof options.locale !== 'undefined' ? options.locale : router && router.locale; // Join on an invalid URI character

  prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')] = true;
}

function isModifiedEvent(event) {
  const {
    target
  } = event.currentTarget;
  return target && target !== '_self' || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || // triggers resource download
  event.nativeEvent && event.nativeEvent.which === 2;
}

function linkClicked(e, router, href, as, replace, shallow, scroll, locale) {
  const {
    nodeName
  } = e.currentTarget;

  if (nodeName === 'A' && (isModifiedEvent(e) || !(0, _router.isLocalURL)(href))) {
    // ignore click for browser’s default behavior
    return;
  }

  e.preventDefault(); //  avoid scroll for urls with anchor refs

  if (scroll == null) {
    scroll = as.indexOf('#') < 0;
  } // replace state instead of push if prop is present


  router[replace ? 'replace' : 'push'](href, as, {
    shallow,
    locale,
    scroll
  }).then(success => {
    if (!success) return;

    if (scroll) {
      // FIXME: proper route announcing at Router level, not Link:
      document.body.focus();
    }
  });
}

function Link(props) {
  if (true) {
    function createPropError(args) {
      return new Error(`Failed prop type: The prop \`${args.key}\` expects a ${args.expected} in \`<Link>\`, but got \`${args.actual}\` instead.` + (false ? undefined : ''));
    } // TypeScript trick for type-guarding:


    const requiredPropsGuard = {
      href: true
    };
    const requiredProps = Object.keys(requiredPropsGuard);
    requiredProps.forEach(key => {
      if (key === 'href') {
        if (props[key] == null || typeof props[key] !== 'string' && typeof props[key] !== 'object') {
          throw createPropError({
            key,
            expected: '`string` or `object`',
            actual: props[key] === null ? 'null' : typeof props[key]
          });
        }
      } else {
        // TypeScript trick for type-guarding:
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const _ = key;
      }
    }); // TypeScript trick for type-guarding:

    const optionalPropsGuard = {
      as: true,
      replace: true,
      scroll: true,
      shallow: true,
      passHref: true,
      prefetch: true,
      locale: true
    };
    const optionalProps = Object.keys(optionalPropsGuard);
    optionalProps.forEach(key => {
      const valType = typeof props[key];

      if (key === 'as') {
        if (props[key] && valType !== 'string' && valType !== 'object') {
          throw createPropError({
            key,
            expected: '`string` or `object`',
            actual: valType
          });
        }
      } else if (key === 'locale') {
        if (props[key] && valType !== 'string') {
          throw createPropError({
            key,
            expected: '`string`',
            actual: valType
          });
        }
      } else if (key === 'replace' || key === 'scroll' || key === 'shallow' || key === 'passHref' || key === 'prefetch') {
        if (props[key] != null && valType !== 'boolean') {
          throw createPropError({
            key,
            expected: '`boolean`',
            actual: valType
          });
        }
      } else {
        // TypeScript trick for type-guarding:
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const _ = key;
      }
    }); // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes
    // eslint-disable-next-line react-hooks/rules-of-hooks

    const hasWarned = _react.default.useRef(false);

    if (props.prefetch && !hasWarned.current) {
      hasWarned.current = true;
      console.warn('Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://err.sh/vercel/next.js/prefetch-true-deprecated');
    }
  }

  const p = props.prefetch !== false;
  const router = (0, _router2.useRouter)();
  const pathname = router && router.pathname || '/';

  const {
    href,
    as
  } = _react.default.useMemo(() => {
    const [resolvedHref, resolvedAs] = (0, _router.resolveHref)(pathname, props.href, true);
    return {
      href: resolvedHref,
      as: props.as ? (0, _router.resolveHref)(pathname, props.as) : resolvedAs || resolvedHref
    };
  }, [pathname, props.href, props.as]);

  let {
    children,
    replace,
    shallow,
    scroll,
    locale
  } = props; // Deprecated. Warning shown by propType check. If the children provided is a string (<Link>example</Link>) we wrap it in an <a> tag

  if (typeof children === 'string') {
    children = /*#__PURE__*/_react.default.createElement("a", null, children);
  } // This will return the first child, if multiple are provided it will throw an error


  const child = _react.Children.only(children);

  const childRef = child && typeof child === 'object' && child.ref;
  const [setIntersectionRef, isVisible] = (0, _useIntersection.useIntersection)({
    rootMargin: '200px'
  });

  const setRef = _react.default.useCallback(el => {
    setIntersectionRef(el);

    if (childRef) {
      if (typeof childRef === 'function') childRef(el);else if (typeof childRef === 'object') {
        childRef.current = el;
      }
    }
  }, [childRef, setIntersectionRef]);

  (0, _react.useEffect)(() => {
    const shouldPrefetch = isVisible && p && (0, _router.isLocalURL)(href);
    const curLocale = typeof locale !== 'undefined' ? locale : router && router.locale;
    const isPrefetched = prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')];

    if (shouldPrefetch && !isPrefetched) {
      prefetch(router, href, as, {
        locale: curLocale
      });
    }
  }, [as, href, isVisible, locale, p, router]);
  const childProps = {
    ref: setRef,
    onClick: e => {
      if (child.props && typeof child.props.onClick === 'function') {
        child.props.onClick(e);
      }

      if (!e.defaultPrevented) {
        linkClicked(e, router, href, as, replace, shallow, scroll, locale);
      }
    }
  };

  childProps.onMouseEnter = e => {
    if (!(0, _router.isLocalURL)(href)) return;

    if (child.props && typeof child.props.onMouseEnter === 'function') {
      child.props.onMouseEnter(e);
    }

    prefetch(router, href, as, {
      priority: true
    });
  }; // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is
  // defined, we specify the current 'href', so that repetition is not needed by the user


  if (props.passHref || child.type === 'a' && !('href' in child.props)) {
    const curLocale = typeof locale !== 'undefined' ? locale : router && router.locale; // we only render domain locales if we are currently on a domain locale
    // so that locale links are still visitable in development/preview envs

    const localeDomain = router && router.isLocaleDomain && (0, _router.getDomainLocale)(as, curLocale, router && router.locales, router && router.domainLocales);
    childProps.href = localeDomain || (0, _router.addBasePath)((0, _router.addLocale)(as, curLocale, router && router.defaultLocale));
  }

  return /*#__PURE__*/_react.default.cloneElement(child, childProps);
}

var _default = Link;
exports.default = _default;

/***/ }),

/***/ "./node_modules/next/dist/client/normalize-trailing-slash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.removePathTrailingSlash = removePathTrailingSlash;
exports.normalizePathTrailingSlash = void 0;
/**
* Removes the trailing slash of a path if there is one. Preserves the root path `/`.
*/

function removePathTrailingSlash(path) {
  return path.endsWith('/') && path !== '/' ? path.slice(0, -1) : path;
}
/**
* Normalizes the trailing slash of a path according to the `trailingSlash` option
* in `next.config.js`.
*/


const normalizePathTrailingSlash =  false ? undefined : removePathTrailingSlash;
exports.normalizePathTrailingSlash = normalizePathTrailingSlash;

/***/ }),

/***/ "./node_modules/next/dist/client/request-idle-callback.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/request-idle-callback.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.cancelIdleCallback = exports.requestIdleCallback = void 0;

const requestIdleCallback = typeof self !== 'undefined' && self.requestIdleCallback || function (cb) {
  let start = Date.now();
  return setTimeout(function () {
    cb({
      didTimeout: false,
      timeRemaining: function () {
        return Math.max(0, 50 - (Date.now() - start));
      }
    });
  }, 1);
};

exports.requestIdleCallback = requestIdleCallback;

const cancelIdleCallback = typeof self !== 'undefined' && self.cancelIdleCallback || function (id) {
  return clearTimeout(id);
};

exports.cancelIdleCallback = cancelIdleCallback;

/***/ }),

/***/ "./node_modules/next/dist/client/route-loader.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/route-loader.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.markAssetError = markAssetError;
exports.isAssetError = isAssetError;
exports.getClientBuildManifest = getClientBuildManifest;
exports.default = void 0;

var _getAssetPathFromRoute = _interopRequireDefault(__webpack_require__(/*! ../next-server/lib/router/utils/get-asset-path-from-route */ "../next-server/lib/router/utils/get-asset-path-from-route"));

var _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ "./node_modules/next/dist/client/request-idle-callback.js"); // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive
// considers as "Good" time-to-interactive. We must assume something went
// wrong beyond this point, and then fall-back to a full page transition to
// show the user something of value.


const MS_MAX_IDLE_DELAY = 3800;

function withFuture(key, map, generator) {
  let entry = map.get(key);

  if (entry) {
    if ('future' in entry) {
      return entry.future;
    }

    return Promise.resolve(entry);
  }

  let resolver;
  const prom = new Promise(resolve => {
    resolver = resolve;
  });
  map.set(key, entry = {
    resolve: resolver,
    future: prom
  });
  return generator ? // eslint-disable-next-line no-sequences
  generator().then(value => (resolver(value), value)) : prom;
}

function hasPrefetch(link) {
  try {
    link = document.createElement('link');
    return (// detect IE11 since it supports prefetch but isn't detected
      // with relList.support
      !!window.MSInputMethodContext && !!document.documentMode || link.relList.supports('prefetch')
    );
  } catch (_unused) {
    return false;
  }
}

const canPrefetch = hasPrefetch();

function prefetchViaDom(href, as, link) {
  return new Promise((res, rej) => {
    if (document.querySelector(`link[rel="prefetch"][href^="${href}"]`)) {
      return res();
    }

    link = document.createElement('link'); // The order of property assignment here is intentional:

    if (as) link.as = as;
    link.rel = `prefetch`;
    link.crossOrigin = undefined;
    link.onload = res;
    link.onerror = rej; // `href` should always be last:

    link.href = href;
    document.head.appendChild(link);
  });
}

const ASSET_LOAD_ERROR = Symbol('ASSET_LOAD_ERROR'); // TODO: unexport

function markAssetError(err) {
  return Object.defineProperty(err, ASSET_LOAD_ERROR, {});
}

function isAssetError(err) {
  return err && ASSET_LOAD_ERROR in err;
}

function appendScript(src, script) {
  return new Promise((resolve, reject) => {
    script = document.createElement('script'); // The order of property assignment here is intentional.
    // 1. Setup success/failure hooks in case the browser synchronously
    //    executes when `src` is set.

    script.onload = resolve;

    script.onerror = () => reject(markAssetError(new Error(`Failed to load script: ${src}`))); // 2. Configure the cross-origin attribute before setting `src` in case the
    //    browser begins to fetch.


    script.crossOrigin = undefined; // 3. Finally, set the source and inject into the DOM in case the child
    //    must be appended for fetching to start.

    script.src = src;
    document.body.appendChild(script);
  });
}

function idleTimeout(ms, err) {
  return new Promise((_resolve, reject) => (0, _requestIdleCallback.requestIdleCallback)(() => setTimeout(() => reject(err), ms)));
} // TODO: stop exporting or cache the failure
// It'd be best to stop exporting this. It's an implementation detail. We're
// only exporting it for backwards compatibilty with the `page-loader`.
// Only cache this response as a last resort if we cannot eliminate all other
// code branches that use the Build Manifest Callback and push them through
// the Route Loader interface.


function getClientBuildManifest() {
  if (self.__BUILD_MANIFEST) {
    return Promise.resolve(self.__BUILD_MANIFEST);
  }

  const onBuildManifest = new Promise(resolve => {
    // Mandatory because this is not concurrent safe:
    const cb = self.__BUILD_MANIFEST_CB;

    self.__BUILD_MANIFEST_CB = () => {
      resolve(self.__BUILD_MANIFEST);
      cb && cb();
    };
  });
  return Promise.race([onBuildManifest, idleTimeout(MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client build manifest')))]);
}

function getFilesForRoute(assetPrefix, route) {
  if (true) {
    return Promise.resolve({
      scripts: [assetPrefix + '/_next/static/chunks/pages' + encodeURI((0, _getAssetPathFromRoute.default)(route, '.js'))],
      // Styles are handled by `style-loader` in development:
      css: []
    });
  }

  return getClientBuildManifest().then(manifest => {
    if (!(route in manifest)) {
      throw markAssetError(new Error(`Failed to lookup route: ${route}`));
    }

    const allFiles = manifest[route].map(entry => assetPrefix + '/_next/' + encodeURI(entry));
    return {
      scripts: allFiles.filter(v => v.endsWith('.js')),
      css: allFiles.filter(v => v.endsWith('.css'))
    };
  });
}

function createRouteLoader(assetPrefix) {
  const entrypoints = new Map();
  const loadedScripts = new Map();
  const styleSheets = new Map();
  const routes = new Map();

  function maybeExecuteScript(src) {
    let prom = loadedScripts.get(src);

    if (prom) {
      return prom;
    } // Skip executing script if it's already in the DOM:


    if (document.querySelector(`script[src^="${src}"]`)) {
      return Promise.resolve();
    }

    loadedScripts.set(src, prom = appendScript(src));
    return prom;
  }

  function fetchStyleSheet(href) {
    let prom = styleSheets.get(href);

    if (prom) {
      return prom;
    }

    styleSheets.set(href, prom = fetch(href).then(res => {
      if (!res.ok) {
        throw new Error(`Failed to load stylesheet: ${href}`);
      }

      return res.text().then(text => ({
        href: href,
        content: text
      }));
    }).catch(err => {
      throw markAssetError(err);
    }));
    return prom;
  }

  return {
    whenEntrypoint(route) {
      return withFuture(route, entrypoints);
    },

    onEntrypoint(route, execute) {
      Promise.resolve(execute).then(fn => fn()).then(exports => ({
        component: exports && exports.default || exports,
        exports: exports
      }), err => ({
        error: err
      })).then(input => {
        const old = entrypoints.get(route);
        entrypoints.set(route, input);
        if (old && 'resolve' in old) old.resolve(input);
      });
    },

    loadRoute(route) {
      return withFuture(route, routes, async () => {
        try {
          const {
            scripts,
            css
          } = await getFilesForRoute(assetPrefix, route);
          const [, styles] = await Promise.all([entrypoints.has(route) ? [] : Promise.all(scripts.map(maybeExecuteScript)), Promise.all(css.map(fetchStyleSheet))]);
          const entrypoint = await Promise.race([this.whenEntrypoint(route), idleTimeout(MS_MAX_IDLE_DELAY, markAssetError(new Error(`Route did not complete loading: ${route}`)))]);
          const res = Object.assign({
            styles
          }, entrypoint);
          return 'error' in entrypoint ? entrypoint : res;
        } catch (err) {
          return {
            error: err
          };
        }
      });
    },

    prefetch(route) {
      // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118
      // License: Apache 2.0
      let cn;

      if (cn = navigator.connection) {
        // Don't prefetch if using 2G or if Save-Data is enabled.
        if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();
      }

      return getFilesForRoute(assetPrefix, route).then(output => Promise.all(canPrefetch ? output.scripts.map(script => prefetchViaDom(script, 'script')) : [])).then(() => {
        (0, _requestIdleCallback.requestIdleCallback)(() => this.loadRoute(route));
      }).catch( // swallow prefetch errors
      () => {});
    }

  };
}

var _default = createRouteLoader;
exports.default = _default;

/***/ }),

/***/ "./node_modules/next/dist/client/router.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/router.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.useRouter = useRouter;
exports.makePublicRouterInstance = makePublicRouterInstance;
exports.createRouter = exports.withRouter = exports.default = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "react"));

var _router2 = _interopRequireWildcard(__webpack_require__(/*! ../next-server/lib/router/router */ "./node_modules/next/dist/next-server/lib/router/router.js"));

exports.Router = _router2.default;
exports.NextRouter = _router2.NextRouter;

var _routerContext = __webpack_require__(/*! ../next-server/lib/router-context */ "../next-server/lib/router-context");

var _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ "./node_modules/next/dist/client/with-router.js"));

exports.withRouter = _withRouter.default;
/* global window */

const singletonRouter = {
  router: null,
  // holds the actual router instance
  readyCallbacks: [],

  ready(cb) {
    if (this.router) return cb();

    if (false) {}
  }

}; // Create public properties and methods of the router in the singletonRouter

const urlPropertyFields = ['pathname', 'route', 'query', 'asPath', 'components', 'isFallback', 'basePath', 'locale', 'locales', 'defaultLocale', 'isReady', 'isLocaleDomain'];
const routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];
const coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it

Object.defineProperty(singletonRouter, 'events', {
  get() {
    return _router2.default.events;
  }

});
urlPropertyFields.forEach(field => {
  // Here we need to use Object.defineProperty because, we need to return
  // the property assigned to the actual router
  // The value might get changed as we change routes and this is the
  // proper way to access it
  Object.defineProperty(singletonRouter, field, {
    get() {
      const router = getRouter();
      return router[field];
    }

  });
});
coreMethodFields.forEach(field => {
  // We don't really know the types here, so we add them later instead
  ;

  singletonRouter[field] = (...args) => {
    const router = getRouter();
    return router[field](...args);
  };
});
routerEvents.forEach(event => {
  singletonRouter.ready(() => {
    _router2.default.events.on(event, (...args) => {
      const eventField = `on${event.charAt(0).toUpperCase()}${event.substring(1)}`;
      const _singletonRouter = singletonRouter;

      if (_singletonRouter[eventField]) {
        try {
          _singletonRouter[eventField](...args);
        } catch (err) {
          console.error(`Error when running the Router event: ${eventField}`);
          console.error(`${err.message}\n${err.stack}`);
        }
      }
    });
  });
});

function getRouter() {
  if (!singletonRouter.router) {
    const message = 'No router instance found.\n' + 'You should only use "next/router" inside the client side of your app.\n';
    throw new Error(message);
  }

  return singletonRouter.router;
} // Export the singletonRouter and this is the public API.


var _default = singletonRouter; // Reexport the withRoute HOC

exports.default = _default;

function useRouter() {
  return _react.default.useContext(_routerContext.RouterContext);
} // INTERNAL APIS
// -------------
// (do not use following exports inside the app)
// Create a router and assign it as the singleton instance.
// This is used in client side when we are initilizing the app.
// This should **not** use inside the server.


const createRouter = (...args) => {
  singletonRouter.router = new _router2.default(...args);
  singletonRouter.readyCallbacks.forEach(cb => cb());
  singletonRouter.readyCallbacks = [];
  return singletonRouter.router;
}; // This function is used to create the `withRouter` router instance


exports.createRouter = createRouter;

function makePublicRouterInstance(router) {
  const _router = router;
  const instance = {};

  for (const property of urlPropertyFields) {
    if (typeof _router[property] === 'object') {
      instance[property] = Object.assign(Array.isArray(_router[property]) ? [] : {}, _router[property]); // makes sure query is not stateful

      continue;
    }

    instance[property] = _router[property];
  } // Events is a static property on the router, the router doesn't have to be initialized to use it


  instance.events = _router2.default.events;
  coreMethodFields.forEach(field => {
    instance[field] = (...args) => {
      return _router[field](...args);
    };
  });
  return instance;
}

/***/ }),

/***/ "./node_modules/next/dist/client/use-intersection.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/client/use-intersection.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.useIntersection = useIntersection;

var _react = __webpack_require__(/*! react */ "react");

var _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ "./node_modules/next/dist/client/request-idle-callback.js");

const hasIntersectionObserver = typeof IntersectionObserver !== 'undefined';

function useIntersection({
  rootMargin,
  disabled
}) {
  const isDisabled = disabled || !hasIntersectionObserver;
  const unobserve = (0, _react.useRef)();
  const [visible, setVisible] = (0, _react.useState)(false);
  const setRef = (0, _react.useCallback)(el => {
    if (unobserve.current) {
      unobserve.current();
      unobserve.current = undefined;
    }

    if (isDisabled || visible) return;

    if (el && el.tagName) {
      unobserve.current = observe(el, isVisible => isVisible && setVisible(isVisible), {
        rootMargin
      });
    }
  }, [isDisabled, rootMargin, visible]);
  (0, _react.useEffect)(() => {
    if (!hasIntersectionObserver) {
      if (!visible) {
        const idleCallback = (0, _requestIdleCallback.requestIdleCallback)(() => setVisible(true));
        return () => (0, _requestIdleCallback.cancelIdleCallback)(idleCallback);
      }
    }
  }, [visible]);
  return [setRef, visible];
}

function observe(element, callback, options) {
  const {
    id,
    observer,
    elements
  } = createObserver(options);
  elements.set(element, callback);
  observer.observe(element);
  return function unobserve() {
    elements.delete(element);
    observer.unobserve(element); // Destroy observer when there's nothing left to watch:

    if (elements.size === 0) {
      observer.disconnect();
      observers.delete(id);
    }
  };
}

const observers = new Map();

function createObserver(options) {
  const id = options.rootMargin || '';
  let instance = observers.get(id);

  if (instance) {
    return instance;
  }

  const elements = new Map();
  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      const callback = elements.get(entry.target);
      const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;

      if (callback && isVisible) {
        callback(isVisible);
      }
    });
  }, options);
  observers.set(id, instance = {
    id,
    observer,
    elements
  });
  return instance;
}

/***/ }),

/***/ "./node_modules/next/dist/client/with-router.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/client/with-router.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.default = withRouter;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "react"));

var _router = __webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js");

function withRouter(ComposedComponent) {
  function WithRouterWrapper(props) {
    return /*#__PURE__*/_react.default.createElement(ComposedComponent, Object.assign({
      router: (0, _router.useRouter)()
    }, props));
  }

  WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps // This is needed to allow checking for custom getInitialProps in _app
  ;
  WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;

  if (true) {
    const name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';
    WithRouterWrapper.displayName = `withRouter(${name})`;
  }

  return WithRouterWrapper;
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.normalizeLocalePath = normalizeLocalePath;

function normalizeLocalePath(pathname, locales) {
  let detectedLocale; // first item will be empty string from splitting at first char

  const pathnameParts = pathname.split('/');
  (locales || []).some(locale => {
    if (pathnameParts[1].toLowerCase() === locale.toLowerCase()) {
      detectedLocale = locale;
      pathnameParts.splice(1, 1);
      pathname = pathnameParts.join('/') || '/';
      return true;
    }

    return false;
  });
  return {
    pathname,
    detectedLocale
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/mitt.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/mitt.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = mitt;
/*
MIT License
Copyright (c) Jason Miller (https://jasonformat.com/)
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
// This file is based on https://github.com/developit/mitt/blob/v1.1.3/src/index.js
// It's been edited for the needs of this script
// See the LICENSE at the top of the file

function mitt() {
  const all = Object.create(null);
  return {
    on(type, handler) {
      ;
      (all[type] || (all[type] = [])).push(handler);
    },

    off(type, handler) {
      if (all[type]) {
        all[type].splice(all[type].indexOf(handler) >>> 0, 1);
      }
    },

    emit(type, ...evts) {
      // eslint-disable-next-line array-callback-return
      ;
      (all[type] || []).slice().map(handler => {
        handler(...evts);
      });
    }

  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/router.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/router.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getDomainLocale = getDomainLocale;
exports.addLocale = addLocale;
exports.delLocale = delLocale;
exports.hasBasePath = hasBasePath;
exports.addBasePath = addBasePath;
exports.delBasePath = delBasePath;
exports.isLocalURL = isLocalURL;
exports.interpolateAs = interpolateAs;
exports.resolveHref = resolveHref;
exports.default = void 0;

var _normalizeTrailingSlash = __webpack_require__(/*! ../../../client/normalize-trailing-slash */ "./node_modules/next/dist/client/normalize-trailing-slash.js");

var _routeLoader = __webpack_require__(/*! ../../../client/route-loader */ "./node_modules/next/dist/client/route-loader.js");

var _denormalizePagePath = __webpack_require__(/*! ../../server/denormalize-page-path */ "./node_modules/next/dist/next-server/server/denormalize-page-path.js");

var _normalizeLocalePath = __webpack_require__(/*! ../i18n/normalize-locale-path */ "./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js");

var _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ "./node_modules/next/dist/next-server/lib/mitt.js"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/next/dist/next-server/lib/utils.js");

var _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js");

var _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ "./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js");

var _querystring = __webpack_require__(/*! ./utils/querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js");

var _resolveRewrites = _interopRequireDefault(__webpack_require__(/*! ./utils/resolve-rewrites */ "./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites-noop.js"));

var _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js");

var _routeRegex = __webpack_require__(/*! ./utils/route-regex */ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/* global __NEXT_DATA__ */
// tslint:disable:no-console


let detectDomainLocale;

if (false) {}

const basePath =  false || '';

function buildCancellationError() {
  return Object.assign(new Error('Route Cancelled'), {
    cancelled: true
  });
}

function addPathPrefix(path, prefix) {
  return prefix && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(prefix) : `${prefix}${pathNoQueryHash(path) === '/' ? path.substring(1) : path}` : path;
}

function getDomainLocale(path, locale, locales, domainLocales) {
  if (false) {}

  return false;
}

function addLocale(path, locale, defaultLocale) {
  if (false) {}

  return path;
}

function delLocale(path, locale) {
  if (false) {}

  return path;
}

function pathNoQueryHash(path) {
  const queryIndex = path.indexOf('?');
  const hashIndex = path.indexOf('#');

  if (queryIndex > -1 || hashIndex > -1) {
    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);
  }

  return path;
}

function hasBasePath(path) {
  path = pathNoQueryHash(path);
  return path === basePath || path.startsWith(basePath + '/');
}

function addBasePath(path) {
  // we only add the basepath on relative urls
  return addPathPrefix(path, basePath);
}

function delBasePath(path) {
  path = path.slice(basePath.length);
  if (!path.startsWith('/')) path = `/${path}`;
  return path;
}
/**
* Detects whether a given url is routable by the Next.js router (browser only).
*/


function isLocalURL(url) {
  // prevent a hydration mismatch on href for url with anchor refs
  if (url.startsWith('/') || url.startsWith('#')) return true;

  try {
    // absolute urls can be local if they are on the same origin
    const locationOrigin = (0, _utils.getLocationOrigin)();
    const resolved = new URL(url, locationOrigin);
    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);
  } catch (_) {
    return false;
  }
}

function interpolateAs(route, asPathname, query) {
  let interpolatedRoute = '';
  const dynamicRegex = (0, _routeRegex.getRouteRegex)(route);
  const dynamicGroups = dynamicRegex.groups;
  const dynamicMatches = // Try to match the dynamic route against the asPath
  (asPathname !== route ? (0, _routeMatcher.getRouteMatcher)(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href
  // TODO: should this take priority; also need to change in the router.
  query;
  interpolatedRoute = route;
  const params = Object.keys(dynamicGroups);

  if (!params.every(param => {
    let value = dynamicMatches[param] || '';
    const {
      repeat,
      optional
    } = dynamicGroups[param]; // support single-level catch-all
    // TODO: more robust handling for user-error (passing `/`)

    let replaced = `[${repeat ? '...' : ''}${param}]`;

    if (optional) {
      replaced = `${!value ? '/' : ''}[${replaced}]`;
    }

    if (repeat && !Array.isArray(value)) value = [value];
    return (optional || param in dynamicMatches) && ( // Interpolate group into data URL if present
    interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just
    // path delimiter escaped since they are being inserted
    // into the URL and we expect URL encoded segments
    // when parsing dynamic route params
    segment => encodeURIComponent(segment)).join('/') : encodeURIComponent(value)) || '/');
  })) {
    interpolatedRoute = ''; // did not satisfy all requirements
    // n.b. We ignore this error because we handle warning for this case in
    // development in the `<Link>` component directly.
  }

  return {
    params,
    result: interpolatedRoute
  };
}

function omitParmsFromQuery(query, params) {
  const filteredQuery = {};
  Object.keys(query).forEach(key => {
    if (!params.includes(key)) {
      filteredQuery[key] = query[key];
    }
  });
  return filteredQuery;
}
/**
* Resolves a given hyperlink with a certain router state (basePath not included).
* Preserves absolute urls.
*/


function resolveHref(currentPath, href, resolveAs) {
  // we use a dummy base url for relative urls
  const base = new URL(currentPath, 'http://n');
  const urlAsString = typeof href === 'string' ? href : (0, _utils.formatWithValidation)(href); // Return because it cannot be routed by the Next.js router

  if (!isLocalURL(urlAsString)) {
    return resolveAs ? [urlAsString] : urlAsString;
  }

  try {
    const finalUrl = new URL(urlAsString, base);
    finalUrl.pathname = (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(finalUrl.pathname);
    let interpolatedAs = '';

    if ((0, _isDynamic.isDynamicRoute)(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {
      const query = (0, _querystring.searchParamsToUrlQuery)(finalUrl.searchParams);
      const {
        result,
        params
      } = interpolateAs(finalUrl.pathname, finalUrl.pathname, query);

      if (result) {
        interpolatedAs = (0, _utils.formatWithValidation)({
          pathname: result,
          hash: finalUrl.hash,
          query: omitParmsFromQuery(query, params)
        });
      }
    } // if the origin didn't change, it means we received a relative href


    const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;
    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;
  } catch (_) {
    return resolveAs ? [urlAsString] : urlAsString;
  }
}

function stripOrigin(url) {
  const origin = (0, _utils.getLocationOrigin)();
  return url.startsWith(origin) ? url.substring(origin.length) : url;
}

function prepareUrlAs(router, url, as) {
  // If url and as provided as an object representation,
  // we'll format them into the string version here.
  let [resolvedHref, resolvedAs] = resolveHref(router.pathname, url, true);
  const origin = (0, _utils.getLocationOrigin)();
  const hrefHadOrigin = resolvedHref.startsWith(origin);
  const asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);
  resolvedHref = stripOrigin(resolvedHref);
  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;
  const preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);
  const preparedAs = as ? stripOrigin(resolveHref(router.pathname, as)) : resolvedAs || resolvedHref;
  return {
    url: preparedUrl,
    as: asHadOrigin ? preparedAs : addBasePath(preparedAs)
  };
}

const manualScrollRestoration =  false && false;
const SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');

function fetchRetry(url, attempts) {
  return fetch(url, {
    // Cookies are required to be present for Next.js' SSG "Preview Mode".
    // Cookies may also be required for `getServerSideProps`.
    //
    // > `fetch` won’t send cookies, unless you set the credentials init
    // > option.
    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
    //
    // > For maximum browser compatibility when it comes to sending &
    // > receiving cookies, always supply the `credentials: 'same-origin'`
    // > option instead of relying on the default.
    // https://github.com/github/fetch#caveats
    credentials: 'same-origin'
  }).then(res => {
    if (!res.ok) {
      if (attempts > 1 && res.status >= 500) {
        return fetchRetry(url, attempts - 1);
      }

      if (res.status === 404) {
        return res.json().then(data => {
          if (data.notFound) {
            return {
              notFound: SSG_DATA_NOT_FOUND
            };
          }

          throw new Error(`Failed to load static props`);
        });
      }

      throw new Error(`Failed to load static props`);
    }

    return res.json();
  });
}

function fetchNextData(dataHref, isServerRender) {
  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch(err => {
    // We should only trigger a server-side transition if this was caused
    // on a client-side transition. Otherwise, we'd get into an infinite
    // loop.
    if (!isServerRender) {
      (0, _routeLoader.markAssetError)(err);
    }

    throw err;
  });
}

class Router {
  /**
  * Map of all components loaded in `Router`
  */
  // Static Data Cache
  constructor(_pathname, _query, _as, {
    initialProps,
    pageLoader,
    App,
    wrapApp,
    Component,
    err,
    subscription,
    isFallback,
    locale,
    locales,
    defaultLocale,
    domainLocales
  }) {
    this.route = void 0;
    this.pathname = void 0;
    this.query = void 0;
    this.asPath = void 0;
    this.basePath = void 0;
    this.components = void 0;
    this.sdc = {};
    this.sub = void 0;
    this.clc = void 0;
    this.pageLoader = void 0;
    this._bps = void 0;
    this.events = void 0;
    this._wrapApp = void 0;
    this.isSsr = void 0;
    this.isFallback = void 0;
    this._inFlightRoute = void 0;
    this._shallow = void 0;
    this.locale = void 0;
    this.locales = void 0;
    this.defaultLocale = void 0;
    this.domainLocales = void 0;
    this.isReady = void 0;
    this.isLocaleDomain = void 0;
    this._idx = 0;

    this.onPopState = e => {
      const state = e.state;

      if (!state) {
        // We get state as undefined for two reasons.
        //  1. With older safari (< 8) and older chrome (< 34)
        //  2. When the URL changed with #
        //
        // In the both cases, we don't need to proceed and change the route.
        // (as it's already changed)
        // But we can simply replace the state with the new changes.
        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
        // So, doing the following for (1) does no harm.
        const {
          pathname,
          query
        } = this;
        this.changeState('replaceState', (0, _utils.formatWithValidation)({
          pathname: addBasePath(pathname),
          query
        }), (0, _utils.getURL)());
        return;
      }

      if (!state.__N) {
        return;
      }

      let forcedScroll;
      const {
        url,
        as,
        options,
        idx
      } = state;

      if (false) {}

      this._idx = idx;
      const {
        pathname
      } = (0, _parseRelativeUrl.parseRelativeUrl)(url); // Make sure we don't re-render on initial load,
      // can be caused by navigating back from an external site

      if (this.isSsr && as === this.asPath && pathname === this.pathname) {
        return;
      } // If the downstream application returns falsy, return.
      // They will then be responsible for handling the event.


      if (this._bps && !this._bps(state)) {
        return;
      }

      this.change('replaceState', url, as, Object.assign({}, options, {
        shallow: options.shallow && this._shallow,
        locale: options.locale || this.defaultLocale
      }), forcedScroll);
    }; // represents the current component key


    this.route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(_pathname); // set up the component cache (by route keys)

    this.components = {}; // We should not keep the cache, if there's an error
    // Otherwise, this cause issues when when going back and
    // come again to the errored page.

    if (_pathname !== '/_error') {
      this.components[this.route] = {
        Component,
        initial: true,
        props: initialProps,
        err,
        __N_SSG: initialProps && initialProps.__N_SSG,
        __N_SSP: initialProps && initialProps.__N_SSP
      };
    }

    this.components['/_app'] = {
      Component: App,
      styleSheets: [
        /* /_app does not need its stylesheets managed */
      ]
    }; // Backwards compat for Router.router.events
    // TODO: Should be remove the following major version as it was never documented

    this.events = Router.events;
    this.pageLoader = pageLoader;
    this.pathname = _pathname;
    this.query = _query; // if auto prerendered and dynamic route wait to update asPath
    // until after mount to prevent hydration mismatch

    const autoExportDynamic = (0, _isDynamic.isDynamicRoute)(_pathname) && self.__NEXT_DATA__.autoExport;

    this.asPath = autoExportDynamic ? _pathname : _as;
    this.basePath = basePath;
    this.sub = subscription;
    this.clc = null;
    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating
    // back from external site

    this.isSsr = true;
    this.isFallback = isFallback;
    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || !autoExportDynamic && !self.location.search);
    this.isLocaleDomain = false;

    if (false) {}

    if (false) {}
  }

  reload() {
    window.location.reload();
  }
  /**
  * Go back in history
  */


  back() {
    window.history.back();
  }
  /**
  * Performs a `pushState` with arguments
  * @param url of the route
  * @param as masks `url` for the browser
  * @param options object you can define `shallow` and other options
  */


  push(url, as, options = {}) {
    if (false) {}

    ;
    ({
      url,
      as
    } = prepareUrlAs(this, url, as));
    return this.change('pushState', url, as, options);
  }
  /**
  * Performs a `replaceState` with arguments
  * @param url of the route
  * @param as masks `url` for the browser
  * @param options object you can define `shallow` and other options
  */


  replace(url, as, options = {}) {
    ;
    ({
      url,
      as
    } = prepareUrlAs(this, url, as));
    return this.change('replaceState', url, as, options);
  }

  async change(method, url, as, options, forcedScroll) {
    var _options$scroll;

    if (!isLocalURL(url)) {
      window.location.href = url;
      return false;
    } // for static pages with query params in the URL we delay
    // marking the router ready until after the query is updated


    if (options._h) {
      this.isReady = true;
    } // Default to scroll reset behavior unless explicitly specified to be
    // `false`! This makes the behavior between using `Router#push` and a
    // `<Link />` consistent.


    options.scroll = !!((_options$scroll = options.scroll) != null ? _options$scroll : true);
    let localeChange = options.locale !== this.locale;

    if (false) { var _this$locales; }

    if (!options._h) {
      this.isSsr = false;
    } // marking route changes as a navigation start entry


    if (_utils.ST) {
      performance.mark('routeChange');
    }

    const {
      shallow = false
    } = options;
    const routeProps = {
      shallow
    };

    if (this._inFlightRoute) {
      this.abortComponentLoad(this._inFlightRoute, routeProps);
    }

    as = addBasePath(addLocale(hasBasePath(as) ? delBasePath(as) : as, options.locale, this.defaultLocale));
    const cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, this.locale);
    this._inFlightRoute = as; // If the url change is only related to a hash change
    // We should not proceed. We should only change the state.
    // WARNING: `_h` is an internal option for handing Next.js client-side
    // hydration. Your app should _never_ use this property. It may change at
    // any time without notice.

    if (!options._h && this.onlyAHashChange(cleanedAs)) {
      this.asPath = cleanedAs;
      Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?

      this.changeState(method, url, as, options);
      this.scrollToHash(cleanedAs);
      this.notify(this.components[this.route], null);
      Router.events.emit('hashChangeComplete', as, routeProps);
      return true;
    }

    let parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);
    let {
      pathname,
      query
    } = parsed; // The build manifest needs to be loaded before auto-static dynamic pages
    // get their query parameters to allow ensuring they can be parsed properly
    // when rewritten to

    let pages, rewrites;

    try {
      pages = await this.pageLoader.getPageList();
      ({
        __rewrites: rewrites
      } = await (0, _routeLoader.getClientBuildManifest)());
    } catch (err) {
      // If we fail to resolve the page list or client-build manifest, we must
      // do a server-side transition:
      window.location.href = as;
      return false;
    }

    parsed = this._resolveHref(parsed, pages);

    if (parsed.pathname !== pathname) {
      pathname = parsed.pathname;
      url = (0, _utils.formatWithValidation)(parsed);
    } // url and as should always be prefixed with basePath by this
    // point by either next/link or router.push/replace so strip the
    // basePath from the pathname to match the pages dir 1-to-1


    pathname = pathname ? (0, _normalizeTrailingSlash.removePathTrailingSlash)(delBasePath(pathname)) : pathname; // If asked to change the current URL we should reload the current page
    // (not location.reload() but reload getInitialProps and other Next.js stuffs)
    // We also need to set the method = replaceState always
    // as this should not go into the history (That's how browsers work)
    // We should compare the new asPath to the current asPath, not the url

    if (!this.urlIsNew(cleanedAs) && !localeChange) {
      method = 'replaceState';
    }

    let route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname); // we need to resolve the as value using rewrites for dynamic SSG
    // pages to allow building the data URL correctly

    let resolvedAs = as;

    if (false) {}

    if (!isLocalURL(as)) {
      if (true) {
        throw new Error(`Invalid href: "${url}" and as: "${as}", received relative href and external as` + `\nSee more info: https://err.sh/next.js/invalid-relative-url-external-as`);
      }

      window.location.href = as;
      return false;
    }

    resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);

    if ((0, _isDynamic.isDynamicRoute)(route)) {
      const parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(resolvedAs);
      const asPathname = parsedAs.pathname;
      const routeRegex = (0, _routeRegex.getRouteRegex)(route);
      const routeMatch = (0, _routeMatcher.getRouteMatcher)(routeRegex)(asPathname);
      const shouldInterpolate = route === asPathname;
      const interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {};

      if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {
        const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);

        if (missingParams.length > 0) {
          if (true) {
            console.warn(`${shouldInterpolate ? `Interpolating href` : `Mismatching \`as\` and \`href\``} failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \`href\`'s \`query\``);
          }

          throw new Error((shouldInterpolate ? `The provided \`href\` (${url}) value is missing query values (${missingParams.join(', ')}) to be interpolated properly. ` : `The provided \`as\` value (${asPathname}) is incompatible with the \`href\` value (${route}). `) + `Read more: https://err.sh/vercel/next.js/${shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'}`);
        }
      } else if (shouldInterpolate) {
        as = (0, _utils.formatWithValidation)(Object.assign({}, parsedAs, {
          pathname: interpolatedAs.result,
          query: omitParmsFromQuery(query, interpolatedAs.params)
        }));
      } else {
        // Merge params into `query`, overwriting any specified in search
        Object.assign(query, routeMatch);
      }
    }

    Router.events.emit('routeChangeStart', as, routeProps);

    try {
      let routeInfo = await this.getRouteInfo(route, pathname, query, as, resolvedAs, routeProps);
      let {
        error,
        props,
        __N_SSG,
        __N_SSP
      } = routeInfo; // handle redirect on client-transition

      if ((__N_SSG || __N_SSP) && props) {
        if (props.pageProps && props.pageProps.__N_REDIRECT) {
          const destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt
          // client-navigation if it is falling back to hard navigation if
          // it's not

          if (destination.startsWith('/')) {
            const parsedHref = (0, _parseRelativeUrl.parseRelativeUrl)(destination);

            this._resolveHref(parsedHref, pages, false);

            if (pages.includes(parsedHref.pathname)) {
              const {
                url: newUrl,
                as: newAs
              } = prepareUrlAs(this, destination, destination);
              return this.change(method, newUrl, newAs, options);
            }
          }

          window.location.href = destination;
          return new Promise(() => {});
        } // handle SSG data 404


        if (props.notFound === SSG_DATA_NOT_FOUND) {
          let notFoundRoute;

          try {
            await this.fetchComponent('/404');
            notFoundRoute = '/404';
          } catch (_) {
            notFoundRoute = '/_error';
          }

          routeInfo = await this.getRouteInfo(notFoundRoute, notFoundRoute, query, as, resolvedAs, {
            shallow: false
          });
        }
      }

      Router.events.emit('beforeHistoryChange', as, routeProps);
      this.changeState(method, url, as, options);

      if (true) {
        const appComp = this.components['/_app'].Component;
        window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;
      } // shallow routing is only allowed for same page URL changes.


      const isValidShallowRoute = options.shallow && this.route === route;
      await this.set(route, pathname, query, cleanedAs, routeInfo, forcedScroll || (isValidShallowRoute || !options.scroll ? null : {
        x: 0,
        y: 0
      })).catch(e => {
        if (e.cancelled) error = error || e;else throw e;
      });

      if (error) {
        Router.events.emit('routeChangeError', error, cleanedAs, routeProps);
        throw error;
      }

      if (false) {}

      Router.events.emit('routeChangeComplete', as, routeProps);
      return true;
    } catch (err) {
      if (err.cancelled) {
        return false;
      }

      throw err;
    }
  }

  changeState(method, url, as, options = {}) {
    if (true) {
      if (typeof window.history === 'undefined') {
        console.error(`Warning: window.history is not available.`);
        return;
      }

      if (typeof window.history[method] === 'undefined') {
        console.error(`Warning: window.history.${method} is not available`);
        return;
      }
    }

    if (method !== 'pushState' || (0, _utils.getURL)() !== as) {
      this._shallow = options.shallow;
      window.history[method]({
        url,
        as,
        options,
        __N: true,
        idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1
      }, // Most browsers currently ignores this parameter, although they may use it in the future.
      // Passing the empty string here should be safe against future changes to the method.
      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState
      '', as);
    }
  }

  async handleRouteInfoError(err, pathname, query, as, routeProps, loadErrorFail) {
    if (err.cancelled) {
      // bubble up cancellation errors
      throw err;
    }

    if ((0, _routeLoader.isAssetError)(err) || loadErrorFail) {
      Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons
      //  1. Page doesn't exists
      //  2. Page does exist in a different zone
      //  3. Internal error while loading the page
      // So, doing a hard reload is the proper way to deal with this.

      window.location.href = as; // Changing the URL doesn't block executing the current code path.
      // So let's throw a cancellation error stop the routing logic.

      throw buildCancellationError();
    }

    try {
      let Component;
      let styleSheets;
      let props;

      if (typeof Component === 'undefined' || typeof styleSheets === 'undefined') {
        ;
        ({
          page: Component,
          styleSheets
        } = await this.fetchComponent('/_error'));
      }

      const routeInfo = {
        props,
        Component,
        styleSheets,
        err,
        error: err
      };

      if (!routeInfo.props) {
        try {
          routeInfo.props = await this.getInitialProps(Component, {
            err,
            pathname,
            query
          });
        } catch (gipErr) {
          console.error('Error in error page `getInitialProps`: ', gipErr);
          routeInfo.props = {};
        }
      }

      return routeInfo;
    } catch (routeInfoErr) {
      return this.handleRouteInfoError(routeInfoErr, pathname, query, as, routeProps, true);
    }
  }

  async getRouteInfo(route, pathname, query, as, resolvedAs, routeProps) {
    try {
      const existingRouteInfo = this.components[route];

      if (routeProps.shallow && existingRouteInfo && this.route === route) {
        return existingRouteInfo;
      }

      const cachedRouteInfo = existingRouteInfo && 'initial' in existingRouteInfo ? undefined : existingRouteInfo;
      const routeInfo = cachedRouteInfo ? cachedRouteInfo : await this.fetchComponent(route).then(res => ({
        Component: res.page,
        styleSheets: res.styleSheets,
        __N_SSG: res.mod.__N_SSG,
        __N_SSP: res.mod.__N_SSP
      }));
      const {
        Component,
        __N_SSG,
        __N_SSP
      } = routeInfo;

      if (true) {
        const {
          isValidElementType
        } = __webpack_require__(/*! react-is */ "react-is");

        if (!isValidElementType(Component)) {
          throw new Error(`The default export is not a React Component in page: "${pathname}"`);
        }
      }

      let dataHref;

      if (__N_SSG || __N_SSP) {
        dataHref = this.pageLoader.getDataHref((0, _utils.formatWithValidation)({
          pathname,
          query
        }), resolvedAs, __N_SSG, this.locale);
      }

      const props = await this._getData(() => __N_SSG ? this._getStaticData(dataHref) : __N_SSP ? this._getServerData(dataHref) : this.getInitialProps(Component, // we provide AppTree later so this needs to be `any`
      {
        pathname,
        query,
        asPath: as
      }));
      routeInfo.props = props;
      this.components[route] = routeInfo;
      return routeInfo;
    } catch (err) {
      return this.handleRouteInfoError(err, pathname, query, as, routeProps);
    }
  }

  set(route, pathname, query, as, data, resetScroll) {
    this.isFallback = false;
    this.route = route;
    this.pathname = pathname;
    this.query = query;
    this.asPath = as;
    return this.notify(data, resetScroll);
  }
  /**
  * Callback to execute before replacing router state
  * @param cb callback to be executed
  */


  beforePopState(cb) {
    this._bps = cb;
  }

  onlyAHashChange(as) {
    if (!this.asPath) return false;
    const [oldUrlNoHash, oldHash] = this.asPath.split('#');
    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same

    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {
      return true;
    } // If the urls are change, there's more than a hash change


    if (oldUrlNoHash !== newUrlNoHash) {
      return false;
    } // If the hash has changed, then it's a hash only change.
    // This check is necessary to handle both the enter and
    // leave hash === '' cases. The identity case falls through
    // and is treated as a next reload.


    return oldHash !== newHash;
  }

  scrollToHash(as) {
    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value or `#top`
    // To mirror browsers

    if (hash === '' || hash === 'top') {
      window.scrollTo(0, 0);
      return;
    } // First we check if the element by id is found


    const idEl = document.getElementById(hash);

    if (idEl) {
      idEl.scrollIntoView();
      return;
    } // If there's no element with the id, we check the `name` property
    // To mirror browsers


    const nameEl = document.getElementsByName(hash)[0];

    if (nameEl) {
      nameEl.scrollIntoView();
    }
  }

  urlIsNew(asPath) {
    return this.asPath !== asPath;
  }

  _resolveHref(parsedHref, pages, applyBasePath = true) {
    const {
      pathname
    } = parsedHref;
    const cleanPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _denormalizePagePath.denormalizePagePath)(applyBasePath ? delBasePath(pathname) : pathname));

    if (cleanPathname === '/404' || cleanPathname === '/_error') {
      return parsedHref;
    } // handle resolving href for dynamic routes


    if (!pages.includes(cleanPathname)) {
      // eslint-disable-next-line array-callback-return
      pages.some(page => {
        if ((0, _isDynamic.isDynamicRoute)(page) && (0, _routeRegex.getRouteRegex)(page).re.test(cleanPathname)) {
          parsedHref.pathname = applyBasePath ? addBasePath(page) : page;
          return true;
        }
      });
    }

    parsedHref.pathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)(parsedHref.pathname);
    return parsedHref;
  }
  /**
  * Prefetch page code, you may wait for the data during page rendering.
  * This feature only works in production!
  * @param url the href of prefetched page
  * @param asPath the as path of the prefetched page
  */


  async prefetch(url, asPath = url, options = {}) {
    let parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);
    let {
      pathname
    } = parsed;

    if (false) {}

    const pages = await this.pageLoader.getPageList();
    parsed = this._resolveHref(parsed, pages, false);

    if (parsed.pathname !== pathname) {
      pathname = parsed.pathname;
      url = (0, _utils.formatWithValidation)(parsed);
    } // Prefetch is not supported in development mode because it would trigger on-demand-entries


    if (true) {
      return;
    }

    const route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);
    await Promise.all([this.pageLoader._isSsg(url).then(isSsg => {
      return isSsg ? this._getStaticData(this.pageLoader.getDataHref(url, asPath, true, typeof options.locale !== 'undefined' ? options.locale : this.locale)) : false;
    }), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);
  }

  async fetchComponent(route) {
    let cancelled = false;

    const cancel = this.clc = () => {
      cancelled = true;
    };

    const componentResult = await this.pageLoader.loadPage(route);

    if (cancelled) {
      const error = new Error(`Abort fetching component for route: "${route}"`);
      error.cancelled = true;
      throw error;
    }

    if (cancel === this.clc) {
      this.clc = null;
    }

    return componentResult;
  }

  _getData(fn) {
    let cancelled = false;

    const cancel = () => {
      cancelled = true;
    };

    this.clc = cancel;
    return fn().then(data => {
      if (cancel === this.clc) {
        this.clc = null;
      }

      if (cancelled) {
        const err = new Error('Loading initial props cancelled');
        err.cancelled = true;
        throw err;
      }

      return data;
    });
  }

  _getStaticData(dataHref) {
    const {
      href: cacheKey
    } = new URL(dataHref, window.location.href);

    if (false) {}

    return fetchNextData(dataHref, this.isSsr).then(data => {
      this.sdc[cacheKey] = data;
      return data;
    });
  }

  _getServerData(dataHref) {
    return fetchNextData(dataHref, this.isSsr);
  }

  getInitialProps(Component, ctx) {
    const {
      Component: App
    } = this.components['/_app'];

    const AppTree = this._wrapApp(App);

    ctx.AppTree = AppTree;
    return (0, _utils.loadGetInitialProps)(App, {
      AppTree,
      Component,
      router: this,
      ctx
    });
  }

  abortComponentLoad(as, routeProps) {
    if (this.clc) {
      Router.events.emit('routeChangeError', buildCancellationError(), as, routeProps);
      this.clc();
      this.clc = null;
    }
  }

  notify(data, resetScroll) {
    return this.sub(data, this.components['/_app'].Component, resetScroll);
  }

}

exports.default = Router;
Router.events = (0, _mitt.default)();

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/format-url.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/format-url.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.formatUrl = formatUrl;

var querystring = _interopRequireWildcard(__webpack_require__(/*! ./querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function () {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
} // Format function modified from nodejs
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


const slashedProtocols = /https?|ftp|gopher|file/;

function formatUrl(urlObj) {
  let {
    auth,
    hostname
  } = urlObj;
  let protocol = urlObj.protocol || '';
  let pathname = urlObj.pathname || '';
  let hash = urlObj.hash || '';
  let query = urlObj.query || '';
  let host = false;
  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : '';

  if (urlObj.host) {
    host = auth + urlObj.host;
  } else if (hostname) {
    host = auth + (~hostname.indexOf(':') ? `[${hostname}]` : hostname);

    if (urlObj.port) {
      host += ':' + urlObj.port;
    }
  }

  if (query && typeof query === 'object') {
    query = String(querystring.urlQueryToSearchParams(query));
  }

  let search = urlObj.search || query && `?${query}` || '';
  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname[0] !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash[0] !== '#') hash = '#' + hash;
  if (search && search[0] !== '?') search = '?' + search;
  pathname = pathname.replace(/[?#]/g, encodeURIComponent);
  search = search.replace('#', '%23');
  return `${protocol}${host}${pathname}${search}${hash}`;
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.isDynamicRoute = isDynamicRoute; // Identify /[param]/ in route string

const TEST_ROUTE = /\/\[[^/]+?\](?=\/|$)/;

function isDynamicRoute(route) {
  return TEST_ROUTE.test(route);
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.parseRelativeUrl = parseRelativeUrl;

var _utils = __webpack_require__(/*! ../../utils */ "./node_modules/next/dist/next-server/lib/utils.js");

var _querystring = __webpack_require__(/*! ./querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js");
/**
* Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative
* (e.g. `./hello`) then at least base must be.
* Absolute urls are rejected with one exception, in the browser, absolute urls that are on
* the current origin will be parsed as relative
*/


function parseRelativeUrl(url, base) {
  const globalBase = new URL(true ? 'http://n' : undefined);
  const resolvedBase = base ? new URL(base, globalBase) : globalBase;
  const {
    pathname,
    searchParams,
    search,
    hash,
    href,
    origin
  } = new URL(url, resolvedBase);

  if (origin !== globalBase.origin) {
    throw new Error(`invariant: invalid relative URL, router received ${url}`);
  }

  return {
    pathname,
    query: (0, _querystring.searchParamsToUrlQuery)(searchParams),
    search,
    hash,
    href: href.slice(globalBase.origin.length)
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/querystring.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.searchParamsToUrlQuery = searchParamsToUrlQuery;
exports.urlQueryToSearchParams = urlQueryToSearchParams;
exports.assign = assign;

function searchParamsToUrlQuery(searchParams) {
  const query = {};
  searchParams.forEach((value, key) => {
    if (typeof query[key] === 'undefined') {
      query[key] = value;
    } else if (Array.isArray(query[key])) {
      ;
      query[key].push(value);
    } else {
      query[key] = [query[key], value];
    }
  });
  return query;
}

function stringifyUrlQueryParam(param) {
  if (typeof param === 'string' || typeof param === 'number' && !isNaN(param) || typeof param === 'boolean') {
    return String(param);
  } else {
    return '';
  }
}

function urlQueryToSearchParams(urlQuery) {
  const result = new URLSearchParams();
  Object.entries(urlQuery).forEach(([key, value]) => {
    if (Array.isArray(value)) {
      value.forEach(item => result.append(key, stringifyUrlQueryParam(item)));
    } else {
      result.set(key, stringifyUrlQueryParam(value));
    }
  });
  return result;
}

function assign(target, ...searchParamsList) {
  searchParamsList.forEach(searchParams => {
    Array.from(searchParams.keys()).forEach(key => target.delete(key));
    searchParams.forEach((value, key) => target.append(key, value));
  });
  return target;
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites-noop.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites-noop.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = resolveRewrites;

function resolveRewrites() {}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getRouteMatcher = getRouteMatcher;

function getRouteMatcher(routeRegex) {
  const {
    re,
    groups
  } = routeRegex;
  return pathname => {
    const routeMatch = re.exec(pathname);

    if (!routeMatch) {
      return false;
    }

    const decode = param => {
      try {
        return decodeURIComponent(param);
      } catch (_) {
        const err = new Error('failed to decode param');
        err.code = 'DECODE_FAILED';
        throw err;
      }
    };

    const params = {};
    Object.keys(groups).forEach(slugName => {
      const g = groups[slugName];
      const m = routeMatch[g.pos];

      if (m !== undefined) {
        params[slugName] = ~m.indexOf('/') ? m.split('/').map(entry => decode(entry)) : g.repeat ? [decode(m)] : decode(m);
      }
    });
    return params;
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-regex.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getRouteRegex = getRouteRegex; // this isn't importing the escape-string-regex module
// to reduce bytes

function escapeRegex(str) {
  return str.replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&');
}

function parseParameter(param) {
  const optional = param.startsWith('[') && param.endsWith(']');

  if (optional) {
    param = param.slice(1, -1);
  }

  const repeat = param.startsWith('...');

  if (repeat) {
    param = param.slice(3);
  }

  return {
    key: param,
    repeat,
    optional
  };
}

function getRouteRegex(normalizedRoute) {
  const segments = (normalizedRoute.replace(/\/$/, '') || '/').slice(1).split('/');
  const groups = {};
  let groupIndex = 1;
  const parameterizedRoute = segments.map(segment => {
    if (segment.startsWith('[') && segment.endsWith(']')) {
      const {
        key,
        optional,
        repeat
      } = parseParameter(segment.slice(1, -1));
      groups[key] = {
        pos: groupIndex++,
        repeat,
        optional
      };
      return repeat ? optional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';
    } else {
      return `/${escapeRegex(segment)}`;
    }
  }).join(''); // dead code eliminate for browser since it's only needed
  // while generating routes-manifest

  if (true) {
    let routeKeyCharCode = 97;
    let routeKeyCharLength = 1; // builds a minimal routeKey using only a-z and minimal number of characters

    const getSafeRouteKey = () => {
      let routeKey = '';

      for (let i = 0; i < routeKeyCharLength; i++) {
        routeKey += String.fromCharCode(routeKeyCharCode);
        routeKeyCharCode++;

        if (routeKeyCharCode > 122) {
          routeKeyCharLength++;
          routeKeyCharCode = 97;
        }
      }

      return routeKey;
    };

    const routeKeys = {};
    let namedParameterizedRoute = segments.map(segment => {
      if (segment.startsWith('[') && segment.endsWith(']')) {
        const {
          key,
          optional,
          repeat
        } = parseParameter(segment.slice(1, -1)); // replace any non-word characters since they can break
        // the named regex

        let cleanedKey = key.replace(/\W/g, '');
        let invalidKey = false; // check if the key is still invalid and fallback to using a known
        // safe key

        if (cleanedKey.length === 0 || cleanedKey.length > 30) {
          invalidKey = true;
        }

        if (!isNaN(parseInt(cleanedKey.substr(0, 1)))) {
          invalidKey = true;
        }

        if (invalidKey) {
          cleanedKey = getSafeRouteKey();
        }

        routeKeys[cleanedKey] = key;
        return repeat ? optional ? `(?:/(?<${cleanedKey}>.+?))?` : `/(?<${cleanedKey}>.+?)` : `/(?<${cleanedKey}>[^/]+?)`;
      } else {
        return `/${escapeRegex(segment)}`;
      }
    }).join('');
    return {
      re: new RegExp(`^${parameterizedRoute}(?:/)?$`),
      groups,
      routeKeys,
      namedRegex: `^${namedParameterizedRoute}(?:/)?$`
    };
  }

  return {
    re: new RegExp(`^${parameterizedRoute}(?:/)?$`),
    groups
  };
}

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/utils.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.execOnce = execOnce;
exports.getLocationOrigin = getLocationOrigin;
exports.getURL = getURL;
exports.getDisplayName = getDisplayName;
exports.isResSent = isResSent;
exports.loadGetInitialProps = loadGetInitialProps;
exports.formatWithValidation = formatWithValidation;
exports.ST = exports.SP = exports.urlObjectKeys = void 0;

var _formatUrl = __webpack_require__(/*! ./router/utils/format-url */ "./node_modules/next/dist/next-server/lib/router/utils/format-url.js");
/**
* Utils
*/


function execOnce(fn) {
  let used = false;
  let result;
  return (...args) => {
    if (!used) {
      used = true;
      result = fn(...args);
    }

    return result;
  };
}

function getLocationOrigin() {
  const {
    protocol,
    hostname,
    port
  } = window.location;
  return `${protocol}//${hostname}${port ? ':' + port : ''}`;
}

function getURL() {
  const {
    href
  } = window.location;
  const origin = getLocationOrigin();
  return href.substring(origin.length);
}

function getDisplayName(Component) {
  return typeof Component === 'string' ? Component : Component.displayName || Component.name || 'Unknown';
}

function isResSent(res) {
  return res.finished || res.headersSent;
}

async function loadGetInitialProps(App, ctx) {
  if (true) {
    var _App$prototype;

    if ((_App$prototype = App.prototype) != null && _App$prototype.getInitialProps) {
      const message = `"${getDisplayName(App)}.getInitialProps()" is defined as an instance method - visit https://err.sh/vercel/next.js/get-initial-props-as-an-instance-method for more information.`;
      throw new Error(message);
    }
  } // when called from _app `ctx` is nested in `ctx`


  const res = ctx.res || ctx.ctx && ctx.ctx.res;

  if (!App.getInitialProps) {
    if (ctx.ctx && ctx.Component) {
      // @ts-ignore pageProps default
      return {
        pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx)
      };
    }

    return {};
  }

  const props = await App.getInitialProps(ctx);

  if (res && isResSent(res)) {
    return props;
  }

  if (!props) {
    const message = `"${getDisplayName(App)}.getInitialProps()" should resolve to an object. But found "${props}" instead.`;
    throw new Error(message);
  }

  if (true) {
    if (Object.keys(props).length === 0 && !ctx.ctx) {
      console.warn(`${getDisplayName(App)} returned an empty object from \`getInitialProps\`. This de-optimizes and prevents automatic static optimization. https://err.sh/vercel/next.js/empty-object-getInitialProps`);
    }
  }

  return props;
}

const urlObjectKeys = ['auth', 'hash', 'host', 'hostname', 'href', 'path', 'pathname', 'port', 'protocol', 'query', 'search', 'slashes'];
exports.urlObjectKeys = urlObjectKeys;

function formatWithValidation(url) {
  if (true) {
    if (url !== null && typeof url === 'object') {
      Object.keys(url).forEach(key => {
        if (urlObjectKeys.indexOf(key) === -1) {
          console.warn(`Unknown key passed via urlObject into url.format: ${key}`);
        }
      });
    }
  }

  return (0, _formatUrl.formatUrl)(url);
}

const SP = typeof performance !== 'undefined';
exports.SP = SP;
const ST = SP && typeof performance.mark === 'function' && typeof performance.measure === 'function';
exports.ST = ST;

/***/ }),

/***/ "./node_modules/next/dist/next-server/server/denormalize-page-path.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/server/denormalize-page-path.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
exports.__esModule=true;exports.normalizePathSep=normalizePathSep;exports.denormalizePagePath=denormalizePagePath;function normalizePathSep(path){return path.replace(/\\/g,'/');}function denormalizePagePath(page){page=normalizePathSep(page);if(page.startsWith('/index/')){page=page.slice(6);}else if(page==='/index'){page='/';}return page;}
//# sourceMappingURL=denormalize-page-path.js.map

/***/ }),

/***/ "./node_modules/next/link.js":
/*!***********************************!*\
  !*** ./node_modules/next/link.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./dist/client/link */ "./node_modules/next/dist/client/link.js")


/***/ }),

/***/ "./pages/index.js":
/*!************************!*\
  !*** ./pages/index.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/head */ "next/head");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _components_layout_Layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/layout/Layout */ "./components/layout/Layout.js");
/* harmony import */ var _components_layout_ImagenPrincipal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/layout/ImagenPrincipal */ "./components/layout/ImagenPrincipal.js");
/* harmony import */ var _components_layout_Servicios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/layout/Servicios */ "./components/layout/Servicios.js");
/* harmony import */ var _components_layout_RentaEquipo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/layout/RentaEquipo */ "./components/layout/RentaEquipo.js");
/* harmony import */ var _components_layout_ReparacionEquipo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/layout/ReparacionEquipo */ "./components/layout/ReparacionEquipo.js");
/* harmony import */ var _components_layout_VentaEquipo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/layout/VentaEquipo */ "./components/layout/VentaEquipo.js");
/* harmony import */ var _components_layout_Clientes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../components/layout/Clientes */ "./components/layout/Clientes.js");
/* harmony import */ var _components_layout_VideosSection__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../components/layout/VideosSection */ "./components/layout/VideosSection.js");
/* harmony import */ var _components_layout_Perfil__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../components/layout/Perfil */ "./components/layout/Perfil.js");
/* harmony import */ var _components_layout_Contacto__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/layout/Contacto */ "./components/layout/Contacto.js");
/* harmony import */ var _components_layout_Footer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../components/layout/Footer */ "./components/layout/Footer.js");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_13__);
var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\pages\\index.js";















const Home = () => {
  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("div", {
    className: "ya",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 17,
      columnNumber: 5
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(next_head__WEBPACK_IMPORTED_MODULE_1___default.a, {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 18,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {
    name: "google-site-verification",
    content: "uPeVjw4M8K7n7qTtHKDwKjewwEiSZ-ln0dbeu7ZVveo",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 19,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("html", {
    lang: "es",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 20,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("title", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 21,
      columnNumber: 9
    }
  }, "Handheld|Renta, Reparaci\xF3n y Venta|Impresoras Zebra|PDA|Lectores de C\xF3digos de Barras"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {
    name: "description",
    content: "Renta, reparaci\xF3n y venta de handheld, terminal port\xE1til, PDA, f\xE1cil y r\xE1pido. Lector de c\xF3digo de barras e impresoras de etiquetas Honeywell y Zebra. \xA1Atenci\xF3n inmediata!",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 25,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("link", {
    rel: "shortcut icon",
    href: "/logo-copia.png",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 29,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {
    name: "keywords",
    content: "Handheld, hand held, PDA, terminal port\xE1til, venta, Jalisco, Guadalajara, Monterrey, Nuevo Le\xF3n, compra, renta, reparaci\xF3n, mantenimiento,  impresoras, impresoras de etiquetas, lector de c\xF3digos de barras, accesorios y consumibles, honeywell, intermec, symbol, motorola, zebra, telxon, lxe, newland, handheld products, psion, p\xF3lizas de reparaci\xF3n, p\xF3lizas de servicio, equipo de uso rudo, equipo para venta en ruta, impresoras m\xF3viles, alquiler, inventario, diagnostico gratis, cotizaci\xF3n gratis, arrendamiento, soluciones m\xF3viles, smartphone uso rudo, impresoras de credenciales, handheld repair",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 30,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {
    name: "robots",
    content: "index,follow,all",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 34,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {
    property: "og:title",
    content: "Handheld|Renta, Reparaci\xF3n y Venta|Impresoras Zebra|PDA|Lectores de C\xF3digos de Barras",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 35,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {
    property: "og:image",
    content: "https://i.ibb.co/42K3Zdn/logo-copia.png",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 39,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {
    property: "og:type",
    content: "website",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 43,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {
    property: "og:description",
    content: "Renta, reparaci\xF3n y venta de handheld, terminal port\xE1til, PDA, f\xE1cil y r\xE1pido. Lector de c\xF3digo de barras e impresoras de etiquetas Honeywell y Zebra. \xA1Atenci\xF3n inmediata!",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 44,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("meta", {
    name: "twitter:card",
    content: "summary_large_image",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 48,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("link", {
    rel: "icon",
    type: "image/png",
    sizes: "160x99",
    href: "https://i.ibb.co/42K3Zdn/logo-copia.png",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 49,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("link", {
    rel: "preconnect",
    href: "https://fonts.gstatic.com",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 55,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("link", {
    href: "https://fonts.googleapis.com/css2?family=Raleway&display=swap",
    rel: "stylesheet",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 56,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("script", {
    dangerouslySetInnerHTML: {
      __html: `(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start': new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
            j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
            'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
            })(window,document,'script','dataLayer','GTM-KXHWDC2');`
    },
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 62,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("script", {
    async: true,
    src: "https://www.googletagmanager.com/gtag/js?id=AW-728249895",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 72,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("script", {
    dangerouslySetInnerHTML: {
      __html: `window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'AW-728249895');`
    },
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 76,
      columnNumber: 9
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("noscript", {
    dangerouslySetInnerHTML: {
      __html: `<iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KXHWDC2"
          height="0" width="0" style="display:none;visibility:hidden"></iframe>`
    },
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 83,
      columnNumber: 7
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("script", {
    src: "jquery.min.js",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 89,
      columnNumber: 1
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(_components_layout_Layout__WEBPACK_IMPORTED_MODULE_2__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 90,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(_components_layout_ImagenPrincipal__WEBPACK_IMPORTED_MODULE_3__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 91,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(_components_layout_Servicios__WEBPACK_IMPORTED_MODULE_4__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 93,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(_components_layout_RentaEquipo__WEBPACK_IMPORTED_MODULE_5__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 95,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(_components_layout_ReparacionEquipo__WEBPACK_IMPORTED_MODULE_6__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 97,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(_components_layout_VentaEquipo__WEBPACK_IMPORTED_MODULE_7__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 99,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(_components_layout_VideosSection__WEBPACK_IMPORTED_MODULE_9__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 101,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(_components_layout_Clientes__WEBPACK_IMPORTED_MODULE_8__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 103,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(_components_layout_Perfil__WEBPACK_IMPORTED_MODULE_10__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 105,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(_components_layout_Contacto__WEBPACK_IMPORTED_MODULE_11__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 107,
      columnNumber: 9
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])(_components_layout_Footer__WEBPACK_IMPORTED_MODULE_12__["default"], {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 109,
      columnNumber: 9
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("script", {
    src: "/static/contextmenu.js",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 112,
      columnNumber: 7
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_13__["jsx"])("script", {
    src: "/static/cut copy paste.js",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 113,
      columnNumber: 7
    }
  }));
};

/* harmony default export */ __webpack_exports__["default"] = (Home);

/***/ }),

/***/ "./static/PoliticaTex.js":
/*!*******************************!*\
  !*** ./static/PoliticaTex.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/react */ "@emotion/react");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_emotion_react__WEBPACK_IMPORTED_MODULE_1__);
var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\static\\PoliticaTex.js";



const Politicas = () => {
  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 16
    }
  }, "POL\xCDTICA DE PRIVACIDAD")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 59
    }
  }, "\xA0"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 72
    }
  }, "El presente Pol\xEDtica de Privacidad establece los t\xE9rminos en que Hand Held Solutions usa y protege la informaci\xF3n que es proporcionada por sus usuarios al momento de utilizar su sitio web. Esta compa\xF1\xEDa est\xE1 comprometida con la seguridad de los datos de sus usuarios. Cuando le pedimos llenar los campos de informaci\xF3n personal con la cual usted pueda ser identificado, lo hacemos asegurando que s\xF3lo se emplear\xE1 de acuerdo con los t\xE9rminos de este documento. Sin embargo esta Pol\xEDtica de Privacidad puede cambiar con el tiempo o ser actualizada por lo que le recomendamos y enfatizamos revisar continuamente esta p\xE1gina para asegurarse que est\xE1 de acuerdo con dichos cambios."), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 755
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 758
    }
  }, "Informaci\xF3n que es recogida")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 806
    }
  }, "Nuestro sitio web podr\xE1 recoger informaci\xF3n personal por ejemplo: Nombre,\xA0 informaci\xF3n de contacto como\xA0 su direcci\xF3n de correo electr\xF3nica e informaci\xF3n demogr\xE1fica. As\xED mismo cuando sea necesario podr\xE1 ser requerida informaci\xF3n espec\xEDfica para procesar alg\xFAn pedido o realizar una entrega o facturaci\xF3n."), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 1128
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 1131
    }
  }, "Uso de la informaci\xF3n recogida")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 1182
    }
  }, "Nuestro sitio web emplea la informaci\xF3n con el fin de proporcionar el mejor servicio posible, particularmente para mantener un registro de usuarios, de pedidos en caso que aplique, y mejorar nuestros productos y servicios. \xA0Es posible que sean enviados correos electr\xF3nicos peri\xF3dicamente a trav\xE9s de nuestro sitio con ofertas especiales, nuevos productos y otra informaci\xF3n publicitaria que consideremos relevante para usted o que pueda brindarle alg\xFAn beneficio, estos correos electr\xF3nicos ser\xE1n enviados a la direcci\xF3n que usted proporcione y podr\xE1n ser cancelados en cualquier momento."), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 1783
    }
  }, "Hand Held Solutions est\xE1 altamente comprometido para cumplir con el compromiso de mantener su informaci\xF3n segura. Usamos los sistemas m\xE1s avanzados y los actualizamos constantemente para asegurarnos que no exista ning\xFAn acceso no autorizado."), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 2031
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 2034
    }
  }, "Cookies")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 2062
    }
  }, "Una cookie se refiere a un fichero que es enviado con la finalidad de solicitar permiso para almacenarse en su ordenador, al aceptar dicho fichero se crea y la cookie sirve entonces para tener informaci\xF3n respecto al tr\xE1fico web, y tambi\xE9n facilita las futuras visitas a una web recurrente. Otra funci\xF3n que tienen las cookies es que con ellas las web pueden reconocerte individualmente y por tanto brindarte el mejor servicio personalizado de su web."), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 2520
    }
  }, "Nuestro sitio web emplea las cookies para poder identificar las p\xE1ginas que son visitadas y su frecuencia. Esta informaci\xF3n es empleada \xFAnicamente para an\xE1lisis estad\xEDstico y despu\xE9s la informaci\xF3n se elimina de forma permanente. Usted puede eliminar las cookies en cualquier momento desde su ordenador. Sin embargo las cookies ayudan a proporcionar un mejor servicio de los sitios web, est\xE1s no dan acceso a informaci\xF3n de su ordenador ni de usted, a menos de que usted as\xED lo quiera y la proporcione directamente, ", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("a", {
    href: "",
    target: "_blank",
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 3039
    }
  }), ". Usted puede aceptar o negar el uso de cookies, sin embargo la mayor\xEDa de navegadores aceptan cookies autom\xE1ticamente pues sirve para tener un mejor servicio web. Tambi\xE9n usted puede cambiar la configuraci\xF3n de su ordenador para declinar las cookies. Si se declinan es posible que no pueda utilizar algunos de nuestros servicios."), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 3404
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 3407
    }
  }, "Enlaces a Terceros")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 3446
    }
  }, "Este sitio web pudiera contener enlaces a otros sitios que pudieran ser de su inter\xE9s. Una vez que usted de clic en estos enlaces y abandone nuestra p\xE1gina, ya no tenemos control sobre al sitio al que es redirigido y por lo tanto no somos responsables de los t\xE9rminos o privacidad ni de la protecci\xF3n de sus datos en esos otros sitios terceros. Dichos sitios est\xE1n sujetos a sus propias pol\xEDticas de privacidad por lo cual es recomendable que los consulte para confirmar que usted est\xE1 de acuerdo con estas."), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 3960
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("strong", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 3963
    }
  }, "Control de su informaci\xF3n personal")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 4018
    }
  }, "Esta compa\xF1\xEDa no vender\xE1, ceder\xE1 ni distribuir\xE1 la informaci\xF3n personal que es recopilada sin su consentimiento, salvo que sea requerido por un juez con un orden judicial."), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 4196
    }
  }, "Hand Held Solutions Se reserva el derecho de cambiar los t\xE9rminos de la presente Pol\xEDtica de Privacidad en cualquier momento."), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_1__["jsx"])("p", {
    __self: undefined,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6,
      columnNumber: 4328
    }
  }));
};

/* harmony default export */ __webpack_exports__["default"] = (Politicas);

/***/ }),

/***/ "@emotion/react":
/*!*********************************!*\
  !*** external "@emotion/react" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@emotion/react");

/***/ }),

/***/ "@emotion/styled/base":
/*!***************************************!*\
  !*** external "@emotion/styled/base" ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@emotion/styled/base");

/***/ }),

/***/ "@fortawesome/free-solid-svg-icons":
/*!****************************************************!*\
  !*** external "@fortawesome/free-solid-svg-icons" ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@fortawesome/free-solid-svg-icons");

/***/ }),

/***/ "@fortawesome/react-fontawesome":
/*!*************************************************!*\
  !*** external "@fortawesome/react-fontawesome" ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@fortawesome/react-fontawesome");

/***/ }),

/***/ "emailjs-com":
/*!******************************!*\
  !*** external "emailjs-com" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("emailjs-com");

/***/ }),

/***/ "embla-carousel-react":
/*!***************************************!*\
  !*** external "embla-carousel-react" ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("embla-carousel-react");

/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/head");

/***/ }),

/***/ "next/router":
/*!******************************!*\
  !*** external "next/router" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("next/router");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),

/***/ "react-bootstrap":
/*!**********************************!*\
  !*** external "react-bootstrap" ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-bootstrap");

/***/ }),

/***/ "react-icons/md":
/*!*********************************!*\
  !*** external "react-icons/md" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-icons/md");

/***/ }),

/***/ "react-iframe":
/*!*******************************!*\
  !*** external "react-iframe" ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-iframe");

/***/ }),

/***/ "react-is":
/*!***************************!*\
  !*** external "react-is" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-is");

/***/ }),

/***/ "react-spring":
/*!*******************************!*\
  !*** external "react-spring" ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("react-spring");

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,