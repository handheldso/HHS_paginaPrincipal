{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\codigo de prueba HHS\\\\components\\\\layout\\\\Servicios.js\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState } from \"react\";\nimport Head from \"next/head\";\nimport Link from \"next/link\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { Modal, Button, Carousel } from \"react-bootstrap\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst Servicios = () => {\n  const Servicios = _styled(\"div\", false ? {\n    target: \"eopc5ll14\"\n  } : {\n    target: \"eopc5ll14\",\n    label: \"Servicios\"\n  })(false ? {\n    name: \"hltamm\",\n    styles: \"margin-top:2rem\"\n  } : {\n    name: \"hltamm\",\n    styles: \"margin-top:2rem\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const ServiciosDif = _styled(\"div\", false ? {\n    target: \"eopc5ll13\"\n  } : {\n    target: \"eopc5ll13\",\n    label: \"ServiciosDif\"\n  })(false ? {\n    name: \"18ko2av\",\n    styles: \"text-align:center;font-size:18px\"\n  } : {\n    name: \"18ko2av\",\n    styles: \"text-align:center;font-size:18px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Eslogan = _styled(\"p\", false ? {\n    target: \"eopc5ll12\"\n  } : {\n    target: \"eopc5ll12\",\n    label: \"Eslogan\"\n  })(false ? {\n    name: \"1oq9yjh\",\n    styles: \"font-weight:bold;font-size:25px\"\n  } : {\n    name: \"1oq9yjh\",\n    styles: \"font-weight:bold;font-size:25px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Sello = _styled(\"div\", false ? {\n    target: \"eopc5ll11\"\n  } : {\n    target: \"eopc5ll11\",\n    label: \"Sello\"\n  })(false ? {\n    name: \"1l9ozfu\",\n    styles: \"width:100%;margin-bottom:3.5rem;display:flex;justify-content:space-around;text-align:center\"\n  } : {\n    name: \"1l9ozfu\",\n    styles: \"width:100%;margin-bottom:3.5rem;display:flex;justify-content:space-around;text-align:center\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const IMG = _styled(\"img\", false ? {\n    target: \"eopc5ll10\"\n  } : {\n    target: \"eopc5ll10\",\n    label: \"IMG\"\n  })(false ? {\n    name: \"1g4rrwk\",\n    styles: \"width:35%;@media (max-width: 650px){width:60%;}@media (max-width: 410px){width:70%;}\"\n  } : {\n    name: \"1g4rrwk\",\n    styles: \"width:35%;@media (max-width: 650px){width:60%;}@media (max-width: 410px){width:70%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const IMGDSD = _styled(\"img\", false ? {\n    target: \"eopc5ll9\"\n  } : {\n    target: \"eopc5ll9\",\n    label: \"IMGDSD\"\n  })(false ? {\n    name: \"1a529y1\",\n    styles: \"width:30%;cursor:pointer;@media (max-width: 650px){width:60%;}\"\n  } : {\n    name: \"1a529y1\",\n    styles: \"width:30%;cursor:pointer;@media (max-width: 650px){width:60%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const IMGID = _styled(\"img\", false ? {\n    target: \"eopc5ll8\"\n  } : {\n    target: \"eopc5ll8\",\n    label: \"IMGID\"\n  })(false ? {\n    name: \"1a529y1\",\n    styles: \"width:30%;cursor:pointer;@media (max-width: 650px){width:60%;}\"\n  } : {\n    name: \"1a529y1\",\n    styles: \"width:30%;cursor:pointer;@media (max-width: 650px){width:60%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const RRV = _styled(\"div\", false ? {\n    target: \"eopc5ll7\"\n  } : {\n    target: \"eopc5ll7\",\n    label: \"RRV\"\n  })(false ? {\n    name: \"1cgrli9\",\n    styles: \"margin-top:2rem;width:100%;margin:auto\"\n  } : {\n    name: \"1cgrli9\",\n    styles: \"margin-top:2rem;width:100%;margin:auto\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Card = _styled(\"div\", false ? {\n    target: \"eopc5ll6\"\n  } : {\n    target: \"eopc5ll6\",\n    label: \"Card\"\n  })(false ? {\n    name: \"1er8lxt\",\n    styles: \"margin-bottom:20px;width:20%;margin:auto;@media (max-width: 1409px){width:80%;}@media (max-width: 900px){margin-bottom:3.5rem;}\"\n  } : {\n    name: \"1er8lxt\",\n    styles: \"margin-bottom:20px;width:20%;margin:auto;@media (max-width: 1409px){width:80%;}@media (max-width: 900px){margin-bottom:3.5rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const CardImg = _styled(\"img\", false ? {\n    target: \"eopc5ll5\"\n  } : {\n    target: \"eopc5ll5\",\n    label: \"CardImg\"\n  })(false ? {\n    name: \"1dgczc\",\n    styles: \"box-shadow:0px 1px 5px black;border-radius:1rem!important;width:70%;max-height:160px\"\n  } : {\n    name: \"1dgczc\",\n    styles: \"box-shadow:0px 1px 5px black;border-radius:1rem!important;width:70%;max-height:160px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const CardTitulo = _styled(\"h5\", false ? {\n    target: \"eopc5ll4\"\n  } : {\n    target: \"eopc5ll4\",\n    label: \"CardTitulo\"\n  })(false ? {\n    name: \"cd6lrp\",\n    styles: \"font-weight:bold;margin-top:10px;margin-bottom:10px;font-size:26px\"\n  } : {\n    name: \"cd6lrp\",\n    styles: \"font-weight:bold;margin-top:10px;margin-bottom:10px;font-size:26px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const CardTexto = _styled(\"p\", false ? {\n    target: \"eopc5ll3\"\n  } : {\n    target: \"eopc5ll3\",\n    label: \"CardTexto\"\n  })(false ? {\n    name: \"11wtnj2\",\n    styles: \"font-size:16px;text-align:left;@media (max-width: 1409px){text-align:center;padding:5px;}@media (max-width: 992px){text-align:center;}@media (max-width: 585px){font-size:15px;}\"\n  } : {\n    name: \"11wtnj2\",\n    styles: \"font-size:16px;text-align:left;@media (max-width: 1409px){text-align:center;padding:5px;}@media (max-width: 992px){text-align:center;}@media (max-width: 585px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Informacion = _styled(\"a\", false ? {\n    target: \"eopc5ll2\"\n  } : {\n    target: \"eopc5ll2\",\n    label: \"Informacion\"\n  })(false ? {\n    name: \"2pg1ps\",\n    styles: \"font-size:18px\"\n  } : {\n    name: \"2pg1ps\",\n    styles: \"font-size:18px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TextDiv = _styled(\"div\", false ? {\n    target: \"eopc5ll1\"\n  } : {\n    target: \"eopc5ll1\",\n    label: \"TextDiv\"\n  })(false ? {\n    name: \"iwfa3z\",\n    styles: \"width:40%;margin:0px auto;@media (max-width: 1400px){width:100%;}@media (max-width: 960px){width:70%;}@media (max-width: 634px){width:60%;}@media (max-width: 450px){width:75%;}\"\n  } : {\n    name: \"iwfa3z\",\n    styles: \"width:40%;margin:0px auto;@media (max-width: 1400px){width:100%;}@media (max-width: 960px){width:70%;}@media (max-width: 634px){width:60%;}@media (max-width: 450px){width:75%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Text = _styled(\"p\", false ? {\n    target: \"eopc5ll0\"\n  } : {\n    target: \"eopc5ll0\",\n    label: \"Text\"\n  })(false ? {\n    name: \"1s06api\",\n    styles: \"font-size:19px;font-weight:bold;@media (max-width: 960px){font-size:16px;}@media (max-width: 899px){font-size:14px;}@media (max-width: 699px){font-size:12px;}@media (max-width: 450px){font-size:10px;}\"\n  } : {\n    name: \"1s06api\",\n    styles: \"font-size:19px;font-weight:bold;@media (max-width: 960px){font-size:16px;}@media (max-width: 899px){font-size:14px;}@media (max-width: 699px){font-size:12px;}@media (max-width: 450px){font-size:10px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const {\n    0: abiertoModal,\n    1: cambiarAbiertoModal\n  } = useState(false);\n  const {\n    0: abiertoModalD,\n    1: cambiarAbiertoModalD\n  } = useState(false);\n  const {\n    0: abiertoModalE,\n    1: cambiarAbiertoModalE\n  } = useState(false);\n  const {\n    0: abiertoModalTg,\n    1: cambiarAbiertoModalTg\n  } = useState(false);\n\n  const abrirModal = () => {\n    cambiarAbiertoModal(true);\n  };\n\n  const cerrarModal = () => {\n    cambiarAbiertoModal(false);\n  };\n\n  const abrirModalD = () => {\n    cambiarAbiertoModalD(true);\n  };\n\n  const cerrarModalD = () => {\n    cambiarAbiertoModalD(false);\n  };\n\n  const abrirModalE = () => {\n    cambiarAbiertoModalE(true);\n  };\n\n  const cerrarModalE = () => {\n    cambiarAbiertoModalE(false);\n  };\n\n  const abrirModalTg = () => {\n    cambiarAbiertoModalTg(true);\n  };\n\n  const cerrarModalTg = () => {\n    cambiarAbiertoModalTg(false);\n  };\n\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(\"link\", {\n    rel: \"stylesheet preload\",\n    as: \"style\",\n    href: \"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\",\n    integrity: \"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\",\n    crossorigin: \"anonymous\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  })), ___EmotionJSX(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(Servicios, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(ServiciosDif, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }, \"Hand Held Solutions cuenta con a\\xF1os de experiencia ofreciendo los servicios de renta, reparaci\\xF3n y venta de Hand Held\\xB4s, lectores de c\\xF3digos 1D y 2D, impresoras industriales, de escritorio y port\\xE1tiles. Contamos con los accesorios y consumibles adecuados para cada equipo.\", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }), \"Tenemos cobertura a toda la Rep\\xFAblica Mexicana: Jalisco, Nuevo Le\\xF3n, Aguascalientes, Baja California, Campeche, Chiapas, Chihuahua, Coahuila, Colima, Durango, Guanajuato, Guerrero, Hidalgo, Michoac\\xE1n, Morelos, Nayarit, Oaxaca, Puebla, Quer\\xE9taro, Quintana Roo, San Luis Potos\\xED, Sinaloa, Sonora, Tabasco, Tamaulipas, Tlaxcala, Veracruz, Yucat\\xE1n y Zacatecas.\"), ___EmotionJSX(Sello, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"idsd mtoop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(IMGDSD, {\n    src: \"/img/iconodsd.webp\",\n    alt: \"garanti hand held\",\n    onClick: abrirModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 17\n    }\n  }), ___EmotionJSX(TextDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 19\n    }\n  }, \"Conozca nuestra \\\"Soluci\\xF3n DSD\\\" para venta en ruta\"))), ___EmotionJSX(\"div\", {\n    className: \"idsd mtoop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(IMGDSD, {\n    src: \"/img/impresi\\xF3n de credenciales.webp\",\n    alt: \"garanti hand held\",\n    onClick: abrirModalE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 17\n    }\n  }), ___EmotionJSX(TextDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 19\n    }\n  }, \"Impresion de Credenciales\"))), ___EmotionJSX(\"div\", {\n    className: \"idsd mtoop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(IMGDSD, {\n    src: \"/img/Icono_etiquetas.webp\",\n    alt: \"garanti hand held\",\n    onClick: abrirModalTg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 17\n    }\n  }), ___EmotionJSX(TextDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 19\n    }\n  }, \"Impresion de Etiquetas\"))), ___EmotionJSX(\"div\", {\n    className: \"idsd mtoop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(IMGID, {\n    src: \"/img/funda.webp\",\n    alt: \"garanti hand held\",\n    onClick: abrirModalD,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }\n  }), ___EmotionJSX(TextDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 19\n    }\n  }, \"Venta de fundas\")))), ___EmotionJSX(Eslogan, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  }, \"\\xA1F\\xC1CIL, R\\xC1PIDO Y FLEXIBLE!\")), ___EmotionJSX(RRV, {\n    className: \" mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"cardds\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(Card, {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(CardImg, {\n    src: \"/img/Renta handheld lector de codigos.webp\",\n    alt: \"Renta de Hand Held Impresoras de Etiquetas y Lectores de codigo de barras\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 17\n    }\n  }), ___EmotionJSX(CardTitulo, {\n    className: \"text-center pt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 17\n    }\n  }, \"Renta de equipo\"), ___EmotionJSX(CardTexto, {\n    className: \"pt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 19\n    }\n  }), \"\\xA1Primero tendr\\xE1 el equipo en operaci\\xF3n y despu\\xE9s realizar\\xE1 el pago! \", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 25\n    }\n  }), ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 19\n    }\n  }), \" \\xA1Sin dep\\xF3sito inicial e incluye todos los accesorios necesarios! \", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 62\n    }\n  }), ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 19\n    }\n  }), \" \\xA1Reparaciones por uso normal y accidentes sin costo adicional! \", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 60\n    }\n  }), ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 19\n    }\n  }), \" \\xA1Puede cancelar en cualquier momento y sin penalizaci\\xF3n! \", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 57\n    }\n  }), ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 19\n    }\n  }), \" \\xA1Renta de handhelds, lectores de c\\xF3digos de barras, impresoras de etiquetas y credenciales! \", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 59\n    }\n  })), ___EmotionJSX(Informacion, {\n    className: \"btn btn-primary btn-lg mt-3 mim\",\n    role: \"button\",\n    href: \"#renta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 17\n    }\n  }, \"M\\xE1s Informaci\\xF3n\")), ___EmotionJSX(Card, {\n    className: \" text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(CardImg, {\n    src: \"/img/Reparacion handheld lector de codigos.webp\",\n    alt: \"Reparacion de Hand Held Impresoras de Etiquetas y Lectores de codigo de barras\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 17\n    }\n  }), ___EmotionJSX(CardTitulo, {\n    className: \"text-center pt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 17\n    }\n  }, \"Reparaci\\xF3n de equipo\"), ___EmotionJSX(CardTexto, {\n    className: \"pt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 19\n    }\n  }), \" \\xA1Diagn\\xF3stico sin costo y reparaciones en tres d\\xEDas!\", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 19\n    }\n  }), \" \\xA1Primero le reparamos y entregamos su equipo y despu\\xE9s realiza el pago! \", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 69\n    }\n  }), ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 19\n    }\n  }), \" \\xA1Reparaci\\xF3n en sus instalaciones sin costo adicional! \", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 61\n    }\n  }), ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 19\n    }\n  }), \" \\xA1Nuestras reparaciones cuenta con garant\\xEDa 100! (100 d\\xEDas de garant\\xEDa)!\", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 19\n    }\n  }), \" \\xA1Soporte t\\xE9cnico en sitio, sin costo, dentro del \\xE1rea metropolitana! \", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 50\n    }\n  }), ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 19\n    }\n  }), \" \\xA1Reparaci\\xF3n de handhelds, lectores de c\\xF3digos de barras, impresoras de etiquetas y credenciales! \", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 59\n    }\n  })), ___EmotionJSX(Informacion, {\n    className: \"btn btn-primary btn-lg mt-3 mim\",\n    role: \"button\",\n    href: \"#reparacion\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 17\n    }\n  }, \"M\\xE1s Informaci\\xF3n\")), ___EmotionJSX(Card, {\n    className: \" text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(CardImg, {\n    src: \"/img/Venta handheld lector de c\\xF3digos.webp\",\n    alt: \"Venta de Hand Held Impresoras de Etiquetas y Lectores de codigo de barras\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 17\n    }\n  }), ___EmotionJSX(CardTitulo, {\n    className: \"text-center pt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 17\n    }\n  }, \"Venta de equipo\"), ___EmotionJSX(CardTexto, {\n    className: \"pt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 19\n    }\n  }), \" \\xA1Los mejores precios, cr\\xE9dito y planes de financiamiento! \", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 55\n    }\n  }), ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 19\n    }\n  }), \" \\xA1Equipo demo sin costo para pruebas en sus instalaciones! \", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 60\n    }\n  }), ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 19\n    }\n  }), \" \\xA1Seguimiento hombro a hombro durante pruebas e implementaciones! \", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 62\n    }\n  }), ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 19\n    }\n  }), \" \\xA1Soporte t\\xE9cnico preventa y postventa con l\\xEDnea directa las 24 horas!\", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(FontAwesomeIcon, {\n    icon: faCheckCircle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 19\n    }\n  }), \" \\xA1Venta de handhelds, lectores de c\\xF3digos de barras, impresoras de etiquetas y credenciales! \", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 59\n    }\n  })), ___EmotionJSX(Informacion, {\n    className: \"btn btn-primary btn-lg mt-3 mim\",\n    role: \"button\",\n    href: \"#venta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 17\n    }\n  }, \"M\\xE1s Informaci\\xF3n\")))))), ___EmotionJSX(Modal, {\n    show: abiertoModal,\n    onHide: cerrarModal,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 11\n    }\n  }, \"Conozca nuestra \\\"Soluci\\xF3n DSD\\\" para venta en ruta\")), ___EmotionJSX(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 9\n    }\n  }, \"Adquiera la \\\"Soluci\\xF3n DSD\\\" para venta en ruta. Herramienta tecnol\\xF3gica que le permitir\\xE1 administrar sus visitas, tiempos de entrega e inventario en todo momento de la ruta. Controle a su fuerza de ventas y monitoree su desempe\\xF1o con nuestra aplicaci\\xF3n \\\"Direct Store Delivery\\\". Implemente el software que cumplir\\xE1 con sus necesidades y disponga sin costo adicional de la renta de una handheld e impresora port\\xE1til.\", ___EmotionJSX(\"div\", {\n    className: \"botmodal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/DSD-venta-en-ruta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(Button, {\n    color: \"primary\",\n    \"w-50\": true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 15\n    }\n  }, \"\\xA1Conozcalo!\")))), ___EmotionJSX(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 11\n    }\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalD,\n    onHide: cerrarModalD,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 11\n    }\n  }, \"Venta de fundas\")), ___EmotionJSX(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 9\n    }\n  }, \"Fabricamos las mejores fundas del mercado, dise\\xF1adas para cubrir sus necesidades. Adquiera la protecci\\xF3n que sus equipos necesitan. Dise\\xF1os de la mejor calidad, hechos con materiales de primera. Fundas fabricadas a las medidas de diferentes marcas y modelos, protecci\\xF3n indispensable que ayudar\\xE1 a sus equipos a soportar ca\\xEDdas o da\\xF1os accidentales.\", ___EmotionJSX(\"div\", {\n    className: \"botmodal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/venta-fundas-handheld-impresora-portatil\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(Button, {\n    color: \"primary\",\n    \"w-50\": true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 15\n    }\n  }, \"\\xA1Adquiera las fundas que necesite!\")))), ___EmotionJSX(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalD,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 11\n    }\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalTg,\n    onHide: cerrarModalTg,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 11\n    }\n  }, \"Conozca nuestro servicio para la Impresion de Etiquetas\")), ___EmotionJSX(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 9\n    }\n  }, \"Somos especialistas en la impresi\\xF3n de etiquetas. Impresi\\xF3n t\\xE9rmico directo y transferencia t\\xE9rmica. Impresi\\xF3n de etiquetas en poliolefina, polipropileno, poli\\xE9ster, poliamida y papel. Impresi\\xF3n de etiquetas para el sector automotriz, manufactura, salud, textil, control de productos y m\\xE1s. Impresi\\xF3n de etiquetas con adhesivos permanentes, removibles y de alta adherencia. Impresi\\xF3n de etiquetas capaces de resistir bajas y altas temperaturas. \\xA1Llame ahora, asistencia inmediata!\", ___EmotionJSX(\"div\", {\n    className: \"botmodal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/impresion-etiquetas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(Button, {\n    color: \"primary\",\n    \"w-50\": true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 15\n    }\n  }, \"\\xA1Imprima las etiquetas que necesite!\")))), ___EmotionJSX(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalTg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 11\n    }\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalE,\n    onHide: cerrarModalE,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 11\n    }\n  }, \"Impresion de credenciales\")), ___EmotionJSX(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 9\n    }\n  }, \"Somos especialistas en la elaboraci\\xF3n, dise\\xF1o e impresi\\xF3n de credenciales. Contamos con tecnolog\\xEDa avanzada para imprimir tarjetas con materiales altamente resistentes y duraderos, que le dan a cada credencial una larga vida de uso. Impresi\\xF3n en PVC, PET y policarbonato. Impresi\\xF3n de gafetes con holograma de seguridad para evitar falsificaciones y prevenir desgastes o malos usos. Contamos con el beneficio de impresi\\xF3n de credenciales con un c\\xF3digo QR para validar el certificado de vacunaci\\xF3n contra COVID-19. Credenciales ideales para empresas, instituciones educativas, asociaciones, eventos, seguridad y control de acceso. Contamos con el beneficio de imprimir sus credenciales a domicilio. \\xA1Llame para m\\xE1s informaci\\xF3n!\", ___EmotionJSX(\"div\", {\n    className: \"botmodal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/impresion-credenciales-tarjetas-gafetes-pvc\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(Button, {\n    color: \"primary\",\n    \"w-50\": true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 15\n    }\n  }, \"\\xA1Imprima las credenciales que necesite!\")))), ___EmotionJSX(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 11\n    }\n  }, \"Cerrar\"))));\n};\n\nexport default Servicios;","map":{"version":3,"sources":["C:/Users/USER/Desktop/codigo de prueba HHS/components/layout/Servicios.js"],"names":["React","useState","Head","Link","FontAwesomeIcon","faCheckCircle","Modal","Button","Carousel","Servicios","ServiciosDif","Eslogan","Sello","IMG","IMGDSD","IMGID","RRV","Card","CardImg","CardTitulo","CardTexto","Informacion","TextDiv","Text","abiertoModal","cambiarAbiertoModal","abiertoModalD","cambiarAbiertoModalD","abiertoModalE","cambiarAbiertoModalE","abiertoModalTg","cambiarAbiertoModalTg","abrirModal","cerrarModal","abrirModalD","cerrarModalD","abrirModalE","cerrarModalE","abrirModalTg","cerrarModalTg"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport Head from \"next/head\";\nimport Link from \"next/link\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { Modal, Button, Carousel } from \"react-bootstrap\";\n\nconst Servicios = () => {\n  const Servicios = styled.div`\n    margin-top: 2rem;\n  `;\n\n  const ServiciosDif = styled.div`\n    text-align: center;\n    font-size: 18px;\n  `;\n\n  const Eslogan = styled.p`\n    font-weight: bold;\n    font-size: 25px;\n  `;\n\n  const Sello = styled.div`\n    width: 100%;\n    margin-bottom: 3.5rem;\n    display: flex;\n    justify-content: space-around;\n    text-align: center;\n  `;\n\n  const IMG = styled.img`\n    width: 35%;\n\n    @media (max-width: 650px) {\n      width: 60%;\n    }\n\n    @media (max-width: 410px) {\n      width: 70%;\n    }\n  `;\n\n  const IMGDSD = styled.img`\n    width: 30%;\n    cursor: pointer;\n\n    @media (max-width: 650px) {\n      width: 60%;\n    }\n  `;\n\n  const IMGID = styled.img`\n    width: 30%;\n    cursor: pointer;\n\n    @media (max-width: 650px) {\n      width: 60%;\n    }\n  `;\n\n  const RRV = styled.div`\n    margin-top: 2rem;\n    width: 100%;\n    margin: auto;\n    //border: 1px solid red;\n  `;\n\n  const Card = styled.div`\n    margin-bottom: 20px;\n    width: 20%;\n\n    margin: auto;\n\n    @media (max-width: 1409px) {\n      width: 80%;\n    }\n\n    @media (max-width: 900px) {\n      margin-bottom: 3.5rem;\n    }\n  `;\n\n  const CardImg = styled.img`\n    box-shadow: 0px 1px 5px black;\n    border-radius: 1rem !important;\n    width: 70%;\n    max-height: 160px;\n  `;\n\n  const CardTitulo = styled.h5`\n    font-weight: bold;\n    margin-top: 10px;\n    margin-bottom: 10px;\n    font-size: 26px;\n  `;\n\n  const CardTexto = styled.p`\n    font-size: 16px;\n    text-align: left;\n\n    @media (max-width: 1409px) {\n      text-align: center;\n      padding: 5px;\n    }\n\n    @media (max-width: 992px) {\n      text-align: center;\n    }\n\n    @media (max-width: 585px) {\n      font-size: 15px;\n    }\n  `;\n\n  const Informacion = styled.a`\n    font-size: 18px;\n  `;\n\n  const TextDiv = styled.div`\n    width: 40%;\n    margin: 0px auto;\n\n    @media (max-width: 1400px) {\n      width: 100%;\n    }\n\n    @media (max-width: 960px) {\n      width: 70%;\n    }\n\n    @media (max-width: 634px) {\n      width: 60%;\n    }\n\n    @media (max-width: 450px) {\n      width: 75%;\n    }\n  `;\n\n  const Text = styled.p`\n    font-size: 19px;\n    font-weight: bold;\n\n    @media (max-width: 960px) {\n      font-size: 16px;\n    }\n\n    @media (max-width: 899px) {\n      font-size: 14px;\n    }\n\n    @media (max-width: 699px) {\n      font-size: 12px;\n    }\n\n    @media (max-width: 450px) {\n      font-size: 10px;\n    }\n  `;\n\n  const [abiertoModal, cambiarAbiertoModal] = useState(false);\n  const [abiertoModalD, cambiarAbiertoModalD] = useState(false);\n  const [abiertoModalE, cambiarAbiertoModalE] = useState(false);\n  const [abiertoModalTg, cambiarAbiertoModalTg] = useState(false);\n\n  const abrirModal = () => {\n    cambiarAbiertoModal(true);\n  };\n\n  const cerrarModal = () => {\n    cambiarAbiertoModal(false);\n  };\n\n  const abrirModalD = () => {\n    cambiarAbiertoModalD(true);\n  };\n\n  const cerrarModalD = () => {\n    cambiarAbiertoModalD(false);\n  };\n\n  const abrirModalE = () => {\n    cambiarAbiertoModalE(true);\n  };\n\n  const cerrarModalE = () => {\n    cambiarAbiertoModalE(false);\n  };\n\n  const abrirModalTg = () => {\n    cambiarAbiertoModalTg(true);\n  };\n\n  const cerrarModalTg = () => {\n    cambiarAbiertoModalTg(false);\n  };\n\n  return (\n    <>\n      <Head>\n        <link\n          rel=\"stylesheet preload\"\n          as=\"style\"\n          href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\"\n          integrity=\"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\"\n          crossorigin=\"anonymous\"\n        />\n      </Head>\n      <section>\n        <Servicios>\n          <ServiciosDif>\n            <p>\n              Hand Held Solutions cuenta con años de experiencia ofreciendo los\n              servicios de renta, reparación y venta de Hand Held´s, lectores de\n              códigos 1D y 2D, impresoras industriales, de escritorio y\n              portátiles. Contamos con los accesorios y consumibles adecuados\n              para cada equipo.\n              <br />\n              Tenemos cobertura a toda la República Mexicana: Jalisco, Nuevo León, Aguascalientes, Baja California, Campeche, Chiapas, Chihuahua, Coahuila, Colima, Durango, Guanajuato, Guerrero, Hidalgo, Michoacán, Morelos, Nayarit, Oaxaca, Puebla, Querétaro, Quintana Roo, San Luis Potosí, Sinaloa, Sonora, Tabasco, Tamaulipas, Tlaxcala, Veracruz, Yucatán y Zacatecas.  \n            </p>\n            <Sello>\n              <div className=\"idsd mtoop\">\n                <IMGDSD\n                  src=\"/img/iconodsd.webp\"\n                  alt=\"garanti hand held\"\n                  onClick={abrirModal}\n                />\n                <TextDiv>\n                  <Text>Conozca nuestra \"Solución DSD\" para venta en ruta</Text>\n                </TextDiv>\n              </div>\n              <div className=\"idsd mtoop\">\n                <IMGDSD\n                  src=\"/img/impresión de credenciales.webp\"\n                  alt=\"garanti hand held\"\n                  onClick={abrirModalE}\n                />\n                <TextDiv>\n                  <Text>Impresion de Credenciales</Text>\n                </TextDiv>\n              </div>\n\n              {/* ICONO GARANTIA\n              <div className=\"idsd\">\n                <IMG src=\"/img/sellogarantia.webp\" alt=\"garanti hand held\" />\n              </div>\n             */}\n\n              \n              {\n              <div className=\"idsd mtoop\">\n                <IMGDSD\n                  src=\"/img/Icono_etiquetas.webp\"\n                  alt=\"garanti hand held\"\n                  onClick={abrirModalTg}\n                />\n                <TextDiv>\n                  <Text>Impresion de Etiquetas</Text>\n                </TextDiv>\n              </div>\n            }\n              \n              <div className=\"idsd mtoop\">\n                <IMGID\n                  src=\"/img/funda.webp\"\n                  alt=\"garanti hand held\"\n                  onClick={abrirModalD}\n                />\n                <TextDiv>\n                  <Text>Venta de fundas</Text>\n                </TextDiv>\n              </div>\n            </Sello>\n            <Eslogan>¡FÁCIL, RÁPIDO Y FLEXIBLE!</Eslogan>\n          </ServiciosDif>\n          <RRV className=\" mt-5\">\n            <div className=\"cardds\">\n              <Card className=\"text-center\">\n                <CardImg\n                  src=\"/img/Renta handheld lector de codigos.webp\"\n                  alt=\"Renta de Hand Held Impresoras de Etiquetas y Lectores de codigo de barras\"\n                />\n                <CardTitulo className=\"text-center pt-2\">\n                  Renta de equipo\n                </CardTitulo>\n                <CardTexto className=\"pt-3\">\n                  <FontAwesomeIcon icon={faCheckCircle} />\n                  ¡Primero tendrá el equipo en operación y después realizará el\n                  pago! <br />\n                  <br />\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Sin depósito inicial\n                  e incluye todos los accesorios necesarios! <br />\n                  <br />\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Reparaciones por uso\n                  normal y accidentes sin costo adicional! <br />\n                  <br />\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Puede cancelar en\n                  cualquier momento y sin penalización! <br />\n                  <br />\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Renta de handhelds, lectores de códigos de barras,\n                  impresoras de etiquetas y credenciales! <br />\n                </CardTexto>\n                <Informacion\n                  className=\"btn btn-primary btn-lg mt-3 mim\"\n                  role=\"button\"\n                  href=\"#renta\"\n                >\n                  Más Información\n                </Informacion>\n              </Card>\n\n              <Card className=\" text-center\">\n                <CardImg\n                  src=\"/img/Reparacion handheld lector de codigos.webp\"\n                  alt=\"Reparacion de Hand Held Impresoras de Etiquetas y Lectores de codigo de barras\"\n                />\n                <CardTitulo className=\"text-center pt-2\">\n                  Reparación de equipo\n                </CardTitulo>\n                <CardTexto className=\"pt-3\">\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Diagnóstico sin\n                  costo y reparaciones en tres días!\n                  <br />\n                  <br />\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Primero le reparamos\n                  y entregamos su equipo y después realiza el pago! <br />\n                  <br />\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Reparación\n                  en sus instalaciones sin costo adicional! <br />\n                  <br />\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Nuestras\n                  reparaciones cuenta con garantía 100! (100 días de garantía)!\n                  <br />\n                  <br />\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Soporte técnico en sitio, sin costo, \n                  dentro del área metropolitana! <br />\n                  <br />\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Reparación de handhelds, lectores de códigos de barras,\n                  impresoras de etiquetas y credenciales! <br />\n                </CardTexto>\n                <Informacion\n                  className=\"btn btn-primary btn-lg mt-3 mim\"\n                  role=\"button\"\n                  href=\"#reparacion\"\n                >\n                  Más Información\n                </Informacion>\n              </Card>\n\n              <Card className=\" text-center\">\n                <CardImg\n                  src=\"/img/Venta handheld lector de códigos.webp\"\n                  alt=\"Venta de Hand Held Impresoras de Etiquetas y Lectores de codigo de barras\"\n                />\n                <CardTitulo className=\"text-center pt-2\">\n                  Venta de equipo\n                </CardTitulo>\n                <CardTexto className=\"pt-3\">\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Los mejores precios,\n                  crédito y planes de financiamiento! <br />\n                  <br />\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Equipo demo sin\n                  costo para pruebas en sus instalaciones! <br />\n                  <br />\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Seguimiento hombro a\n                  hombro durante pruebas e implementaciones! <br />\n                  <br />\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Soporte técnico\n                  preventa y postventa con línea directa las 24 horas!\n                  <br />\n                  <br />\n                  <FontAwesomeIcon icon={faCheckCircle} /> ¡Venta de handhelds, lectores de códigos de barras,\n                  impresoras de etiquetas y credenciales! <br />\n                </CardTexto>\n                <Informacion\n                  className=\"btn btn-primary btn-lg mt-3 mim\"\n                  role=\"button\"\n                  href=\"#venta\"\n                >\n                  Más Información\n                </Informacion>\n              </Card>\n            </div>\n          </RRV>\n        </Servicios>\n      </section>\n\n      <Modal\n        show={abiertoModal}\n        onHide={cerrarModal}\n        keyboard={false}\n        size=\"lg\"\n        className=\"modal-altura\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>\n            Conozca nuestra \"Solución DSD\" para venta en ruta\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          Adquiera la \"Solución DSD\" para venta en ruta. Herramienta tecnológica\n          que le permitirá administrar sus visitas, tiempos de entrega e\n          inventario en todo momento de la ruta. Controle a su fuerza de ventas\n          y monitoree su desempeño con nuestra aplicación \"Direct Store\n          Delivery\". Implemente el software que cumplirá con sus necesidades y\n          disponga sin costo adicional de la renta de una handheld e impresora\n          portátil.\n          <div className=\"botmodal\">\n            <Link href=\"/DSD-venta-en-ruta\">\n              <Button color=\"primary\" w-50>\n                ¡Conozcalo!\n              </Button>\n            </Link>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"light\" onClick={cerrarModal}>\n            Cerrar\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal\n        show={abiertoModalD}\n        onHide={cerrarModalD}\n        keyboard={false}\n        size=\"lg\"\n        className=\"modal-altura\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Venta de fundas</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          Fabricamos las mejores fundas del mercado, diseñadas para cubrir sus\n          necesidades. Adquiera la protección que sus equipos necesitan. Diseños\n          de la mejor calidad, hechos con materiales de primera. Fundas\n          fabricadas a las medidas de diferentes marcas y modelos, protección\n          indispensable que ayudará a sus equipos a soportar caídas o daños\n          accidentales.\n          <div className=\"botmodal\">\n            <Link href=\"/venta-fundas-handheld-impresora-portatil\">\n              <Button color=\"primary\" w-50>\n                ¡Adquiera las fundas que necesite!\n              </Button>\n            </Link>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"light\" onClick={cerrarModalD}>\n            Cerrar\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Modal\n        show={abiertoModalTg}\n        onHide={cerrarModalTg}\n        keyboard={false}\n        size=\"lg\"\n        className=\"modal-altura\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>\n            Conozca nuestro servicio para la Impresion de Etiquetas\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        Somos especialistas en la impresión de etiquetas. Impresión térmico directo y transferencia térmica. Impresión de etiquetas en poliolefina, polipropileno, poliéster, poliamida y papel. Impresión de etiquetas para el sector automotriz, manufactura, salud, textil, control de productos y más. Impresión de etiquetas con adhesivos permanentes, removibles y de alta adherencia. Impresión de etiquetas capaces de resistir bajas y altas temperaturas.\n ¡Llame ahora, asistencia inmediata! \n          <div className=\"botmodal\">\n            <Link href=\"/impresion-etiquetas\">\n              <Button color=\"primary\" w-50>\n              ¡Imprima las etiquetas que necesite!\n              </Button>\n            </Link>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"light\" onClick={cerrarModalTg}>\n            Cerrar\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <Modal\n        show={abiertoModalE}\n        onHide={cerrarModalE}\n        keyboard={false}\n        size=\"lg\"\n        className=\"modal-altura\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Impresion de credenciales</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        Somos especialistas en la elaboración, diseño e impresión de credenciales. \n        Contamos con tecnología avanzada para imprimir tarjetas con materiales altamente resistentes y duraderos, \n        que le dan a cada credencial una larga vida de uso. Impresión en PVC, PET y policarbonato. \n        Impresión de gafetes con holograma de seguridad para evitar falsificaciones y prevenir desgastes o malos usos. \n        Contamos con el beneficio de impresión de credenciales con un código QR para validar el certificado de vacunación \n        contra COVID-19. Credenciales ideales para empresas, instituciones educativas, asociaciones, eventos, seguridad y control de acceso. \n        Contamos con el beneficio de imprimir sus credenciales a domicilio. ¡Llame para más información!\n          <div className=\"botmodal\">\n            <Link href=\"/impresion-credenciales-tarjetas-gafetes-pvc\">\n              <Button color=\"primary\" w-50>\n                ¡Imprima las credenciales que necesite!\n              </Button>\n            </Link>\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"light\" onClick={cerrarModalE}>\n            Cerrar\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n    </>\n  );\n};\n\nexport default Servicios;\n"]},"metadata":{},"sourceType":"module"}