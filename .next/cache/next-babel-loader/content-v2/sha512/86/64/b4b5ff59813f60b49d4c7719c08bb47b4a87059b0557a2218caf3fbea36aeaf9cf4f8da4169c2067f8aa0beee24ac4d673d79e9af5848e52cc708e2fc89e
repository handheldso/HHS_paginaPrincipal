{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Head from \"next/head\";\nimport Header from \"../components/layout/Header\";\nimport RentaH from \"../components/pestanas/RentaH\";\nimport IconosRentaGeneral from \"../components/pestanas/IconosRentaGeneral\";\nimport Form from \"../components/pestanas/Form\";\nimport Ubicacion from \"../components/pestanas/Ubicacion\";\nimport Servicios from \"../components/pestanas/DnuestrosS\";\nimport MapaDuns from \"../components/pestanas/MapaDuns\";\nimport BotonesMovilCinco from \"../components/pestanas/BotonesMovilCinco\";\nimport Footer from \"../components/layout/Footer\";\nimport { Modal, Button, Carousel } from \"react-bootstrap\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst RHandhelds = () => {\n  const ContenedorFlexa = _styled(\"div\", true ? {\n    target: \"e181wmmx4\"\n  } : {\n    target: \"e181wmmx4\",\n    label: \"ContenedorFlexa\"\n  })(true ? {\n    name: \"3o1miv\",\n    styles: \"display:flex;@media (max-width: 995px){display:block;}\"\n  } : {\n    name: \"3o1miv\",\n    styles: \"display:flex;@media (max-width: 995px){display:block;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const ContenedorFlex = _styled(\"div\", true ? {\n    target: \"e181wmmx3\"\n  } : {\n    target: \"e181wmmx3\",\n    label: \"ContenedorFlex\"\n  })(true ? {\n    name: \"o0r707\",\n    styles: \"display:flex;@media (max-width: 700px){display:block;}\"\n  } : {\n    name: \"o0r707\",\n    styles: \"display:flex;@media (max-width: 700px){display:block;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const ContenedorBotona = _styled(\"div\", true ? {\n    target: \"e181wmmx2\"\n  } : {\n    target: \"e181wmmx2\",\n    label: \"ContenedorBotona\"\n  })(true ? {\n    name: \"udt92q\",\n    styles: \"@media (max-width: 995px){display:block;}\"\n  } : {\n    name: \"udt92q\",\n    styles: \"@media (max-width: 995px){display:block;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const ImgModal = _styled(\"img\", true ? {\n    target: \"e181wmmx1\"\n  } : {\n    target: \"e181wmmx1\",\n    label: \"ImgModal\"\n  })(true ? {\n    name: \"16na1d5\",\n    styles: \"max-width:100%!important;min-width:100%!important;max-height:100%!important;min-height:100%!important\"\n  } : {\n    name: \"16na1d5\",\n    styles: \"max-width:100%!important;min-width:100%!important;max-height:100%!important;min-height:100%!important\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Puntero = _styled(\"a\", true ? {\n    target: \"e181wmmx0\"\n  } : {\n    target: \"e181wmmx0\",\n    label: \"Puntero\"\n  })(true ? {\n    name: \"e0dnmk\",\n    styles: \"cursor:pointer\"\n  } : {\n    name: \"e0dnmk\",\n    styles: \"cursor:pointer\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Redirigir = e => {\n    e.preventDefault();\n    cambiarAbiertoAnuncios(false);\n    document.location.href = \"/#reparacion\";\n  };\n\n  const {\n    0: abiertoAnuncios,\n    1: cambiarAbiertoAnuncios\n  } = useState(false);\n  const {\n    0: abiertoCupon,\n    1: cambiarAbiertoCupon\n  } = useState(true);\n\n  const cerrarModal = () => {\n    cambiarAbiertoAnuncios(false);\n  }; //  const cerrarModalCupon = () => {\n  //    cambiarAbiertoCupon(false);\n  //    setTimeout(() => {\n  //      cambiarAbiertoAnuncios(true);\n  //    }, 6000);\n  //  };\n\n\n  useEffect(() => {\n    setTimeout(() => {\n      cambiarAbiertoAnuncios(true);\n    }, 6000);\n  }, []);\n  return ___EmotionJSX(\"div\", {\n    className: \"ya\"\n  }, ___EmotionJSX(Head, null, ___EmotionJSX(\"html\", {\n    lang: \"es\"\n  }), ___EmotionJSX(\"title\", null, \"Hand held para Inventarios | Renta de PDA | Arrendamiento de HandHelds | Terminales Port\\xE1tiles\"), ___EmotionJSX(\"meta\", {\n    name: \"description\",\n    content: \"Renta de Equipos Handheld \\xA1Sin Plazos Forzosos ni penalizaciones!, Cr\\xE9dito Inicial y Esquemas de Pagos. Arrendamiento de PDA 100% Deducible de Impuestos. Contamos con Alquiler de Equipos Handhelds de las marcas, Motorola, Zebra, Honeywell e Intermec. \\xA1Reparaciones sin costo adicional!\"\n  }), ___EmotionJSX(\"link\", {\n    rel: \"shortcut icon\",\n    href: \"/logo-copia.png\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"keywords\",\n    content: \"Renta, arrendamiento, alquiler, handheld, hand held, PDA, terminal port\\xE1til, motorola, Honeywell, zebra, intermec, symbol, lector de c\\xF3digos de barras\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"robots\",\n    content: \"index,follow,all\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:title\",\n    content: \"Hand held para Inventarios | Renta de PDA | Arrendamiento de HandHelds | Terminales Port\\xE1tiles\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:image\",\n    content: \"https://i.ibb.co/42K3Zdn/logo-copia.png\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:type\",\n    content: \"website\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:description\",\n    content: \"Renta de Equipos Handheld \\xA1Sin Plazos Forzosos ni penalizaciones!, Cr\\xE9dito Inicial y Esquemas de Pagos. Arrendamiento de PDA 100% Deducible de Impuestos. Contamos con Alquiler de Equipos Handhelds de las marcas, Motorola, Zebra, Honeywell e Intermec. \\xA1Reparaciones sin costo adicional!\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\"\n  }), ___EmotionJSX(\"link\", {\n    rel: \"icon\",\n    type: \"image/png\",\n    sizes: \"160x99\",\n    href: \"https://i.ibb.co/42K3Zdn/logo-copia.png\"\n  }), ___EmotionJSX(\"link\", {\n    rel: \"preconnect\",\n    href: \"https://fonts.gstatic.com\"\n  }), ___EmotionJSX(\"link\", {\n    href: \"https://fonts.googleapis.com/css2?family=Raleway&display=swap\",\n    rel: \"stylesheet\"\n  }), ___EmotionJSX(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start': new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n                })(window,document,'script','dataLayer','GTM-KXHWDC2');`\n    }\n  }), ___EmotionJSX(\"script\", {\n    async: true,\n    src: \"https://www.googletagmanager.com/gtag/js?id=AW-728249895\"\n  }), ___EmotionJSX(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'AW-728249895');`\n    }\n  })), ___EmotionJSX(\"noscript\", {\n    dangerouslySetInnerHTML: {\n      __html: `<iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-KXHWDC2\"\n          height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe>`\n    }\n  }), ___EmotionJSX(Header, null), ___EmotionJSX(RentaH, null), ___EmotionJSX(ContenedorFlexa, null, ___EmotionJSX(IconosRentaGeneral, {\n    unom: \"Cr\\xE9dito y esquemas de pagos.\",\n    dosm: \"Equipo de respaldo para asegurar su operaci\\xF3n.\",\n    tresm: \"P\\xF3liza de reparaci\\xF3n contra accidentes mayores y uso normal.\",\n    cuatrom: \"Facilidades para su operaci\\xF3n\",\n    cincom: \"Equipo demo sin costo, para pruebas en sus instalaciones.\",\n    seism: \"100% deducible de impuestos.\",\n    sietem: \"Env\\xEDo gratis a toda la Rep\\xFAblica Mexicana.\",\n    ochom: \"\\xBFNecesita dar mantenimiento a sus handhelds?\",\n    nuevem: \"\\xA1Conozca nuestro servicio de Reparaci\\xF3n!\",\n    diezm: \"Adquiera las handhelds que mejor se adapten a sus necesidades.\",\n    oncem: \"\\xA1Conozca nuestro servicio de Venta!\",\n    docem: \"Adquiera los accesorios y consumibles que necesita.\",\n    trecem: \"\\xA1Cont\\xE1ctenos!\",\n    catorcem: \"Ponemos a su disposici\\xF3n la soluci\\xF3n \\\"DSD\\\" para venta en ruta.\",\n    quincem: \"\\xA1Con\\xF3zcalo!\",\n    diezseism: \"Contamos con fundas dise\\xF1adas a la medida para cumplir con sus necesidades.\",\n    diezsietem: \"\\xA1Adquiera la protecci\\xF3n que sus equipos necesitan!\",\n    luno: \"reparacion-de-handhelds\",\n    ldos: \"venta-de-handhelds\",\n    ltres: \"venta-de-accesorios-y-consumibles\",\n    lcuatro: \"DSD-venta-en-ruta\",\n    ecuatro: \"impresion-credenciales-tarjetas-gafetes-pvc\",\n    lcinco: \"venta-fundas-handheld-impresora-portatil\",\n    ecem: \"Conozca nuestro servicio de impresion de credenciales\"\n  }), ___EmotionJSX(Form, null)), ___EmotionJSX(ContenedorBotona, null, ___EmotionJSX(BotonesMovilCinco, {\n    muno: \"\\xBFNecesita dar mantenimiento a sus handhelds?.\",\n    mdos: \"\\xA1Conozca nuestro servicio de Reparaci\\xF3n!\",\n    mtres: \"Adquiera las handhelds que mejor se adapten a sus necesidades.\",\n    mcuatro: \"\\xA1Conozca nuestro servicio de Venta!\",\n    mcinco: \"Adquiera los accesorios y consumibles que necesita.\",\n    mseis: \"\\xA1Cont\\xE1ctenos!\",\n    msiete: \"Ponemos a su disposici\\xF3n la soluci\\xF3n \\\"DSD\\\" para venta en ruta.\",\n    mocho: \"\\xA1Con\\xF3zcalo!\",\n    mnueve: \"Contamos con fundas dise\\xF1adas a la medida para cumplir con sus necesidades.\",\n    mdiez: \"\\xA1Adquiera la protecci\\xF3n que sus equipos necesitan!\",\n    luno: \"reparacion-de-handhelds\",\n    ldos: \"venta-de-handhelds\",\n    ltres: \"venta-de-accesorios-y-consumibles\",\n    lcuatro: \"DSD-venta-en-ruta\",\n    lcinco: \"venta-fundas-handheld-impresora-portatil\"\n  })), ___EmotionJSX(ContenedorFlex, null, ___EmotionJSX(Ubicacion, null), ___EmotionJSX(Servicios, null)), ___EmotionJSX(MapaDuns, null), ___EmotionJSX(Footer, null), ___EmotionJSX(Modal, {\n    show: abiertoAnuncios,\n    onHide: cerrarModal,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura ppp\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Noticias\")), ___EmotionJSX(Modal.Body, null, ___EmotionJSX(Carousel, null, ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/Promoci\\xF3n_mc9090_funcional_po83sk.webp\",\n    alt: \"Hand Held MC9090\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/Promoci\\xF3n_CN51.webp\",\n    alt: \"Hand Held Intermec Honeywell CN51\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/evolis_adikio.webp\",\n    alt: \"evolis adikio\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/evolis_impresoras.webp\",\n    alt: \"evolis impresoras\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/IMAGEN_ZEBRA_BANNER_800X500_lyqnpu.webp\",\n    alt: \"Zebra Hand Held Impresoras Lectores\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(Puntero, {\n    onClick: Redirigir\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/Copia_de_p\\xF3lizas_reparaci\\xF3n_sg0xim.webp\",\n    alt: \"Polizas de reparacion handheld impresoras de etiquetas y lectores\"\n  }))), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"a\", {\n    className: \"clicks\",\n    href: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1623098014/banner/publicaci%C3%B3n_nuevo_lanzamiento_ec50_y_ec55_fmwnhz.png\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/Copia_de_ec50_y_ec55_en_web_kyx6mp.webp\",\n    alt: \"Zebra Handheld EC50 EC55\"\n  }))), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/IMAGEN_ZEBRA_BANNER_800X500_vr6p1d.webp\",\n    alt: \"Zebra Hand Held Impresoras Lectores\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(Puntero, {\n    href: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1623098012/banner/EDA61K_FB_o2obod.png\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/EDA61K_WEB_luqnfs.webp\",\n    alt: \"Hand Held EDA61K Zebra\"\n  }))), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(Puntero, {\n    href: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1623098010/banner/ck65_FB_1_rj8z3u.png\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/CK65_WEB_l9akm3.webp\",\n    alt: \"Hand Held CK65 Zebra\"\n  }))))), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModal\n  }, \"Cerrar\"))));\n};\n\nexport default RHandhelds;","map":null,"metadata":{},"sourceType":"module"}