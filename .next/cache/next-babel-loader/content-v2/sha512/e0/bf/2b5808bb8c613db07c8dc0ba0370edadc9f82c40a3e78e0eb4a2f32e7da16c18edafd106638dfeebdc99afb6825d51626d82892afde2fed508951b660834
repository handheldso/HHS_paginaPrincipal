{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport useWindowSize from \"../../hooks/useWindowSize\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar TextoCredenciales = function TextoCredenciales() {\n  var Contenedor = _styled(\"div\", true ? {\n    target: \"e16dr8tm18\"\n  } : {\n    target: \"e16dr8tm18\",\n    label: \"Contenedor\"\n  })(true ? {\n    name: \"yb3z0d\",\n    styles: \"width:50%;@media (max-width: 995px){width:100%;}\"\n  } : {\n    name: \"yb3z0d\",\n    styles: \"width:50%;@media (max-width: 995px){width:100%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var DivTresImgText = _styled(\"div\", true ? {\n    target: \"e16dr8tm17\"\n  } : {\n    target: \"e16dr8tm17\",\n    label: \"DivTresImgText\"\n  })(true ? {\n    name: \"1tehkw8\",\n    styles: \"display:flex;margin-top:7rem;@media (max-width: 1900px){margin-top:4rem;}@media (max-width: 1816px){margin-top:12rem;}@media (max-width: 1619px){margin-top:18rem;}\"\n  } : {\n    name: \"1tehkw8\",\n    styles: \"display:flex;margin-top:7rem;@media (max-width: 1900px){margin-top:4rem;}@media (max-width: 1816px){margin-top:12rem;}@media (max-width: 1619px){margin-top:18rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var DivTresImgTextSinFlex = _styled(\"div\", true ? {\n    target: \"e16dr8tm16\"\n  } : {\n    target: \"e16dr8tm16\",\n    label: \"DivTresImgTextSinFlex\"\n  })(true ? {\n    name: \"16dujgp\",\n    styles: \"display:grid;margin:15rem auto\"\n  } : {\n    name: \"16dujgp\",\n    styles: \"display:grid;margin:15rem auto\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var Beneficios = _styled(\"ul\", true ? {\n    target: \"e16dr8tm15\"\n  } : {\n    target: \"e16dr8tm15\",\n    label: \"Beneficios\"\n  })(true ? {\n    name: \"wn0hft\",\n    styles: \"font-size:20px;text-align:left;margin-left:25px;display:grid;align-items:center;@media (max-width: 1750px){font-size:20px;}@media (max-width: 1400px){width:100%;height:100%;padding-top:2rem;}@media (max-width: 995px){width:90%;height:100%;}@media (max-width: 530px){font-size:15px;}\"\n  } : {\n    name: \"wn0hft\",\n    styles: \"font-size:20px;text-align:left;margin-left:25px;display:grid;align-items:center;@media (max-width: 1750px){font-size:20px;}@media (max-width: 1400px){width:100%;height:100%;padding-top:2rem;}@media (max-width: 995px){width:90%;height:100%;}@media (max-width: 530px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var BeneficiosLista = _styled(\"li\", true ? {\n    target: \"e16dr8tm14\"\n  } : {\n    target: \"e16dr8tm14\",\n    label: \"BeneficiosLista\"\n  })(true ? {\n    name: \"thhj3o\",\n    styles: \"list-style:outside;align-items:center;font-size:20px;@media (max-width: 530px){font-size:15px;}\"\n  } : {\n    name: \"thhj3o\",\n    styles: \"list-style:outside;align-items:center;font-size:20px;@media (max-width: 530px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var IMGTC = _styled(\"div\", true ? {\n    target: \"e16dr8tm13\"\n  } : {\n    target: \"e16dr8tm13\",\n    label: \"IMGTC\"\n  })(true ? {\n    name: \"4w66cr\",\n    styles: \"width:52%;height:70%;margin-top:0px;padding-left:2rem;@media (max-width: 1786px){width:65%;}@media (max-width: 1400px){width:100%;height:100%;text-align:center;}@media (max-width: 530px){padding-left:0px;}\"\n  } : {\n    name: \"4w66cr\",\n    styles: \"width:52%;height:70%;margin-top:0px;padding-left:2rem;@media (max-width: 1786px){width:65%;}@media (max-width: 1400px){width:100%;height:100%;text-align:center;}@media (max-width: 530px){padding-left:0px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var DivSegundoTexto = _styled(\"div\", true ? {\n    target: \"e16dr8tm12\"\n  } : {\n    target: \"e16dr8tm12\",\n    label: \"DivSegundoTexto\"\n  })(true ? {\n    name: \"fs09x\",\n    styles: \"width:100%;padding:2rem;margin-top:3rem;@media (max-width: 1400px){margin-top:-212px;}@media (max-width: 530px){padding:1rem;}\"\n  } : {\n    name: \"fs09x\",\n    styles: \"width:100%;padding:2rem;margin-top:3rem;@media (max-width: 1400px){margin-top:-212px;}@media (max-width: 530px){padding:1rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var DivTercerTexto = _styled(\"div\", true ? {\n    target: \"e16dr8tm11\"\n  } : {\n    target: \"e16dr8tm11\",\n    label: \"DivTercerTexto\"\n  })(true ? {\n    name: \"1g8a0n4\",\n    styles: \"width:100%;padding-left:2rem;margin-top:3rem;display:flex;@media (max-width: 530px){padding:1rem;}\"\n  } : {\n    name: \"1g8a0n4\",\n    styles: \"width:100%;padding-left:2rem;margin-top:3rem;display:flex;@media (max-width: 530px){padding:1rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var TextoSegundoDiv = _styled(\"p\", true ? {\n    target: \"e16dr8tm10\"\n  } : {\n    target: \"e16dr8tm10\",\n    label: \"TextoSegundoDiv\"\n  })(true ? {\n    name: \"pgnicl\",\n    styles: \"font-size:20px;@media (max-width: 530px){font-size:15px;}\"\n  } : {\n    name: \"pgnicl\",\n    styles: \"font-size:20px;@media (max-width: 530px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var TextoTercerDiv = _styled(\"div\", true ? {\n    target: \"e16dr8tm9\"\n  } : {\n    target: \"e16dr8tm9\",\n    label: \"TextoTercerDiv\"\n  })(true ? {\n    name: \"14dnk7q\",\n    styles: \"font-size:20px;display:grid;align-items:center;@media (max-width: 530px){font-size:15px;}\"\n  } : {\n    name: \"14dnk7q\",\n    styles: \"font-size:20px;display:grid;align-items:center;@media (max-width: 530px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var DivPVC = _styled(\"div\", true ? {\n    target: \"e16dr8tm8\"\n  } : {\n    target: \"e16dr8tm8\",\n    label: \"DivPVC\"\n  })(true ? {\n    name: \"1vs5rtw\",\n    styles: \"margin-top:4rem;padding-left:2rem;@media (max-width: 530px){padding:1rem;}\"\n  } : {\n    name: \"1vs5rtw\",\n    styles: \"margin-top:4rem;padding-left:2rem;@media (max-width: 530px){padding:1rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var TituloImpresion = _styled(\"h2\", true ? {\n    target: \"e16dr8tm7\"\n  } : {\n    target: \"e16dr8tm7\",\n    label: \"TituloImpresion\"\n  })(true ? {\n    name: \"1jsu5g9\",\n    styles: \"text-align:center;font-size:20px\"\n  } : {\n    name: \"1jsu5g9\",\n    styles: \"text-align:center;font-size:20px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXE9uZURyaXZlXFxFc2NyaXRvcmlvXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xcY29tcG9uZW50c1xccGVzdGFuYXNcXFRleHRvQ3JlZGVuY2lhbGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtKbUMiLCJmaWxlIjoiQzpcXFVzZXJzXFxqaGlub1xcT25lRHJpdmVcXEVzY3JpdG9yaW9cXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxwZXN0YW5hc1xcVGV4dG9DcmVkZW5jaWFsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xyXG5pbXBvcnQgTGluayBmcm9tIFwibmV4dC9saW5rXCI7XHJcbmltcG9ydCB1c2VXaW5kb3dTaXplIGZyb20gXCIuLi8uLi9ob29rcy91c2VXaW5kb3dTaXplXCI7XHJcblxyXG5jb25zdCBUZXh0b0NyZWRlbmNpYWxlcyA9ICgpID0+IHtcclxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiA1MCU7XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5NXB4KSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IERpdlRyZXNJbWdUZXh0ID0gc3R5bGVkLmRpdmBcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBtYXJnaW4tdG9wOiA3cmVtO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTAwcHgpIHtcclxuICAgICAgbWFyZ2luLXRvcDogNHJlbTtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTgxNnB4KSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDEycmVtO1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNjE5cHgpIHtcclxuICAgICAgbWFyZ2luLXRvcDogMThyZW07XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgRGl2VHJlc0ltZ1RleHRTaW5GbGV4ID0gc3R5bGVkLmRpdmBcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBtYXJnaW46IDE1cmVtIGF1dG87XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgQmVuZWZpY2lvcyA9IHN0eWxlZC51bGBcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBtYXJnaW4tbGVmdDogMjVweDtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNzUwcHgpIHtcclxuICAgICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNDAwcHgpIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgcGFkZGluZy10b3A6IDJyZW07XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5NXB4KSB7XHJcbiAgICAgIHdpZHRoOiA5MCU7XHJcbiAgICAgIGhlaWdodDogMTAwJTtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgZm9udC1zaXplOiAxNXB4O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IEJlbmVmaWNpb3NMaXN0YSA9IHN0eWxlZC5saWBcclxuICAgIGxpc3Qtc3R5bGU6IG91dHNpZGU7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MzBweCkge1xyXG4gICAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgSU1HVEMgPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6IDUyJTtcclxuICAgIGhlaWdodDogNzAlO1xyXG4gICAgbWFyZ2luLXRvcDogMHB4O1xyXG4gICAgcGFkZGluZy1sZWZ0OiAycmVtO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNzg2cHgpIHtcclxuICAgICAgd2lkdGg6IDY1JTtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTQwMHB4KSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgcGFkZGluZy1sZWZ0OiAwcHg7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgRGl2U2VndW5kb1RleHRvID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZzogMnJlbTtcclxuICAgIG1hcmdpbi10b3A6IDNyZW07XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE0MDBweCkge1xyXG4gICAgICBtYXJnaW4tdG9wOiAtMjEycHg7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDUzMHB4KSB7XHJcbiAgICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgRGl2VGVyY2VyVGV4dG8gPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XHJcbiAgICBtYXJnaW4tdG9wOiAzcmVtO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgcGFkZGluZzogMXJlbTtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBUZXh0b1NlZ3VuZG9EaXYgPSBzdHlsZWQucGBcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgZm9udC1zaXplOiAxNXB4O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IFRleHRvVGVyY2VyRGl2ID0gc3R5bGVkLmRpdmBcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MzBweCkge1xyXG4gICAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgRGl2UFZDID0gc3R5bGVkLmRpdmBcclxuICAgIG1hcmdpbi10b3A6IDRyZW07XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDUzMHB4KSB7XHJcbiAgICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgVGl0dWxvSW1wcmVzaW9uID0gc3R5bGVkLmgyYFxyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICBgO1xyXG5cclxuICBjb25zdCBUaXR1bG9JbXByZXNpb25Eb3MgPSBzdHlsZWQuaDJgXHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIG1hcmdpbi10b3A6IDIuNXJlbTtcclxuICBgO1xyXG5cclxuICBjb25zdCBPdmFUZXhEaXYgPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6IDc4JTtcclxuICAgIGhlaWdodDogNC41cmVtO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNzZjMDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRyZW07XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW46IGF1dG87XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDg5OXB4KSB7XHJcbiAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgT3ZhVGV4RGl2RCA9IHN0eWxlZC5kaXZgXHJcbiAgICB3aWR0aDogNzglO1xyXG5cclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cmVtO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4OTlweCkge1xyXG4gICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IE92YVRleCA9IHN0eWxlZC5wYFxyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgcGFkZGluZy10b3A6IDIwcHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTUwMHB4KSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTM1NXB4KSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTI1MHB4KSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBUZXh0RGl2ID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiA4MCU7XHJcbiAgICBtYXJnaW46IDBweCBhdXRvO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNDAwcHgpIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgQ29udGVuZWRvckQgPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBtYXJnaW4tdG9wOiA0cmVtO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTVweCkge1xyXG4gICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IElNR0NFUiA9IHN0eWxlZC5pbWdgXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XHJcbiAgICAgIHdpZHRoOiA1MCUgIWltcG9ydGFudDtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTA3MHB4KSB7XHJcbiAgICAgIHdpZHRoOiA0NSUgIWltcG9ydGFudDtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTk1cHgpIHtcclxuICAgICAgd2lkdGg6IDYwJSAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IHNpemUgPSB1c2VXaW5kb3dTaXplKCk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8Q29udGVuZWRvcj5cclxuICAgICAgICB7c2l6ZSA+IDE0MDAgPyAoXHJcbiAgICAgICAgICA8RGl2VHJlc0ltZ1RleHQ+XHJcbiAgICAgICAgICAgIDxJTUdUQz5cclxuICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9pbWcvVHJlc0NyZWRlbmNpYWxlcy53ZWJwXCIgYWx0PVwiQ3JlZGVuY2lhbGVzXCIgLz5cclxuICAgICAgICAgICAgPC9JTUdUQz5cclxuXHJcbiAgICAgICAgICAgIDxCZW5lZmljaW9zPlxyXG4gICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8aDM+XHJcbiAgICAgICAgICAgICAgICAgIDxiPkdhcmFudGl6YW1vczo8L2I+XHJcbiAgICAgICAgICAgICAgICA8L2gzPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBJbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBhIGNvbG9yLlxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBJbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBhIGJsYW5jbyB5IG5lZ3JvLlxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBJbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBhIDEgeSAyIGNhcmFzLlxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBJbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBjb24gaG9sb2dyYW1hIGRlIHNlZ3VyaWRhZC57XCIgXCJ9XHJcbiAgICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgIDwvQmVuZWZpY2lvcz5cclxuICAgICAgICAgIDwvRGl2VHJlc0ltZ1RleHQ+XHJcbiAgICAgICAgKSA6IChcclxuICAgICAgICAgIDxEaXZUcmVzSW1nVGV4dFNpbkZsZXg+XHJcbiAgICAgICAgICAgIHtzaXplIDwgOTk1ID8gKFxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2VudGVcIj5cclxuICAgICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJmb250aGRcIj5cclxuICAgICAgICAgICAgICAgICAgSW1wcmVzacOzbiBkZSBjcmVkZW5jaWFsZXMgYSBkb21pY2lsaW8gcGFyYSBlbXByZXNhcyBlXHJcbiAgICAgICAgICAgICAgICAgIGluc3RpdHVjaW9uZXMgZWR1Y2F0aXZhcy5cclxuICAgICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgIDxiPsKhTGxhbWUgcGFyYSBtw6FzIGluZm9ybWFjacOzbiE8L2I+XHJcbiAgICAgICAgICAgICAgICA8L2gyPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgIDw+IDwvPlxyXG4gICAgICAgICAgICApfVxyXG4gICAgICAgICAgICA8SU1HVEM+XHJcbiAgICAgICAgICAgICAgPGltZ1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW1ncmVzY2VcIlxyXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9UcmVzQ3JlZGVuY2lhbGVzLndlYnBcIlxyXG4gICAgICAgICAgICAgICAgYWx0PVwiQ3JlZGVuY2lhbGVzXCJcclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L0lNR1RDPlxyXG4gICAgICAgICAgICA8QmVuZWZpY2lvcz5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdhcmFuXCI+XHJcbiAgICAgICAgICAgICAgICA8aDM+XHJcbiAgICAgICAgICAgICAgICAgIDxiPkdhcmFudGl6YW1vczwvYj5cclxuICAgICAgICAgICAgICAgIDwvaDM+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICAgIEltcHJlc2nDs24gZGUgY3JlZGVuY2lhbGVzIGEgY29sb3IuXHJcbiAgICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICAgIEltcHJlc2nDs24gZGUgY3JlZGVuY2lhbGVzIGEgYmxhbmNvIHkgbmVncm8uXHJcbiAgICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICAgIEltcHJlc2nDs24gZGUgY3JlZGVuY2lhbGVzIGEgMSB5IDIgY2FyYXNcclxuICAgICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgICAgSW1wcmVzacOzbiBkZSBjcmVkZW5jaWFsZXMgY29uIGhvbG9ncmFtYSBkZSBzZWd1cmlkYWQuXHJcbiAgICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgIDwvQmVuZWZpY2lvcz5cclxuICAgICAgICAgIDwvRGl2VHJlc0ltZ1RleHRTaW5GbGV4PlxyXG4gICAgICAgICl9XHJcblxyXG4gICAgICAgIDxEaXZTZWd1bmRvVGV4dG8+XHJcbiAgICAgICAgICA8VGV4dG9TZWd1bmRvRGl2PlxyXG4gICAgICAgICAgICBOdWVzdHJhcyBjcmVkZW5jaWFsZXMgc29uIGltcHJlc2FzIGVuIG1hdGVyaWFsZXMsIGFsdGFtZW50ZVxyXG4gICAgICAgICAgICByZXNpc3RlbnRlcyB5IGR1cmFkZXJvcywgcXVlIGxlIGRhbiBhIGNhZGEgdGFyamV0YSB5IGdhZmV0ZSB1bmFcclxuICAgICAgICAgICAgbGFyZ2EgdmlkYSBkZSB1c28uIENvbnRhbW9zIGNvbiBpbXByZXNpw7NuIGVuIFBWQywgUEVUIHlcclxuICAgICAgICAgICAgcG9saWNhcmJvbmF0by4gR2FyYW50aXphbW9zIHVuYSBleGNlbGVudGUgY2FsaWRhZCBkZSBpbXByZXNpw7NuLFxyXG4gICAgICAgICAgICB0ZW5nYSBsYSBzZWd1cmlkYWQgZGUgcXVlIHN1cyBjcmVkZW5jaWFsZXMgY29udGFyw6FuIGNvbiB1biBob2xvZ3JhbWFcclxuICAgICAgICAgICAgZGUgc2VndXJpZGFkIHBhcmEgcHJldmVuaXIgZGVzZ2FzdGVzIHkgZXZpdGFyIGZhbHNpZmljYWNpb25lcy5cclxuICAgICAgICAgIDwvVGV4dG9TZWd1bmRvRGl2PlxyXG4gICAgICAgIDwvRGl2U2VndW5kb1RleHRvPlxyXG4gICAgICAgIDxEaXZUZXJjZXJUZXh0bz5cclxuICAgICAgICAgIDxUZXh0b1RlcmNlckRpdj5cclxuICAgICAgICAgICAgRXMgaW5kaXNwZW5zYWJsZSBxdWUgY2FkYSBpbnN0aXR1Y2nDs24geSBlbXByZXNhIHRlbmdhIGVsXHJcbiAgICAgICAgICAgIGNvbm9jaW1pZW50byBkZSBsYSBzYWx1ZCBkZSBzdXMgY29sYWJvcmFkb3Jlcy4gQ29udGFtb3MgY29uIGxhIGltcHJlc2nDs24gZGUgY3JlZGVuY2lhbGVzIGNvbiB1biBjw7NkaWdvIFFSIHBhcmFcclxuICAgICAgICAgICAgdmVyaWZpY2FyIHkgdmFsaWRhciBlbCBjZXJ0aWZpY2FkbyBkZSB2YWN1bmFjacOzbiBjb250cmEgPGJyLz5DT1ZJRC0xOS5cclxuICAgICAgICAgIDwvVGV4dG9UZXJjZXJEaXY+XHJcbiAgICAgICAgICA8SU1HQ0VSIHNyYz1cIi9pbWcvQ2VydGlmaWNhZG8ud2VicFwiIGFsdD1cIkNlcnRpZmljYWRvIGRlIFZhY3VuYWNpw7NuXCIgLz5cclxuICAgICAgICA8L0RpdlRlcmNlclRleHRvPlxyXG4gICAgICAgIDxEaXZQVkM+XHJcbiAgICAgICAgICA8VGl0dWxvSW1wcmVzaW9uPlxyXG4gICAgICAgICAgICBJbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBlbiBQVkMsIFBFVCB5IHBvbGljYXJib25hdG86XHJcbiAgICAgICAgICA8L1RpdHVsb0ltcHJlc2lvbj5cclxuICAgICAgICAgIDxvbCBjbGFzc05hbWU9XCJlc29sXCI+XHJcbiAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPkNyZWRlbmNpYWxlcyBjb24gdW4gY8OzZGlnbyBRUiBwYXJhIHZlcmlmaWNhciBlbCBjZXJ0aWZpY2FkbyBkZSB2YWN1bmFjacOzbiBjb250cmEgQ09WSUQtMTkuPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+Q3JlZGVuY2lhbGVzIHBhcmEgZW1wcmVzYXMuPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgQ3JlZGVuY2lhbGVzIHBhcmEgaW5zdGl0dWNpb25lcyBlZHVjYXRpdmFzLlxyXG4gICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICBDcmVkZW5jaWFsZXMgcGFyYSBleHBvc2ljaW9uZXMgeSBldmVudG9zLlxyXG4gICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICBDcmVkZW5jaWFsZXMgcGFyYSBlbCBjb250cm9sIGRlIGFjY2Vzby5cclxuICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+R2FmZXRlcyBwYXJhIHBlcnNvbmFsLjwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIENyZWRlbmNpYWxlcyBwYXJhIGNsdWJlcyBkZXBvcnRpdm9zIHkgYXNvY2lhY2lvbmVzLlxyXG4gICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgIDwvb2w+XHJcbiAgICAgICAgICA8VGl0dWxvSW1wcmVzaW9uRG9zPlxyXG4gICAgICAgICAgICBDb250YW1vcyBjb24gZWwgYmVuZWZpY2lvIGRlIGltcHJpbWlyIHN1cyBjcmVkZW5jaWFsZXMgY29uIHVuXHJcbiAgICAgICAgICAgIGhvbG9ncmFtYSBkZSBzZWd1cmlkYWQgcGFyYSBwcm90ZWdlciBzdSBpbmZvcm1hY2nDs24ue1wiIFwifVxyXG4gICAgICAgICAgPC9UaXR1bG9JbXByZXNpb25Eb3M+XHJcbiAgICAgICAgPC9EaXZQVkM+XHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRGl2UlwiPlxyXG4gICAgICAgICAgPENvbnRlbmVkb3JEPlxyXG4gICAgICAgICAgICA8TGluayBocmVmPVwiLyNyZW50YVwiPlxyXG4gICAgICAgICAgICAgIDxPdmFUZXhEaXYgY2xhc3NOYW1lPVwiYlwiPlxyXG4gICAgICAgICAgICAgICAgPE92YVRleD5cclxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiblwiPsKhQ29ub3pjYSBudWVzdHJvIHNlcnZpY2lvIGRlIFJlbnRhITwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvT3ZhVGV4PlxyXG4gICAgICAgICAgICAgIDwvT3ZhVGV4RGl2PlxyXG4gICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvI3JlcGFyYWNpb25cIj5cclxuICAgICAgICAgICAgICA8T3ZhVGV4RGl2IGNsYXNzTmFtZT1cImJcIj5cclxuICAgICAgICAgICAgICAgIDxPdmFUZXg+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5cIj5cclxuICAgICAgICAgICAgICAgICAgICDCoUNvbm96Y2EgbnVlc3RybyBzZXJ2aWNpbyBkZSBSZXBhcmFjacOzbiFcclxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9PdmFUZXg+XHJcbiAgICAgICAgICAgICAgPC9PdmFUZXhEaXY+XHJcbiAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgPExpbmsgaHJlZj1cIi8jdmVudGFcIj5cclxuICAgICAgICAgICAgICA8T3ZhVGV4RGl2IGNsYXNzTmFtZT1cImJcIj5cclxuICAgICAgICAgICAgICAgIDxPdmFUZXg+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5cIj7CoUNvbm96Y2EgbnVlc3RybyBzZXJ2aWNpbyBkZSBWZW50YSE8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L092YVRleD5cclxuICAgICAgICAgICAgICA8L092YVRleERpdj5cclxuICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICA8TGluayBocmVmPVwiL3ZlbnRhLWRlLWFjY2Vzb3Jpb3MteS1jb25zdW1pYmxlc1wiPlxyXG4gICAgICAgICAgICAgIDxPdmFUZXhEaXYgY2xhc3NOYW1lPVwiYlwiPlxyXG4gICAgICAgICAgICAgICAgPE92YVRleD5cclxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiblwiPlxyXG4gICAgICAgICAgICAgICAgICAgIMKhQWRxdWllcmEgbG9zIGFjY2Vzb3Jpb3MgeSBjb25zdW1pYmxlcyBxdWUgbmVjZXNpdGEhXHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvT3ZhVGV4PlxyXG4gICAgICAgICAgICAgIDwvT3ZhVGV4RGl2PlxyXG4gICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvRFNELXZlbnRhLWVuLXJ1dGFcIj5cclxuICAgICAgICAgICAgICA8T3ZhVGV4RGl2IGNsYXNzTmFtZT1cImJcIj5cclxuICAgICAgICAgICAgICAgIDxPdmFUZXg+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5cIj5cclxuICAgICAgICAgICAgICAgICAgICDCoUNvbm96Y2EgbnVlc3RyYSBzb2x1Y2nDs24gXCJEU0RcIiBwYXJhIHZlbnRhIGVuIHJ1dGEhXHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvT3ZhVGV4PlxyXG4gICAgICAgICAgICAgIDwvT3ZhVGV4RGl2PlxyXG4gICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvdmVudGEtZnVuZGFzLWhhbmRoZWxkLWltcHJlc29yYS1wb3J0YXRpbFwiPlxyXG4gICAgICAgICAgICAgIDxPdmFUZXhEaXZEIGNsYXNzTmFtZT1cImJcIj5cclxuICAgICAgICAgICAgICAgIDxPdmFUZXg+XHJcbiAgICAgICAgICAgICAgICAgIENvbnRhbW9zIGNvbiBmdW5kYXMgZGlzZcOxYWRhcyBhIGxhIG1lZGlkYSBwYXJhIGN1bXBsaXIgY29uIHN1c1xyXG4gICAgICAgICAgICAgICAgICBuZWNlc2lkYWRlcy5cclxuICAgICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5cIj5cclxuICAgICAgICAgICAgICAgICAgICDCoUFkcXVpZXJhIGxhIHByb3RlY2Npw7NuIHF1ZSBzdXMgZXF1aXBvcyBuZWNlc2l0YW4hXHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvT3ZhVGV4PlxyXG4gICAgICAgICAgICAgIDwvT3ZhVGV4RGl2RD5cclxuICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgPC9Db250ZW5lZG9yRD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9Db250ZW5lZG9yPlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRleHRvQ3JlZGVuY2lhbGVzO1xyXG4iXX0= */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var TituloImpresionDos = _styled(\"h2\", true ? {\n    target: \"e16dr8tm6\"\n  } : {\n    target: \"e16dr8tm6\",\n    label: \"TituloImpresionDos\"\n  })(true ? {\n    name: \"17g321i\",\n    styles: \"text-align:center;font-weight:bold;font-size:20px;margin-top:2.5rem\"\n  } : {\n    name: \"17g321i\",\n    styles: \"text-align:center;font-weight:bold;font-size:20px;margin-top:2.5rem\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var OvaTexDiv = _styled(\"div\", true ? {\n    target: \"e16dr8tm5\"\n  } : {\n    target: \"e16dr8tm5\",\n    label: \"OvaTexDiv\"\n  })(true ? {\n    name: \"bmxbe\",\n    styles: \"width:78%;height:4.5rem;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\"\n  } : {\n    name: \"bmxbe\",\n    styles: \"width:78%;height:4.5rem;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var OvaTexDivD = _styled(\"div\", true ? {\n    target: \"e16dr8tm4\"\n  } : {\n    target: \"e16dr8tm4\",\n    label: \"OvaTexDivD\"\n  })(true ? {\n    name: \"1xutzvp\",\n    styles: \"width:78%;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\"\n  } : {\n    name: \"1xutzvp\",\n    styles: \"width:78%;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var OvaTex = _styled(\"p\", true ? {\n    target: \"e16dr8tm3\"\n  } : {\n    target: \"e16dr8tm3\",\n    label: \"OvaTex\"\n  })(true ? {\n    name: \"1i04rfa\",\n    styles: \"font-size:20px;padding-top:20px;padding-bottom:10px;color:white;@media (max-width: 1500px){font-size:19px;}@media (max-width: 1355px){font-size:17px;}@media (max-width: 1250px){font-size:15px;}\"\n  } : {\n    name: \"1i04rfa\",\n    styles: \"font-size:20px;padding-top:20px;padding-bottom:10px;color:white;@media (max-width: 1500px){font-size:19px;}@media (max-width: 1355px){font-size:17px;}@media (max-width: 1250px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var TextDiv = _styled(\"div\", true ? {\n    target: \"e16dr8tm2\"\n  } : {\n    target: \"e16dr8tm2\",\n    label: \"TextDiv\"\n  })(true ? {\n    name: \"q68gb5\",\n    styles: \"width:80%;margin:0px auto;@media (max-width: 1400px){width:100%;}\"\n  } : {\n    name: \"q68gb5\",\n    styles: \"width:80%;margin:0px auto;@media (max-width: 1400px){width:100%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var ContenedorD = _styled(\"div\", true ? {\n    target: \"e16dr8tm1\"\n  } : {\n    target: \"e16dr8tm1\",\n    label: \"ContenedorD\"\n  })(true ? {\n    name: \"1akbdyk\",\n    styles: \"width:100%;margin-top:4rem;@media (max-width: 995px){display:none;}\"\n  } : {\n    name: \"1akbdyk\",\n    styles: \"width:100%;margin-top:4rem;@media (max-width: 995px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var IMGCER = _styled(\"img\", true ? {\n    target: \"e16dr8tm0\"\n  } : {\n    target: \"e16dr8tm0\",\n    label: \"IMGCER\"\n  })(true ? {\n    name: \"bxbbea\",\n    styles: \"@media (max-width: 1200px){width:50%!important;}@media (max-width: 1070px){width:45%!important;}@media (max-width: 995px){width:60%!important;}\"\n  } : {\n    name: \"bxbbea\",\n    styles: \"@media (max-width: 1200px){width:50%!important;}@media (max-width: 1070px){width:45%!important;}@media (max-width: 995px){width:60%!important;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var size = useWindowSize();\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Contenedor, null, size > 1400 ? ___EmotionJSX(DivTresImgText, null, ___EmotionJSX(IMGTC, null, ___EmotionJSX(\"img\", {\n    src: \"/img/TresCredenciales.webp\",\n    alt: \"Credenciales\"\n  })), ___EmotionJSX(Beneficios, null, ___EmotionJSX(\"div\", null, ___EmotionJSX(\"h3\", null, ___EmotionJSX(\"b\", null, \"Garantizamos:\"))), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales a color.\"), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales a blanco y negro.\"), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales a 1 y 2 caras.\"), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales con holograma de seguridad.\", \" \"))) : ___EmotionJSX(DivTresImgTextSinFlex, null, size < 995 ? ___EmotionJSX(\"div\", {\n    className: \"cente\"\n  }, ___EmotionJSX(\"h2\", {\n    className: \"fonthd\"\n  }, \"Impresi\\xF3n de credenciales a domicilio para empresas e instituciones educativas.\", ___EmotionJSX(\"br\", null), ___EmotionJSX(\"b\", null, \"\\xA1Llame para m\\xE1s informaci\\xF3n!\"))) : ___EmotionJSX(React.Fragment, null, \" \"), ___EmotionJSX(IMGTC, null, ___EmotionJSX(\"img\", {\n    className: \"imgresce\",\n    src: \"/img/TresCredenciales.webp\",\n    alt: \"Credenciales\"\n  })), ___EmotionJSX(Beneficios, null, ___EmotionJSX(\"div\", {\n    className: \"garan\"\n  }, ___EmotionJSX(\"h3\", null, ___EmotionJSX(\"b\", null, \"Garantizamos\"))), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales a color.\"), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales a blanco y negro.\"), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales a 1 y 2 caras\"), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales con holograma de seguridad.\"))), ___EmotionJSX(DivSegundoTexto, null, ___EmotionJSX(TextoSegundoDiv, null, \"Nuestras credenciales son impresas en materiales, altamente resistentes y duraderos, que le dan a cada tarjeta y gafete una larga vida de uso. Contamos con impresi\\xF3n en PVC, PET y policarbonato. Garantizamos una excelente calidad de impresi\\xF3n, tenga la seguridad de que sus credenciales contar\\xE1n con un holograma de seguridad para prevenir desgastes y evitar falsificaciones.\")), ___EmotionJSX(DivTercerTexto, null, ___EmotionJSX(TextoTercerDiv, null, \"Es indispensable que cada instituci\\xF3n y empresa tenga el conocimiento de la salud de sus colaboradores. Contamos con la impresi\\xF3n de credenciales con un c\\xF3digo QR para verificar y validar el certificado de vacunaci\\xF3n contra \", ___EmotionJSX(\"br\", null), \"COVID-19.\"), ___EmotionJSX(IMGCER, {\n    src: \"/img/Certificado.webp\",\n    alt: \"Certificado de Vacunaci\\xF3n\"\n  })), ___EmotionJSX(DivPVC, null, ___EmotionJSX(TituloImpresion, null, \"Impresi\\xF3n de credenciales en PVC, PET y policarbonato:\"), ___EmotionJSX(\"ol\", {\n    className: \"esol\"\n  }, ___EmotionJSX(BeneficiosLista, null, \"Credenciales con un c\\xF3digo QR para verificar el certificado de vacunaci\\xF3n contra COVID-19.\"), ___EmotionJSX(BeneficiosLista, null, \"Credenciales para empresas.\"), ___EmotionJSX(BeneficiosLista, null, \"Credenciales para instituciones educativas.\"), ___EmotionJSX(BeneficiosLista, null, \"Credenciales para exposiciones y eventos.\"), ___EmotionJSX(BeneficiosLista, null, \"Credenciales para el control de acceso.\"), ___EmotionJSX(BeneficiosLista, null, \"Gafetes para personal.\"), ___EmotionJSX(BeneficiosLista, null, \"Credenciales para clubes deportivos y asociaciones.\")), ___EmotionJSX(TituloImpresionDos, null, \"Contamos con el beneficio de imprimir sus credenciales con un holograma de seguridad para proteger su informaci\\xF3n.\", \" \")), ___EmotionJSX(\"div\", {\n    className: \"DivR\"\n  }, ___EmotionJSX(ContenedorD, null, ___EmotionJSX(Link, {\n    href: \"/#renta\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestro servicio de Renta!\")))), ___EmotionJSX(Link, {\n    href: \"/#reparacion\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestro servicio de Reparaci\\xF3n!\")))), ___EmotionJSX(Link, {\n    href: \"/#venta\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestro servicio de Venta!\")))), ___EmotionJSX(Link, {\n    href: \"/venta-de-accesorios-y-consumibles\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Adquiera los accesorios y consumibles que necesita!\")))), ___EmotionJSX(Link, {\n    href: \"/DSD-venta-en-ruta\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestra soluci\\xF3n \\\"DSD\\\" para venta en ruta!\")))), ___EmotionJSX(Link, {\n    href: \"/venta-fundas-handheld-impresora-portatil\"\n  }, ___EmotionJSX(OvaTexDivD, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, \"Contamos con fundas dise\\xF1adas a la medida para cumplir con sus necesidades.\", ___EmotionJSX(\"br\", null), ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Adquiera la protecci\\xF3n que sus equipos necesitan!\"))))))));\n};\n\nexport default TextoCredenciales;","map":null,"metadata":{},"sourceType":"module"}