{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Head from \"next/head\";\nimport Header from \"../components/layout/Header\";\nimport CredencialesH from \"../components/pestanas/CredencialesH\";\nimport TextoCredenciales from \"../components/pestanas/TextoCredenciales\";\nimport FormCredenciales from \"../components/pestanas/FormCredenciales\";\nimport BotonFundas from \"../components/pestanas/BotonFundas\";\nimport Ubicacion from \"../components/pestanas/Ubicacion\";\nimport Servicios from \"../components/pestanas/ServiciosCredenciales\";\nimport MapaDuns from \"../components/pestanas/MapaDuns\";\nimport Footer from \"../components/layout/Footer\";\nimport { Modal, Button, Carousel } from \"react-bootstrap\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst Credenciales = () => {\n  const ContenedorFlexa = _styled(\"div\", true ? {\n    target: \"e8rnv8i4\"\n  } : {\n    target: \"e8rnv8i4\",\n    label: \"ContenedorFlexa\"\n  })(true ? {\n    name: \"3o1miv\",\n    styles: \"display:flex;@media (max-width: 995px){display:block;}\"\n  } : {\n    name: \"3o1miv\",\n    styles: \"display:flex;@media (max-width: 995px){display:block;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const ContenedorFlex = _styled(\"div\", true ? {\n    target: \"e8rnv8i3\"\n  } : {\n    target: \"e8rnv8i3\",\n    label: \"ContenedorFlex\"\n  })(true ? {\n    name: \"o0r707\",\n    styles: \"display:flex;@media (max-width: 700px){display:block;}\"\n  } : {\n    name: \"o0r707\",\n    styles: \"display:flex;@media (max-width: 700px){display:block;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const ContenedorBotona = _styled(\"div\", true ? {\n    target: \"e8rnv8i2\"\n  } : {\n    target: \"e8rnv8i2\",\n    label: \"ContenedorBotona\"\n  })(true ? {\n    name: \"udt92q\",\n    styles: \"@media (max-width: 995px){display:block;}\"\n  } : {\n    name: \"udt92q\",\n    styles: \"@media (max-width: 995px){display:block;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const ImgModal = _styled(\"img\", true ? {\n    target: \"e8rnv8i1\"\n  } : {\n    target: \"e8rnv8i1\",\n    label: \"ImgModal\"\n  })(true ? {\n    name: \"16na1d5\",\n    styles: \"max-width:100%!important;min-width:100%!important;max-height:100%!important;min-height:100%!important\"\n  } : {\n    name: \"16na1d5\",\n    styles: \"max-width:100%!important;min-width:100%!important;max-height:100%!important;min-height:100%!important\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Puntero = _styled(\"a\", true ? {\n    target: \"e8rnv8i0\"\n  } : {\n    target: \"e8rnv8i0\",\n    label: \"Puntero\"\n  })(true ? {\n    name: \"e0dnmk\",\n    styles: \"cursor:pointer\"\n  } : {\n    name: \"e0dnmk\",\n    styles: \"cursor:pointer\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Redirigir = e => {\n    e.preventDefault();\n    cambiarAbiertoAnuncios(false);\n    document.location.href = \"/#reparacion\";\n  };\n\n  const {\n    0: abiertoAnuncios,\n    1: cambiarAbiertoAnuncios\n  } = useState(false);\n  const {\n    0: abiertoCupon,\n    1: cambiarAbiertoCupon\n  } = useState(true);\n\n  const cerrarModal = () => {\n    cambiarAbiertoAnuncios(false);\n  };\n\n  const cerrarModalCupon = () => {\n    cambiarAbiertoCupon(false);\n    setTimeout(() => {\n      cambiarAbiertoAnuncios(true);\n    }, 6000);\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      cambiarAbiertoAnuncios(true);\n    }, 6000);\n  }, []);\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Head, null, ___EmotionJSX(\"html\", {\n    lang: \"es\"\n  }), ___EmotionJSX(\"title\", null, \"Impresi\\xF3n de Credenciales en PVC | Elaboraci\\xF3n de Tarjetas en PVC | Impresi\\xF3n de Gafetes en Policarbonato y PET\"), ___EmotionJSX(\"meta\", {\n    name: \"description\",\n    content: \"Somos Especialistas en la Elaboraci\\xF3n, Dise\\xF1o e Impresi\\xF3n de Credenciales. Contamos con Tecnolog\\xEDa Avanzada para Imprimir Tarjetas con Materiales Altamente Resistentes y Duraderos, que le Dan a Cada Credencial una Larga Vida de Uso. Impresi\\xF3n en PVC, PET y Policarbonato. Impresi\\xF3n de Gafetes con Holograma de Seguridad para Evitar Falsificaciones y Prevenir Desgastes o Malos Usos. Contamos con el Beneficio de Impresi\\xF3n de Credenciales con un C\\xF3digo QR para Validar el Certificado de Vacunaci\\xF3n Contra COVID-19. Credenciales Ideales para Empresas, Instituciones Educativas, Asociaciones, Eventos, Seguridad y Control de Acceso. Contamos con el beneficio de imprimir sus credenciales a Domicilio. \\xA1Llame para m\\xE1s informaci\\xF3n!\"\n  }), ___EmotionJSX(\"link\", {\n    rel: \"shortcut icon\",\n    href: \"/logo-copia.png\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"keywords\",\n    content: \"Impresi\\xF3n, gafetes, tarjetas, credenciales, PVC, policarbonato, PET, holograma de seguridad, credencializaci\\xF3n, tarjetas pl\\xE1sticas, elaboraci\\xF3n, dise\\xF1o, impresiones, Certificado, covid, c\\xF3digo QR, empresas, instituciones educativas, asociaciones, eventos, control de acceso, materiales resistentes, materiales duraderos, a domicilio, cotizaci\\xF3n, identificaci\\xF3n.\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"robots\",\n    content: \"index,follow,all\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:title\",\n    content: \"Hand held para Inventarios | Renta de PDA | Arrendamiento de HandHelds | Terminales Port\\xE1tiles\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:image\",\n    content: \"https://i.ibb.co/42K3Zdn/logo-copia.png\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:type\",\n    content: \"website\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:description\",\n    content: \"Somos Especialistas en la Elaboraci\\xF3n, Dise\\xF1o e Impresi\\xF3n de Credenciales. Contamos con Tecnolog\\xEDa Avanzada para Imprimir Tarjetas con Materiales Altamente Resistentes y Duraderos, que le Dan a Cada Credencial una Larga Vida de Uso. Impresi\\xF3n en PVC, PET y Policarbonato. Impresi\\xF3n de Gafetes con Holograma de Seguridad para Evitar Falsificaciones y Prevenir Desgastes o Malos Usos. Contamos con el Beneficio de Impresi\\xF3n de Credenciales con un C\\xF3digo QR para Validar el Certificado de Vacunaci\\xF3n Contra Covid. Credenciales Ideales para Empresas, Instituciones Educativas, Asociaciones, Eventos, Seguridad y Control de Acceso. Contamos con el beneficio de imprimir sus credenciales a Domicilio. \\xA1Llame para m\\xE1s informaci\\xF3n!\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\"\n  }), ___EmotionJSX(\"link\", {\n    rel: \"icon\",\n    type: \"image/png\",\n    sizes: \"160x99\",\n    href: \"https://i.ibb.co/42K3Zdn/logo-copia.png\"\n  }), ___EmotionJSX(\"link\", {\n    rel: \"preconnect\",\n    href: \"https://fonts.gstatic.com\"\n  }), ___EmotionJSX(\"link\", {\n    href: \"https://fonts.googleapis.com/css2?family=Raleway&display=swap\",\n    rel: \"stylesheet\"\n  }), ___EmotionJSX(\"script\", {\n    async: true,\n    src: \"https://www.googletagmanager.com/gtag/js?id=AW-728249895\"\n  }), ___EmotionJSX(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'AW-728249895');`\n    }\n  })), ___EmotionJSX(\"noscript\", {\n    dangerouslySetInnerHTML: {\n      __html: `<iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-KXHWDC2\"\n          height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe>`\n    }\n  }), ___EmotionJSX(Header, null), ___EmotionJSX(CredencialesH, null), ___EmotionJSX(ContenedorFlexa, null, ___EmotionJSX(TextoCredenciales, null), ___EmotionJSX(FormCredenciales, null)), ___EmotionJSX(ContenedorBotona, null, ___EmotionJSX(BotonFundas, null)), ___EmotionJSX(ContenedorFlex, null, ___EmotionJSX(Ubicacion, null), ___EmotionJSX(Servicios, null)), ___EmotionJSX(MapaDuns, null), ___EmotionJSX(Footer, null), ___EmotionJSX(Modal, {\n    show: abiertoAnuncios,\n    onHide: cerrarModal,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura ppp\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Noticias\")), ___EmotionJSX(Modal.Body, null, ___EmotionJSX(Carousel, null, ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"a\", {\n    className: \"clicks\",\n    href: \"https://www.youtube.com/embed/cYzumXlnZ54\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/Impresora de credenciales Primacy 2.png\",\n    alt: \"Impresora de credenciales\"\n  }))), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"a\", {\n    className: \"clicks\",\n    href: \"https://www.youtube.com/embed/_N1aq8YJkc4\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/Handheld MC2200 y MC2700.gif\",\n    alt: \"Handhelds MC2200 y MC2700\"\n  }))), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/Renta de handheld MC33.webp\",\n    alt: \"Renta de handheld MC33\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/Renta de handheld CK65.webp\",\n    alt: \"Renta de handheld CK65\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/Promoci\\xF3n_mc9090_funcional_po83sk.webp\",\n    alt: \"Hand Held MC9090\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/Promoci\\xF3n_CN51.webp\",\n    alt: \"Hand Held Intermec Honeywell CN51\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/evolis_adikio.webp\",\n    alt: \"evolis adikio\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/evolis_impresoras.webp\",\n    alt: \"evolis impresoras\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/IMAGEN_ZEBRA_BANNER_800X500_lyqnpu.webp\",\n    alt: \"Zebra Hand Held Impresoras Lectores\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(Puntero, {\n    onClick: Redirigir\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/Copia_de_p\\xF3lizas_reparaci\\xF3n_sg0xim.webp\",\n    alt: \"Polizas de reparacion handheld impresoras de etiquetas y lectores\"\n  }))), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/IMAGEN_ZEBRA_BANNER_800X500_vr6p1d.webp\",\n    alt: \"Zebra Hand Held Impresoras Lectores\"\n  })))), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModal\n  }, \"Cerrar\"))));\n};\n\nexport default Credenciales;","map":null,"metadata":{},"sourceType":"module"}