{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport Politicas from \"../../static/PoliticaTex\";\nimport FormHandHeld from \"../../config/FormHandHeld\";\nimport useWindowSize from \"../../hooks/useWindowSize\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst FormEtiquetas = () => {\n  const ContenedorGrid = _styled(\"div\", true ? {\n    target: \"efvklb14\"\n  } : {\n    target: \"efvklb14\",\n    label: \"ContenedorGrid\"\n  })(true ? {\n    name: \"qyt0rj\",\n    styles: \"width:50%;margin-top:2rem;@media (max-width: 995px){width:100%;margin-top:3rem;}\"\n  } : {\n    name: \"qyt0rj\",\n    styles: \"width:50%;margin-top:2rem;@media (max-width: 995px){width:100%;margin-top:3rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const DivSello = _styled(\"div\", true ? {\n    target: \"efvklb13\"\n  } : {\n    target: \"efvklb13\",\n    label: \"DivSello\"\n  })(true ? {\n    name: \"15ev6lr\",\n    styles: \"display:flex;justify-content:center;padding-top:0rem\"\n  } : {\n    name: \"15ev6lr\",\n    styles: \"display:flex;justify-content:center;padding-top:0rem\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Img = _styled(\"img\", true ? {\n    target: \"efvklb12\"\n  } : {\n    target: \"efvklb12\",\n    label: \"Img\"\n  })(true ? {\n    name: \"fuo58s\",\n    styles: \"width:70%;height:90%;@media (max-width: 375px){width:70%;height:90%;}\"\n  } : {\n    name: \"fuo58s\",\n    styles: \"width:70%;height:90%;@media (max-width: 375px){width:70%;height:90%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TitDiv = _styled(\"div\", true ? {\n    target: \"efvklb11\"\n  } : {\n    target: \"efvklb11\",\n    label: \"TitDiv\"\n  })(true ? {\n    name: \"1h4mnaf\",\n    styles: \"text-align:center;width:100%;height:3rem\"\n  } : {\n    name: \"1h4mnaf\",\n    styles: \"text-align:center;width:100%;height:3rem\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Tit = _styled(\"h1\", true ? {\n    target: \"efvklb10\"\n  } : {\n    target: \"efvklb10\",\n    label: \"Tit\"\n  })(true ? {\n    name: \"15stcjl\",\n    styles: \"font-weight:bold;@media (max-width: 833px){font-size:35px!important;}@media (max-width: 550px){font-size:28px!important;}\"\n  } : {\n    name: \"15stcjl\",\n    styles: \"font-weight:bold;@media (max-width: 833px){font-size:35px!important;}@media (max-width: 550px){font-size:28px!important;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Contenedor = _styled(\"div\", true ? {\n    target: \"efvklb9\"\n  } : {\n    target: \"efvklb9\",\n    label: \"Contenedor\"\n  })(true ? {\n    name: \"9tzj48\",\n    styles: \"width:86%;margin:2rem auto\"\n  } : {\n    name: \"9tzj48\",\n    styles: \"width:86%;margin:2rem auto\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const FormularioDiv = _styled(\"div\", true ? {\n    target: \"efvklb8\"\n  } : {\n    target: \"efvklb8\",\n    label: \"FormularioDiv\"\n  })(true ? {\n    name: \"1twpw2l\",\n    styles: \"width:100%;background-color:#0076c0;color:white;padding:10px;border-radius:0.5rem\"\n  } : {\n    name: \"1twpw2l\",\n    styles: \"width:100%;background-color:#0076c0;color:white;padding:10px;border-radius:0.5rem\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const PoliticasDiv = _styled(\"div\", true ? {\n    target: \"efvklb7\"\n  } : {\n    target: \"efvklb7\",\n    label: \"PoliticasDiv\"\n  })(true ? {\n    name: \"12dms0z\",\n    styles: \"margin-top:1rem;width:100%\"\n  } : {\n    name: \"12dms0z\",\n    styles: \"margin-top:1rem;width:100%\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const DivTarjeta = _styled(\"div\", true ? {\n    target: \"efvklb6\"\n  } : {\n    target: \"efvklb6\",\n    label: \"DivTarjeta\"\n  })(true ? {\n    name: \"c903m5\",\n    styles: \"margin:auto;width:100%;text-align:center\"\n  } : {\n    name: \"c903m5\",\n    styles: \"margin:auto;width:100%;text-align:center\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const IMGTarjeta = _styled(\"img\", true ? {\n    target: \"efvklb5\"\n  } : {\n    target: \"efvklb5\",\n    label: \"IMGTarjeta\"\n  })(true ? {\n    name: \"r9y48n\",\n    styles: \"margin:auto!important;width:23%;@media (max-width: 500px){width:33%;}\"\n  } : {\n    name: \"r9y48n\",\n    styles: \"margin:auto!important;width:23%;@media (max-width: 500px){width:33%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const IMGTarjetaD = _styled(\"img\", true ? {\n    target: \"efvklb4\"\n  } : {\n    target: \"efvklb4\",\n    label: \"IMGTarjetaD\"\n  })(true ? {\n    name: \"1y7yo48\",\n    styles: \"cursor:pointer;width:37%;@media (max-width: 605px){width:38%;}@media (max-width: 500px){width:56%;}\"\n  } : {\n    name: \"1y7yo48\",\n    styles: \"cursor:pointer;width:37%;@media (max-width: 605px){width:38%;}@media (max-width: 500px){width:56%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const IMGLogos = _styled(\"img\", true ? {\n    target: \"efvklb3\"\n  } : {\n    target: \"efvklb3\",\n    label: \"IMGLogos\"\n  })(true ? {\n    name: \"13jsrr9\",\n    styles: \"margin:auto!important;@media (max-width: 1500px){width:65%;}@media (max-width: 1100px){width:80%;}@media (max-width: 800px){height:8rem!important;}@media (max-width: 500px){height:5.5rem!important;}\"\n  } : {\n    name: \"13jsrr9\",\n    styles: \"margin:auto!important;@media (max-width: 1500px){width:65%;}@media (max-width: 1100px){width:80%;}@media (max-width: 800px){height:8rem!important;}@media (max-width: 500px){height:5.5rem!important;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TxtTarjeta = _styled(\"p\", true ? {\n    target: \"efvklb2\"\n  } : {\n    target: \"efvklb2\",\n    label: \"TxtTarjeta\"\n  })(true ? {\n    name: \"ddq6ti\",\n    styles: \"font-size:19px;font-weight:bold\"\n  } : {\n    name: \"ddq6ti\",\n    styles: \"font-size:19px;font-weight:bold\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const DivIconos = _styled(\"div\", true ? {\n    target: \"efvklb1\"\n  } : {\n    target: \"efvklb1\",\n    label: \"DivIconos\"\n  })(true ? {\n    name: \"1pzfeih\",\n    styles: \"display:flex;margin-top:4.5rem;justify-content:space-around;text-align:center\"\n  } : {\n    name: \"1pzfeih\",\n    styles: \"display:flex;margin-top:4.5rem;justify-content:space-around;text-align:center\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Icon = _styled(\"div\", true ? {\n    target: \"efvklb0\"\n  } : {\n    target: \"efvklb0\",\n    label: \"Icon\"\n  })(true ? {\n    name: \"1d3w5wq\",\n    styles: \"width:100%\"\n  } : {\n    name: \"1d3w5wq\",\n    styles: \"width:100%\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const {\n    0: abiertoAnuncios,\n    1: cambiarAbiertoAnuncios\n  } = useState(false);\n\n  const abrirModal = () => {\n    cambiarAbiertoAnuncios(true);\n  };\n\n  const cerrarModal = () => {\n    cambiarAbiertoAnuncios(false);\n  };\n\n  const size = useWindowSize();\n  const {\n    0: abiertoModalT,\n    1: cambiarAbiertoModal\n  } = useState(false);\n  const {\n    0: abiertoModalD,\n    1: cambiarAbiertoModalD\n  } = useState(false);\n\n  const abrirModalT = () => {\n    cambiarAbiertoModal(true);\n  };\n\n  const cerrarModalT = () => {\n    cambiarAbiertoModal(false);\n  };\n\n  const abrirModalD = () => {\n    cambiarAbiertoModalD(true);\n  };\n\n  const cerrarModalD = () => {\n    cambiarAbiertoModalD(false);\n  };\n\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(\"span\", {\n    id: \"contacto\"\n  }), ___EmotionJSX(ContenedorGrid, null, ___EmotionJSX(DivSello, null, ___EmotionJSX(\"div\", {\n    className: \"DivImg\"\n  }, ___EmotionJSX(Img, {\n    src: \"img/sellogarantia.webp\",\n    alt: \"Sello de Garantia Hand Held Solutions\"\n  }))), ___EmotionJSX(TitDiv, null, ___EmotionJSX(Tit, null, \"\\xA1Cotice ahora!\")), ___EmotionJSX(Contenedor, null, ___EmotionJSX(FormularioDiv, null, ___EmotionJSX(FormHandHeld, null), ___EmotionJSX(PoliticasDiv, null, ___EmotionJSX(\"p\", {\n    className: \"politicas\"\n  }, \"Al dar click en el bot\\xF3n de enviar se esta aceptando nuestra\", \" \", ___EmotionJSX(\"a\", {\n    onClick: abrirModal\n  }, \"pol\\xEDtica de privacidad.\")))), ___EmotionJSX(Modal, {\n    show: abiertoAnuncios,\n    onHide: cerrarModal,\n    keyboard: false,\n    size: \"lg\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Anuncios\")), ___EmotionJSX(Modal.Body, null, ___EmotionJSX(Politicas, null)), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModal\n  }, \"Cerrar\")))), ___EmotionJSX(DivIconos, null, ___EmotionJSX(Icon, null, ___EmotionJSX(IMGTarjetaD, {\n    className: \"creicon\",\n    src: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1626461689/Nuevos%20Iconos/Copia_de_ICONOS_WEB_2_lwukep.png\",\n    alt: \"Envios Gratis\",\n    onClick: abrirModalT\n  }), ___EmotionJSX(TxtTarjeta, null, \"Envio GRATIS a toda la Republica Mexicana.\")), ___EmotionJSX(Icon, null, ___EmotionJSX(IMGTarjetaD, {\n    className: \"creicon\",\n    src: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1625762458/Nuevos%20Iconos/Mejores_precios_acordes_a_su_econom%C3%ADa_x5x6zl.png\",\n    alt: \"Icono Mejores Precios\",\n    onClick: abrirModalD\n  }), ___EmotionJSX(TxtTarjeta, null, \"Mejores precios acordes a su econom\\xEDa.\"))), ___EmotionJSX(\"div\", null, ___EmotionJSX(DivTarjeta, null, ___EmotionJSX(IMGTarjeta, {\n    src: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1625241129/Iconos/Pago_con_tarjeta_250x250_kwdel3.png\",\n    alt: \"Icono_Pago\"\n  }), ___EmotionJSX(TxtTarjeta, null, \"\\xA1Aceptamos pago con tarjeta!\"), ___EmotionJSX(IMGLogos, {\n    src: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1625761069/Iconos/metodos_de_pago_500x120_1_zkuoyc.png\",\n    alt: \"Imagen_LogoPago\"\n  })))), ___EmotionJSX(Modal, {\n    show: abiertoModalT,\n    onHide: cerrarModalT,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Env\\xEDo gratis a toda la Rep\\xFAblica Mexicana.\")), ___EmotionJSX(Modal.Body, null, \"Contamos con env\\xEDo gratis a toda la Rep\\xFAblica Mexicana, nosotros le mandamos sin cargo adicional, las etiquetas que necesite. Impresi\\xF3n de etiquetas en poliolefina, polipropileno, poli\\xE9ster, poliamida y papel. Impresi\\xF3n de etiquetas capaces de resistir bajas y altas temperaturas.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModal\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalD,\n    onHide: cerrarModalD,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Mejores precios acordes a su econom\\xEDa.\")), ___EmotionJSX(Modal.Body, null, \"En Hand Held Solutions, nos comprometemos a brindarle los mejores precios, para nosotros es importante que cuente con etiquetas que cubran sus necesidades a precios accesibles.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalD\n  }, \"Cerrar\"))));\n};\n\nexport default FormEtiquetas;","map":null,"metadata":{},"sourceType":"module"}