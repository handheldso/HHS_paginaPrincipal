{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState } from \"react\";\nimport Link from \"next/link\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar TextoFundas = function TextoFundas() {\n  var Contenedor = _styled(\"div\", true ? {\n    target: \"epnm5sf14\"\n  } : {\n    target: \"epnm5sf14\",\n    label: \"Contenedor\"\n  })(true ? {\n    name: \"1uczh34\",\n    styles: \"width:100%;text-align:center;@media (max-width: 456px){margin-top:5rem;}@media (max-width: 410px){margin-top:-2rem;}\"\n  } : {\n    name: \"1uczh34\",\n    styles: \"width:100%;text-align:center;@media (max-width: 456px){margin-top:5rem;}@media (max-width: 410px){margin-top:-2rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var ContenedorD = _styled(\"div\", true ? {\n    target: \"epnm5sf13\"\n  } : {\n    target: \"epnm5sf13\",\n    label: \"ContenedorD\"\n  })(true ? {\n    name: \"1akbdyk\",\n    styles: \"width:100%;margin-top:4rem;@media (max-width: 995px){display:none;}\"\n  } : {\n    name: \"1akbdyk\",\n    styles: \"width:100%;margin-top:4rem;@media (max-width: 995px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var OvaTexDiv = _styled(\"div\", true ? {\n    target: \"epnm5sf12\"\n  } : {\n    target: \"epnm5sf12\",\n    label: \"OvaTexDiv\"\n  })(true ? {\n    name: \"bmxbe\",\n    styles: \"width:78%;height:4.5rem;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\"\n  } : {\n    name: \"bmxbe\",\n    styles: \"width:78%;height:4.5rem;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var OvaTex = _styled(\"p\", true ? {\n    target: \"epnm5sf11\"\n  } : {\n    target: \"epnm5sf11\",\n    label: \"OvaTex\"\n  })(true ? {\n    name: \"1i04rfa\",\n    styles: \"font-size:20px;padding-top:20px;padding-bottom:10px;color:white;@media (max-width: 1500px){font-size:19px;}@media (max-width: 1355px){font-size:17px;}@media (max-width: 1250px){font-size:15px;}\"\n  } : {\n    name: \"1i04rfa\",\n    styles: \"font-size:20px;padding-top:20px;padding-bottom:10px;color:white;@media (max-width: 1500px){font-size:19px;}@media (max-width: 1355px){font-size:17px;}@media (max-width: 1250px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var TextDiv = _styled(\"div\", true ? {\n    target: \"epnm5sf10\"\n  } : {\n    target: \"epnm5sf10\",\n    label: \"TextDiv\"\n  })(true ? {\n    name: \"q68gb5\",\n    styles: \"width:80%;margin:0px auto;@media (max-width: 1400px){width:100%;}\"\n  } : {\n    name: \"q68gb5\",\n    styles: \"width:80%;margin:0px auto;@media (max-width: 1400px){width:100%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var Text = _styled(\"p\", true ? {\n    target: \"epnm5sf9\"\n  } : {\n    target: \"epnm5sf9\",\n    label: \"Text\"\n  })(true ? {\n    name: \"1k5cnp5\",\n    styles: \"font-size:19px;font-weight:bold;@media (max-width: 1100px){font-size:16px;}@media (max-width: 899px){font-size:14px;}@media (max-width: 699px){font-size:12px;}@media (max-width: 450px){font-size:10px;}\"\n  } : {\n    name: \"1k5cnp5\",\n    styles: \"font-size:19px;font-weight:bold;@media (max-width: 1100px){font-size:16px;}@media (max-width: 899px){font-size:14px;}@media (max-width: 699px){font-size:12px;}@media (max-width: 450px){font-size:10px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var DivIMG = _styled(\"div\", true ? {\n    target: \"epnm5sf8\"\n  } : {\n    target: \"epnm5sf8\",\n    label: \"DivIMG\"\n  })(true ? {\n    name: \"1af3zmi\",\n    styles: \"width:100%;margin-top:0rem\"\n  } : {\n    name: \"1af3zmi\",\n    styles: \"width:100%;margin-top:0rem\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var IMG = _styled(\"img\", true ? {\n    target: \"epnm5sf7\"\n  } : {\n    target: \"epnm5sf7\",\n    label: \"IMG\"\n  })(true ? {\n    name: \"1i6lw1j\",\n    styles: \"width:80%;height:100%;@media (max-width: 850px){width:68%;}@media (max-width: 500px){width:80%;}@media (max-width: 500px){width:89%;}\"\n  } : {\n    name: \"1i6lw1j\",\n    styles: \"width:80%;height:100%;@media (max-width: 850px){width:68%;}@media (max-width: 500px){width:80%;}@media (max-width: 500px){width:89%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var DivTexto = _styled(\"div\", true ? {\n    target: \"epnm5sf6\"\n  } : {\n    target: \"epnm5sf6\",\n    label: \"DivTexto\"\n  })(true ? {\n    name: \"8snisg\",\n    styles: \"width:100%;margin-top:4rem\"\n  } : {\n    name: \"8snisg\",\n    styles: \"width:100%;margin-top:4rem\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var TextoIMG = _styled(\"p\", true ? {\n    target: \"epnm5sf5\"\n  } : {\n    target: \"epnm5sf5\",\n    label: \"TextoIMG\"\n  })(true ? {\n    name: \"ryqqyi\",\n    styles: \"font-size:35px;font-weight:bold;padding:25px;text-align:justify;@media (max-width: 1750px){font-size:30px;}@media (max-width: 1550px){padding-top:4rem;font-size:25px;}\"\n  } : {\n    name: \"ryqqyi\",\n    styles: \"font-size:35px;font-weight:bold;padding:25px;text-align:justify;@media (max-width: 1750px){font-size:30px;}@media (max-width: 1550px){padding-top:4rem;font-size:25px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var TituloBeneficios = _styled(\"p\", true ? {\n    target: \"epnm5sf4\"\n  } : {\n    target: \"epnm5sf4\",\n    label: \"TituloBeneficios\"\n  })(true ? {\n    name: \"1neu3bp\",\n    styles: \"font-size:35px;font-weight:bold;text-align:left;padding:25px;@media (max-width: 1750px){font-size:30px;}@media (max-width: 1550px){padding-top:4rem;font-size:25px;}\"\n  } : {\n    name: \"1neu3bp\",\n    styles: \"font-size:35px;font-weight:bold;text-align:left;padding:25px;@media (max-width: 1750px){font-size:30px;}@media (max-width: 1550px){padding-top:4rem;font-size:25px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var Beneficios = _styled(\"ul\", true ? {\n    target: \"epnm5sf3\"\n  } : {\n    target: \"epnm5sf3\",\n    label: \"Beneficios\"\n  })(true ? {\n    name: \"onfebd\",\n    styles: \"font-size:30px;text-align:left;margin-left:25px;@media (max-width: 1750px){font-size:20px;}\"\n  } : {\n    name: \"onfebd\",\n    styles: \"font-size:30px;text-align:left;margin-left:25px;@media (max-width: 1750px){font-size:20px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var BeneficiosLista = _styled(\"li\", true ? {\n    target: \"epnm5sf2\"\n  } : {\n    target: \"epnm5sf2\",\n    label: \"BeneficiosLista\"\n  })(true ? {\n    name: \"1gax00t\",\n    styles: \"list-style:outside\"\n  } : {\n    name: \"1gax00t\",\n    styles: \"list-style:outside\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var ContenedorIcono = _styled(\"div\", true ? {\n    target: \"epnm5sf1\"\n  } : {\n    target: \"epnm5sf1\",\n    label: \"ContenedorIcono\"\n  })(true ? {\n    name: \"102cpzc\",\n    styles: \"text-align:center;padding-top:3rem;display:flex;justify-content:space-around;@media (min-width: 1101px){padding-left:3.5rem;}@media (max-width: 1100px){display:grid;}@media (max-width: 995px){padding-left:0rem;display:flex;}@media (max-width: 450px){display:grid;}\"\n  } : {\n    name: \"102cpzc\",\n    styles: \"text-align:center;padding-top:3rem;display:flex;justify-content:space-around;@media (min-width: 1101px){padding-left:3.5rem;}@media (max-width: 1100px){display:grid;}@media (max-width: 995px){padding-left:0rem;display:flex;}@media (max-width: 450px){display:grid;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var Icono = _styled(\"img\", true ? {\n    target: \"epnm5sf0\"\n  } : {\n    target: \"epnm5sf0\",\n    label: \"Icono\"\n  })(true ? {\n    name: \"zj60q6\",\n    styles: \"cursor:pointer;@media (max-width: 1440px){width:12rem;}@media (max-width: 1100px){width:9rem;}@media (max-width: 995px){width:12rem;}@media (max-width: 708px){width:9rem;}@media (max-width: 538px){width:8rem;}\"\n  } : {\n    name: \"zj60q6\",\n    styles: \"cursor:pointer;@media (max-width: 1440px){width:12rem;}@media (max-width: 1100px){width:9rem;}@media (max-width: 995px){width:12rem;}@media (max-width: 708px){width:9rem;}@media (max-width: 538px){width:8rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n  /*const ContenedorIconoD = styled.div`\n    text-align: center;\n    margin-bottom: 3rem;\n     @media(min-width: 1101px) {\n      padding-left: 3.5rem;\n    }\n     @media(max-width: 995px) {\n     padding-left: 0rem;\n    }\n  `;\n  */\n\n\n  var _useState = useState(false),\n      abiertoModal = _useState[0],\n      cambiarAbiertoModal = _useState[1];\n\n  var _useState2 = useState(false),\n      abiertoModalD = _useState2[0],\n      cambiarAbiertoModalD = _useState2[1];\n\n  var _useState3 = useState(false),\n      abiertoModalT = _useState3[0],\n      cambiarAbiertoModalT = _useState3[1];\n\n  var abrirModal = function abrirModal() {\n    cambiarAbiertoModal(true);\n  };\n\n  var cerrarModal = function cerrarModal() {\n    cambiarAbiertoModal(false);\n  };\n\n  var abrirModalD = function abrirModalD() {\n    cambiarAbiertoModalD(true);\n  };\n\n  var cerrarModalD = function cerrarModalD() {\n    cambiarAbiertoModalD(false);\n  };\n\n  var abrirModalT = function abrirModalT() {\n    cambiarAbiertoModalT(true);\n  };\n\n  var cerrarModalT = function cerrarModalT() {\n    cambiarAbiertoModalT(false);\n  };\n\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(\"div\", {\n    className: \"otro\"\n  }, ___EmotionJSX(Contenedor, null, ___EmotionJSX(DivTexto, null, ___EmotionJSX(TituloBeneficios, null, \"Beneficios fundas HHS: \", ___EmotionJSX(\"br\", null)), ___EmotionJSX(Beneficios, null, ___EmotionJSX(BeneficiosLista, null, \"Fabricamos las mejores fundas del mercado, dise\\xF1adas para cubrir sus necesidades.\"), ___EmotionJSX(BeneficiosLista, null, \"Fundas ideales para handhelds, impresoras de etiquetas port\\xE1tiles y lectores de c\\xF3digos.\"), ___EmotionJSX(BeneficiosLista, null, \"Protecci\\xF3n indispensable que ayudar\\xE1 a sus equipos a soportar ca\\xEDdas o da\\xF1os accidentales.\"), ___EmotionJSX(BeneficiosLista, null, \"Fundas fabricadas con los mejores materiales, dise\\xF1adas a las medidas, caracter\\xEDsticas, especificaciones de cada marca y modelo.\"), ___EmotionJSX(BeneficiosLista, null, \"Adquiera la seguridad que sus equipos necesitan a precios accesibles.\")))), ___EmotionJSX(ContenedorIcono, null, ___EmotionJSX(\"div\", {\n    className: \"espi\"\n  }, ___EmotionJSX(Icono, {\n    src: \"/img/Envio gratis.webp\",\n    alt: \"Icono Fundas Envio Gratis\",\n    onClick: abrirModal\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, \"Env\\xEDo gratis\", ___EmotionJSX(\"br\", null), \" a toda la Rep\\xFAblica Mexicana.\"))), ___EmotionJSX(\"div\", {\n    className: \"espi\"\n  }, ___EmotionJSX(Icono, {\n    src: \"/img/Los mejores precios del mercado.webp\",\n    alt: \"Icono Mejores Precios Fundas\",\n    onClick: abrirModalD\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, \"Los mejores precios del mercado.\")))), ___EmotionJSX(\"div\", {\n    className: \"DivR\"\n  }, ___EmotionJSX(ContenedorD, null, ___EmotionJSX(Link, {\n    href: \"/#renta\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestro servicio de Renta!\")))), ___EmotionJSX(Link, {\n    href: \"/#reparacion\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestro servicio de Reparaci\\xF3n!\")))), ___EmotionJSX(Link, {\n    href: \"/#venta\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestro servicio de Venta!\")))), ___EmotionJSX(Link, {\n    href: \"/venta-de-accesorios-y-consumibles\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Adquiera los accesorios y consumibles que necesita!\")))), ___EmotionJSX(Link, {\n    href: \"/DSD-venta-en-ruta\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestra soluci\\xF3n \\\"DSD\\\" para venta en ruta!\")))), ___EmotionJSX(Link, {\n    href: \"/impresion-credenciales-tarjetas-gafetes-pvc\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"Conozca nuestro servicio de impresion de credenciales\"))))))), ___EmotionJSX(Modal, {\n    show: abiertoModal,\n    onHide: cerrarModal,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Env\\xEDo gratis a toda la Rep\\xFAblica Mexicana.\")), ___EmotionJSX(Modal.Body, null, \"Contamos con env\\xEDo gratis a toda la Rep\\xFAblica Mexicana, nosotros le mandamos sin cargo adicional, las fundas que necesite, hechas a la medida, adecuadas para cada marca y modelo del mercado.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModal\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalD,\n    onHide: cerrarModalD,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Los mejores precios del mercado.\")), ___EmotionJSX(Modal.Body, null, \"En Hand Held Solutions, nos comprometemos a brindarle los mejores precios, para nosotros es importante que cuente con fundas que cubran sus necesidades y protejan sus equipos a precios accesibles.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalD\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalT,\n    onHide: cerrarModalT,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Los mejores precios del mercado.\")), ___EmotionJSX(Modal.Body, null, \"Fabricamos las mejores fundas del mercado, dise\\xF1adas para cubrir sus necesidades. Adquiera la protecci\\xF3n que sus equipos necesitan. Dise\\xF1os de la mejor calidad, hechos con materiales de primera. Fundas fabricadas a las medidas de diferentes marcas y modelos, protecci\\xF3n indispensable que ayudar\\xE1 a sus equipos a soportar ca\\xEDdas o da\\xF1os accidentales.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalT\n  }, \"Cerrar\"))));\n};\n\nexport default TextoFundas;","map":null,"metadata":{},"sourceType":"module"}