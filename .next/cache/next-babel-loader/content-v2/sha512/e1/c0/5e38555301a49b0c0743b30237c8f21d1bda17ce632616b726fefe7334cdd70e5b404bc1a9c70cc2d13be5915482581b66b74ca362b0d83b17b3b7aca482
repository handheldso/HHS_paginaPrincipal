{"ast":null,"code":"import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { PrevButton, NextButton, PlayButton } from \"./carouselButtons\";\nimport useEmblaCarousel from \"embla-carousel-react\";\nimport { videoIndex, videoThumbnail, SwapDuration } from \"../../hooks/CarouselMedia\";\nimport { VideoModal } from './VideoModal';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst EmblaCarousel = ({\n  slides\n}) => {\n  const [viewportRef, embla] = useEmblaCarousel({\n    slidesToScroll: 2,\n    skipSnaps: false,\n    loop: true\n  });\n  const {\n    0: prevBtnEnabled,\n    1: setPrevBtnEnabled\n  } = useState(false);\n  const {\n    0: nextBtnEnabled,\n    1: setNextBtnEnabled\n  } = useState(false);\n  const defaultScrollState = true;\n  const {\n    0: scrolling,\n    1: setScrollState\n  } = useState(defaultScrollState);\n  const scrollingRef = useRef(defaultScrollState);\n  const {\n    0: modalVideoUrl,\n    1: setModalUrl\n  } = useState(\"\");\n  let scrollingForward = true;\n  let interval = undefined;\n  const IntervalDuration = SwapDuration * 1000;\n  const {\n    0: videoModalOpen,\n    1: showVideoModal\n  } = useState(false);\n  const scrollPrev = useCallback(() => embla && embla.scrollPrev(), [embla]);\n  const scrollNext = useCallback(() => embla && embla.scrollNext(), [embla]);\n  const onSelect = useCallback(() => {\n    if (!embla) return;\n    setPrevBtnEnabled(embla.canScrollPrev());\n    setNextBtnEnabled(embla.canScrollNext());\n  }, [embla]);\n\n  const ShowVideo = videoID => {\n    setModalUrl(videoID);\n    setScrollState(false);\n    showVideoModal(prev => !prev);\n  };\n\n  const setModalVisibility = isOpen => {\n    showVideoModal(isOpen);\n    setScrollState(prev => !prev);\n  };\n\n  useEffect(() => {\n    scrollingRef.current = scrolling;\n  });\n  useEffect(() => {\n    if (!embla) return;\n    embla.on(\"select\", onSelect);\n    onSelect();\n\n    if (interval == undefined) {\n      startInterval();\n      setScrollState(true);\n    }\n  }, [embla, onSelect]);\n\n  const startInterval = () => {\n    interval = setInterval(() => {\n      if (scrollingRef.current == true) {\n        if (scrollingForward == true) {\n          if (embla.canScrollNext()) scrollNext();else {\n            scrollingForward = false;\n            scrollPrev();\n          }\n        } else {\n          if (embla.canScrollPrev()) scrollPrev();else {\n            scrollingForward = true;\n            scrollNext();\n          }\n        }\n      }\n    }, IntervalDuration);\n  };\n\n  return ___EmotionJSX(\"div\", null, ___EmotionJSX(\"div\", {\n    className: \"embla\"\n  }, ___EmotionJSX(\"div\", {\n    className: \"embla__viewport\",\n    ref: viewportRef\n  }, ___EmotionJSX(\"div\", {\n    className: \"embla__container\"\n  }, slides.map(index => ___EmotionJSX(\"div\", {\n    className: \"embla__slide\",\n    key: index\n  }, ___EmotionJSX(\"div\", {\n    className: \"embla__slide__inner\"\n  }, ___EmotionJSX(\"div\", {\n    className: \"video__carousel_slot\",\n    onClick: () => {\n      ShowVideo(videoIndex(index).id);\n    }\n  }, ___EmotionJSX(\"img\", {\n    src: videoThumbnail(videoIndex(index).id)\n  }), ___EmotionJSX(\"p\", {\n    className: \"carousel_item_name\"\n  }, videoIndex(index).name), ___EmotionJSX(PlayButton, null))))))), ___EmotionJSX(PrevButton, {\n    onClick: scrollPrev,\n    enabled: prevBtnEnabled\n  }), ___EmotionJSX(NextButton, {\n    onClick: scrollNext,\n    enabled: nextBtnEnabled\n  })), ___EmotionJSX(VideoModal, {\n    showModal: videoModalOpen,\n    setShowModal: setModalVisibility,\n    videoID: modalVideoUrl\n  }));\n};\n\nexport default EmblaCarousel;","map":null,"metadata":{},"sourceType":"module"}