{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\nvar _jsxFileName = \"C:\\\\Users\\\\Crist\\\\Desktop\\\\HHS-20211123T184355Z-001\\\\HHS\\\\components\\\\pestanas\\\\TextoEtiquetas.js\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport useWindowSize from \"../../hooks/useWindowSize\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst TextoEtiquetas = () => {\n  const Contenedor = _styled(\"div\", false ? {\n    target: \"ej1y3l919\"\n  } : {\n    target: \"ej1y3l919\",\n    label: \"Contenedor\"\n  })(false ? {\n    name: \"yb3z0d\",\n    styles: \"width:50%;@media (max-width: 995px){width:100%;}\"\n  } : {\n    name: \"yb3z0d\",\n    styles: \"width:50%;@media (max-width: 995px){width:100%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ3Jpc3RcXERlc2t0b3BcXEhIUy0yMDIxMTEyM1QxODQzNTVaLTAwMVxcSEhTXFxjb21wb25lbnRzXFxwZXN0YW5hc1xcVGV4dG9FdGlxdWV0YXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTStCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcQ3Jpc3RcXERlc2t0b3BcXEhIUy0yMDIxMTEyM1QxODQzNTVaLTAwMVxcSEhTXFxjb21wb25lbnRzXFxwZXN0YW5hc1xcVGV4dG9FdGlxdWV0YXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xyXG5pbXBvcnQgTGluayBmcm9tIFwibmV4dC9saW5rXCI7XHJcbmltcG9ydCB1c2VXaW5kb3dTaXplIGZyb20gXCIuLi8uLi9ob29rcy91c2VXaW5kb3dTaXplXCI7XHJcblxyXG5jb25zdCBUZXh0b0V0aXF1ZXRhcyA9ICgpID0+IHtcclxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiA1MCU7XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5NXB4KSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IERpdlRyZXNJbWdUZXh0ID0gc3R5bGVkLmRpdmBcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBtYXJnaW4tdG9wOiA3cmVtO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTAwcHgpIHtcclxuICAgICAgbWFyZ2luLXRvcDogMXJlbTtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTgxNnB4KSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDJyZW07XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE2MTlweCkge1xyXG4gICAgICBtYXJnaW4tdG9wOiAzcmVtO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IERpdlRyZXNJbWdUZXh0U2luRmxleCA9IHN0eWxlZC5kaXZgXHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgbWFyZ2luOiAwcHggYXV0bztcclxuICBgO1xyXG5cclxuICBjb25zdCBCZW5lZmljaW9zID0gc3R5bGVkLnVsYFxyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgIG1hcmdpbi1sZWZ0OiAyNXB4O1xyXG4gICAgZGlzcGxheTogZ3JpZDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE3NTBweCkge1xyXG4gICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE0MDBweCkge1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICBwYWRkaW5nLXRvcDogMnJlbTtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTk1cHgpIHtcclxuICAgICAgd2lkdGg6IDkwJTtcclxuICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MzBweCkge1xyXG4gICAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgQmVuZWZpY2lvc0xpc3RhID0gc3R5bGVkLmxpYFxyXG4gICAgbGlzdC1zdHlsZTogb3V0c2lkZTtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDUzMHB4KSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBJTUdUQyA9IHN0eWxlZC5kaXZgXHJcbiAgICB3aWR0aDogNTIlO1xyXG4gICAgaGVpZ2h0OiA3MCU7XHJcbiAgICBtYXJnaW4tdG9wOiAwcHg7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XHJcbiAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNzg2cHgpIHtcclxuICAgICAgd2lkdGg6IDY1JTtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTQwMHB4KSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgcGFkZGluZy1sZWZ0OiAwcHg7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgSU1HRVQ9IHN0eWxlZC5kaXZgXHJcbiAgICBtYXgtd2lkdGg6NTAwcHg7XHJcbiAgICBoZWlnaHQ6IDcwJTtcclxuICAgIG1hcmdpbi10b3A6IDBweDtcclxuICAgIHBhZGRpbmctbGVmdDogMnJlbTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XHJcblxyXG4gICAgaW1ne1xyXG4gICAgICBtYXgtd2lkdGg6aW5oZXJpdDtcclxuICAgICAgXHJcbiAgICB9XHJcbiAgYDtcclxuXHJcblxyXG4gIGNvbnN0IERpdlNlZ3VuZG9UZXh0byA9IHN0eWxlZC5kaXZgXHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmc6IDJyZW07XHJcbiAgICBtYXJnaW4tdG9wOiAzcmVtO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNDAwcHgpIHtcclxuICAgICAgbWFyZ2luLXRvcDogLTIxMnB4O1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MzBweCkge1xyXG4gICAgICBwYWRkaW5nOiAxcmVtO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IERpdlRlcmNlclRleHRvID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAycmVtO1xyXG4gICAgXHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4MzBweCkge1xyXG4gICAgICBwYWRkaW5nOiAxcmVtO1xyXG4gICAgICBmbGV4LWRpcmVjdGlvbjpjb2x1bW47XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcblxyXG5cclxuICBjb25zdCBUZXh0b1NlZ3VuZG9EaXYgPSBzdHlsZWQucGBcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgZm9udC1zaXplOiAxNXB4O1xyXG4gICAgICBwYWRkaW5nOiAxNXB4O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IFRleHRvVGVyY2VyRGl2ID0gc3R5bGVkLmRpdmBcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MzBweCkge1xyXG4gICAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgRGl2UFZDID0gc3R5bGVkLmRpdmBcclxuICAgIG1hcmdpbi10b3A6IDRyZW07XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDUzMHB4KSB7XHJcbiAgICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgVGl0dWxvSW1wcmVzaW9uID0gc3R5bGVkLmgyYFxyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuXHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgVGl0dWxvSW1wcmVzaW9uRG9zID0gc3R5bGVkLmgyYFxyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAyLjVyZW07XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgT3ZhVGV4RGl2ID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiA3OCU7XHJcbiAgICBoZWlnaHQ6IDQuNXJlbTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cmVtO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4OTlweCkge1xyXG4gICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IE92YVRleERpdkQgPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6IDc4JTtcclxuXHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHJlbTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG1hcmdpbjogYXV0bztcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogODk5cHgpIHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBPdmFUZXggPSBzdHlsZWQucGBcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDEwcHg7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE1MDBweCkge1xyXG4gICAgICBmb250LXNpemU6IDE5cHg7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEzNTVweCkge1xyXG4gICAgICBmb250LXNpemU6IDE3cHg7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEyNTBweCkge1xyXG4gICAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgVGV4dERpdiA9IHN0eWxlZC5kaXZgXHJcbiAgICB3aWR0aDogODAlO1xyXG4gICAgbWFyZ2luOiAwcHggYXV0bztcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTQwMHB4KSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IENvbnRlbmVkb3JEID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLXRvcDogNHJlbTtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTk1cHgpIHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBJTUdDRVIgPSBzdHlsZWQuaW1nYFxyXG4gICAgYm9yZGVyLXJhZGl1czoxNXB4O1xyXG4gICAgb2JqZWN0LWZpdDogY29udGFpbjtcclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpIHtcclxuICAgICAgd2lkdGg6IDUwJSAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDcwcHgpIHtcclxuICAgICAgd2lkdGg6IDQ1JSAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTVweCkge1xyXG4gICAgICB3aWR0aDogNjAlICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3Qgc2l6ZSA9IHVzZVdpbmRvd1NpemUoKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIDxDb250ZW5lZG9yPlxyXG4gICAgICAgIHtzaXplID4gMTQwMCA/IChcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgPERpdlRyZXNJbWdUZXh0PlxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgIDxCZW5lZmljaW9zPlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGgzPlxyXG4gICAgICAgICAgICAgICAgICA8Yj5JbXByZXNpb24gZGUgZXRpcXVldGFzIGNvbiBkaWZlcmVudGVzIHRpcG9zIGRlIGFkaGVzaXZvczo8L2I+XHJcbiAgICAgICAgICAgICAgICA8L2gzPlxyXG4gICAgICAgICAgICAgIDwvZGl2PiAgXHJcbiAgICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICAgIFBlcm1hbmVudGUuXHJcbiAgICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICAgIFJlbW92aWJsZS5cclxuICAgICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgICAgRGUgYWx0YSBhZGhlcmVuY2lhLlxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBBY3LDrWxpY28ue1wiIFwifVxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICA8L0JlbmVmaWNpb3M+XHJcbiAgICAgICAgICAgIDxJTUdFVD5cclxuICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9pbWcvRXRpcXVldGFzLmpwZ1wiIGFsdD1cIkV0aXF1ZXRhc1wiIHdpZHRoPVwiNTAwcHhcIi8+XHJcbiAgICAgICAgICAgIDwvSU1HRVQ+XHJcbiAgICAgICAgICA8L0RpdlRyZXNJbWdUZXh0PlxyXG4gICAgICAgICkgOiAoXHJcbiAgICAgICAgICA8RGl2VHJlc0ltZ1RleHRTaW5GbGV4PlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDxCZW5lZmljaW9zPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2FyYW5cIj5cclxuICAgICAgICAgICAgICAgIDxoMz5cclxuICAgICAgICAgICAgICAgICAgPGI+SW1wcmVzacOzbiBkZSBldGlxdWV0YXMgY29uIGRpZmVyZW50ZXMgdGlwb3MgZGUgYWRoZXNpdm9zPC9iPlxyXG4gICAgICAgICAgICAgICAgPC9oMz5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgICAgUGVybWFuZW50ZS5cclxuICAgICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgICAgUmVtb3ZpYmxlLlxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBEZSBhbHRhIGFkaGVyZW5jaWEuXHJcbiAgICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICAgIEFjcsOtbGljb1xyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICA8L0JlbmVmaWNpb3M+XHJcblxyXG4gICAgICAgICAgICA8SU1HRVQ+XHJcbiAgICAgICAgICAgICAgPGltZ1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW1ncmVzY2VcIlxyXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9FdGlxdWV0YXMuanBnXCJcclxuICAgICAgICAgICAgICAgIGFsdD1cIkV0aXF1ZXRhc1wiXHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9JTUdFVD5cclxuXHJcbiAgICAgICAgICA8L0RpdlRyZXNJbWdUZXh0U2luRmxleD5cclxuICAgICAgICApfVxyXG5cclxuICAgICAgICA8RGl2U2VndW5kb1RleHRvPlxyXG4gICAgICAgICAgPFRleHRvU2VndW5kb0Rpdj5cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgPFRpdHVsb0ltcHJlc2lvbj5cclxuICAgICAgICAgIDxiPkltcHJlc2lvbiBkZSBldGlxdWV0YXMgZW4gbG9zIG1lam9yZXMgbWF0ZXJpYWxlcyBjb21vIGxvIHNvbjo8L2I+XHJcbiAgICAgICAgICA8L1RpdHVsb0ltcHJlc2lvbj5cclxuICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+UG9saW9sZWZpbmE6IEFkZWN1YWRhIHBhcmEgZXRpcXVldGFzIGNvbG9jYWRhcyBlbiBzdXBlcmZpY2llcyBhc3BlcmFzIGUgaXJyZWd1bGFyZXM8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+UG9saXByb3BpbGVubzogQWRlY3VhZG8gcGFyYSBldGlxdWV0YXIgem9uYXMgY3VydmFzIGUgaXJyZWd1bGFyZXMsIGNhcGF6IGRlIHNvcG9ydGFyIGJhamFzIHRlbXBlcmF0dXJhcy48L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+UG9saWVzdGVyOiBBbHRhIHJlc2l0ZW5jaWEgeSBkdXJhYmlsaWRhZCA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+UG9saWFtaWRhOiBBZGVjdWFkYSBwYXJhIGV0aXF1ZXRhcyBjYXBhY2VzIGRlIHJlc2lzdGlyIGFsdGFzIHRlbXBlcmF0dXJhcy48L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+UG9saWFtaWRhOiBBZGVjdWFkYSBwYXJhIGV0aXF1ZXRhcyBjYXBhY2VzIGRlIHJlaXNpc3RpciBhbHRhcyB0ZW1wZXJhdHVyYXM8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+UGFwZWw6IEFkZWN1YWRvIHBhcmEgaW1wcmVzaW9uIGRlIGV0aXF1ZXRhcyBkZSB1c28gZ2VuZXJhbCB5IGVzcGVjaWFsaWRhZGVzKHJlc2lzdGVuY2lhIGEgYWx0YXMgdGVtcGVyYXR1cmFzLCB1bHRyYSByZW1vdmlibGUsIGFsdGEgYWRoZXJlbmNpYSB5IG3DoXMuKTwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgIDwvVGV4dG9TZWd1bmRvRGl2PiBcclxuICAgICAgICA8L0RpdlNlZ3VuZG9UZXh0bz5cclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICA8RGl2VGVyY2VyVGV4dG8+XHJcbiAgICAgICAgPERpdlBWQz5cclxuICAgICAgICAgIDxUaXR1bG9JbXByZXNpb24+XHJcbiAgICAgICAgICA8Yj5JbXByZXNpb24gZGUgZXRpcXVldGFzIHBhcmEgZGlmZXJlbnRlcyBwcm9jZXNvczwvYj5cclxuICAgICAgICAgIDwvVGl0dWxvSW1wcmVzaW9uPlxyXG4gICAgICAgICAgPG9sIGNsYXNzTmFtZT1cImVzb2xcIj5cclxuICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+RXRpcXVldGFzIHRleHRpbGVzLjwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5FdGlxdWV0YXMgcGFyYSBlbCBzZWN0b3IgYXV0b21vdHJpei48L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+RXRpcXVldGFzIHBhcmEgZWwgY29udHJvbCBkZSBwcm9kdWN0b3MuIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5FdGlxdWV0YXMgcGFyYSBlbCBzZWN0b3IgZGUgbWFudWZhY3R1cmEuPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPkV0aXF1ZXRhcyBwYXJhIGVsIHNlY3RvciBzYWx1ZC48L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgIDwvb2w+XHJcbiAgICAgICAgPC9EaXZQVkM+XHJcbiAgICAgICAgICA8SU1HQ0VSIHNyYz1cIi9pbWcvRXRpcXVldGFzTXVlc3RyYS53ZWJwXCIgYWx0PVwiRXRpcXVldGFzIE11ZXN0cmFcIiB3aWR0aD1cIjMwJVwiLz5cclxuICAgICAgICA8L0RpdlRlcmNlclRleHRvPlxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkRpdlJcIj5cclxuICAgICAgICAgIDxDb250ZW5lZG9yRD5cclxuICAgICAgICAgICAgPExpbmsgaHJlZj1cIi8jcmVudGFcIj5cclxuICAgICAgICAgICAgICA8T3ZhVGV4RGl2IGNsYXNzTmFtZT1cImJcIj5cclxuICAgICAgICAgICAgICAgIDxPdmFUZXg+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5cIj7CoUNvbm96Y2EgbnVlc3RybyBzZXJ2aWNpbyBkZSBSZW50YSE8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L092YVRleD5cclxuICAgICAgICAgICAgICA8L092YVRleERpdj5cclxuICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICA8TGluayBocmVmPVwiLyNyZXBhcmFjaW9uXCI+XHJcbiAgICAgICAgICAgICAgPE92YVRleERpdiBjbGFzc05hbWU9XCJiXCI+XHJcbiAgICAgICAgICAgICAgICA8T3ZhVGV4PlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgwqFDb25vemNhIG51ZXN0cm8gc2VydmljaW8gZGUgUmVwYXJhY2nDs24hXHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvT3ZhVGV4PlxyXG4gICAgICAgICAgICAgIDwvT3ZhVGV4RGl2PlxyXG4gICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvI3ZlbnRhXCI+XHJcbiAgICAgICAgICAgICAgPE92YVRleERpdiBjbGFzc05hbWU9XCJiXCI+XHJcbiAgICAgICAgICAgICAgICA8T3ZhVGV4PlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuXCI+wqFDb25vemNhIG51ZXN0cm8gc2VydmljaW8gZGUgVmVudGEhPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9PdmFUZXg+XHJcbiAgICAgICAgICAgICAgPC9PdmFUZXhEaXY+XHJcbiAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgPExpbmsgaHJlZj1cIi92ZW50YS1kZS1hY2Nlc29yaW9zLXktY29uc3VtaWJsZXNcIj5cclxuICAgICAgICAgICAgICA8T3ZhVGV4RGl2IGNsYXNzTmFtZT1cImJcIj5cclxuICAgICAgICAgICAgICAgIDxPdmFUZXg+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5cIj5cclxuICAgICAgICAgICAgICAgICAgICDCoUFkcXVpZXJhIGxvcyBhY2Nlc29yaW9zIHkgY29uc3VtaWJsZXMgcXVlIG5lY2VzaXRhIVxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L092YVRleD5cclxuICAgICAgICAgICAgICA8L092YVRleERpdj5cclxuICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICA8TGluayBocmVmPVwiL0RTRC12ZW50YS1lbi1ydXRhXCI+XHJcbiAgICAgICAgICAgICAgPE92YVRleERpdiBjbGFzc05hbWU9XCJiXCI+XHJcbiAgICAgICAgICAgICAgICA8T3ZhVGV4PlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgwqFDb25vemNhIG51ZXN0cmEgc29sdWNpw7NuIFwiRFNEXCIgcGFyYSB2ZW50YSBlbiBydXRhIVxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L092YVRleD5cclxuICAgICAgICAgICAgICA8L092YVRleERpdj5cclxuICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICA8TGluayBocmVmPVwiL3ZlbnRhLWZ1bmRhcy1oYW5kaGVsZC1pbXByZXNvcmEtcG9ydGF0aWxcIj5cclxuICAgICAgICAgICAgICA8T3ZhVGV4RGl2RCBjbGFzc05hbWU9XCJiXCI+XHJcbiAgICAgICAgICAgICAgICA8T3ZhVGV4PlxyXG4gICAgICAgICAgICAgICAgICBDb250YW1vcyBjb24gZnVuZGFzIGRpc2XDsWFkYXMgYSBsYSBtZWRpZGEgcGFyYSBjdW1wbGlyIGNvbiBzdXNcclxuICAgICAgICAgICAgICAgICAgbmVjZXNpZGFkZXMuXHJcbiAgICAgICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgwqFBZHF1aWVyYSBsYSBwcm90ZWNjacOzbiBxdWUgc3VzIGVxdWlwb3MgbmVjZXNpdGFuIVxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L092YVRleD5cclxuICAgICAgICAgICAgICA8L092YVRleERpdkQ+XHJcbiAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9pbXByZXNpb24tY3JlZGVuY2lhbGVzLXRhcmpldGFzLWdhZmV0ZXMtcHZjXCI+XHJcbiAgICAgICAgICAgICAgPE92YVRleERpdkQgY2xhc3NOYW1lPVwiYlwiPlxyXG4gICAgICAgICAgICAgICAgPE92YVRleD5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5cIj5cclxuICAgICAgICAgICAgICAgICAgwqFDb25vemNhIG51ZXN0cm8gc2VydmljaW8gZGUgaW1wcmVzaW9uIGRlIGNyZWRlbmNpYWxlcyFcclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvT3ZhVGV4PlxyXG4gICAgICAgICAgICAgIDwvT3ZhVGV4RGl2RD5cclxuICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgPC9Db250ZW5lZG9yRD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9Db250ZW5lZG9yPlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRleHRvRXRpcXVldGFzO1xyXG4iXX0= */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const DivTresImgText = _styled(\"div\", false ? {\n    target: \"ej1y3l918\"\n  } : {\n    target: \"ej1y3l918\",\n    label: \"DivTresImgText\"\n  })(false ? {\n    name: \"1j15a8y\",\n    styles: \"display:flex;margin-top:7rem;@media (max-width: 1900px){margin-top:1rem;}@media (max-width: 1816px){margin-top:2rem;}@media (max-width: 1619px){margin-top:3rem;}\"\n  } : {\n    name: \"1j15a8y\",\n    styles: \"display:flex;margin-top:7rem;@media (max-width: 1900px){margin-top:1rem;}@media (max-width: 1816px){margin-top:2rem;}@media (max-width: 1619px){margin-top:3rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const DivTresImgTextSinFlex = _styled(\"div\", false ? {\n    target: \"ej1y3l917\"\n  } : {\n    target: \"ej1y3l917\",\n    label: \"DivTresImgTextSinFlex\"\n  })(false ? {\n    name: \"1iqrkxi\",\n    styles: \"display:grid;margin:0px auto\"\n  } : {\n    name: \"1iqrkxi\",\n    styles: \"display:grid;margin:0px auto\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ3Jpc3RcXERlc2t0b3BcXEhIUy0yMDIxMTEyM1QxODQzNTVaLTAwMVxcSEhTXFxjb21wb25lbnRzXFxwZXN0YW5hc1xcVGV4dG9FdGlxdWV0YXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0IwQyIsImZpbGUiOiJDOlxcVXNlcnNcXENyaXN0XFxEZXNrdG9wXFxISFMtMjAyMTExMjNUMTg0MzU1Wi0wMDFcXEhIU1xcY29tcG9uZW50c1xccGVzdGFuYXNcXFRleHRvRXRpcXVldGFzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcclxuaW1wb3J0IExpbmsgZnJvbSBcIm5leHQvbGlua1wiO1xyXG5pbXBvcnQgdXNlV2luZG93U2l6ZSBmcm9tIFwiLi4vLi4vaG9va3MvdXNlV2luZG93U2l6ZVwiO1xyXG5cclxuY29uc3QgVGV4dG9FdGlxdWV0YXMgPSAoKSA9PiB7XHJcbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXHJcbiAgICB3aWR0aDogNTAlO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTVweCkge1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBEaXZUcmVzSW1nVGV4dCA9IHN0eWxlZC5kaXZgXHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgbWFyZ2luLXRvcDogN3JlbTtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTkwMHB4KSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDFyZW07XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE4MTZweCkge1xyXG4gICAgICBtYXJnaW4tdG9wOiAycmVtO1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNjE5cHgpIHtcclxuICAgICAgbWFyZ2luLXRvcDogM3JlbTtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBEaXZUcmVzSW1nVGV4dFNpbkZsZXggPSBzdHlsZWQuZGl2YFxyXG4gICAgZGlzcGxheTogZ3JpZDtcclxuICAgIG1hcmdpbjogMHB4IGF1dG87XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgQmVuZWZpY2lvcyA9IHN0eWxlZC51bGBcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBtYXJnaW4tbGVmdDogMjVweDtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNzUwcHgpIHtcclxuICAgICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNDAwcHgpIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgcGFkZGluZy10b3A6IDJyZW07XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5NXB4KSB7XHJcbiAgICAgIHdpZHRoOiA5MCU7XHJcbiAgICAgIGhlaWdodDogMTAwJTtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgZm9udC1zaXplOiAxNXB4O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IEJlbmVmaWNpb3NMaXN0YSA9IHN0eWxlZC5saWBcclxuICAgIGxpc3Qtc3R5bGU6IG91dHNpZGU7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MzBweCkge1xyXG4gICAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgSU1HVEMgPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6IDUyJTtcclxuICAgIGhlaWdodDogNzAlO1xyXG4gICAgbWFyZ2luLXRvcDogMHB4O1xyXG4gICAgcGFkZGluZy1sZWZ0OiAycmVtO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTVweDtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTc4NnB4KSB7XHJcbiAgICAgIHdpZHRoOiA2NSU7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE0MDBweCkge1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDUzMHB4KSB7XHJcbiAgICAgIHBhZGRpbmctbGVmdDogMHB4O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IElNR0VUPSBzdHlsZWQuZGl2YFxyXG4gICAgbWF4LXdpZHRoOjUwMHB4O1xyXG4gICAgaGVpZ2h0OiA3MCU7XHJcbiAgICBtYXJnaW4tdG9wOiAwcHg7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XHJcbiAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xyXG5cclxuICAgIGltZ3tcclxuICAgICAgbWF4LXdpZHRoOmluaGVyaXQ7XHJcbiAgICAgIFxyXG4gICAgfVxyXG4gIGA7XHJcblxyXG5cclxuICBjb25zdCBEaXZTZWd1bmRvVGV4dG8gPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgbWFyZ2luLXRvcDogM3JlbTtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTQwMHB4KSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IC0yMTJweDtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgcGFkZGluZzogMXJlbTtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBEaXZUZXJjZXJUZXh0byA9IHN0eWxlZC5kaXZgXHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmctbGVmdDogMnJlbTtcclxuICAgIFxyXG4gICAgZGlzcGxheTogZmxleDtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogODMwcHgpIHtcclxuICAgICAgcGFkZGluZzogMXJlbTtcclxuICAgICAgZmxleC1kaXJlY3Rpb246Y29sdW1uO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG5cclxuXHJcbiAgY29uc3QgVGV4dG9TZWd1bmRvRGl2ID0gc3R5bGVkLnBgXHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDUzMHB4KSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgICAgcGFkZGluZzogMTVweDtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBUZXh0b1RlcmNlckRpdiA9IHN0eWxlZC5kaXZgXHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgZm9udC1zaXplOiAxNXB4O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IERpdlBWQyA9IHN0eWxlZC5kaXZgXHJcbiAgICBtYXJnaW4tdG9wOiA0cmVtO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAycmVtO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MzBweCkge1xyXG4gICAgICBwYWRkaW5nOiAxcmVtO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IFRpdHVsb0ltcHJlc2lvbiA9IHN0eWxlZC5oMmBcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcblxyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gIGA7XHJcblxyXG4gIGNvbnN0IFRpdHVsb0ltcHJlc2lvbkRvcyA9IHN0eWxlZC5oMmBcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMi41cmVtO1xyXG4gIGA7XHJcblxyXG4gIGNvbnN0IE92YVRleERpdiA9IHN0eWxlZC5kaXZgXHJcbiAgICB3aWR0aDogNzglO1xyXG4gICAgaGVpZ2h0OiA0LjVyZW07XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHJlbTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG1hcmdpbjogYXV0bztcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogODk5cHgpIHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBPdmFUZXhEaXZEID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiA3OCU7XHJcblxyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNzZjMDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRyZW07XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW46IGF1dG87XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDg5OXB4KSB7XHJcbiAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgT3ZhVGV4ID0gc3R5bGVkLnBgXHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBwYWRkaW5nLXRvcDogMjBweDtcclxuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNTAwcHgpIHtcclxuICAgICAgZm9udC1zaXplOiAxOXB4O1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMzU1cHgpIHtcclxuICAgICAgZm9udC1zaXplOiAxN3B4O1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMjUwcHgpIHtcclxuICAgICAgZm9udC1zaXplOiAxNXB4O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IFRleHREaXYgPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6IDgwJTtcclxuICAgIG1hcmdpbjogMHB4IGF1dG87XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE0MDBweCkge1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBDb250ZW5lZG9yRCA9IHN0eWxlZC5kaXZgXHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1hcmdpbi10b3A6IDRyZW07XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5NXB4KSB7XHJcbiAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgSU1HQ0VSID0gc3R5bGVkLmltZ2BcclxuICAgIGJvcmRlci1yYWRpdXM6MTVweDtcclxuICAgIG9iamVjdC1maXQ6IGNvbnRhaW47XHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XHJcbiAgICAgIHdpZHRoOiA1MCUgIWltcG9ydGFudDtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTA3MHB4KSB7XHJcbiAgICAgIHdpZHRoOiA0NSUgIWltcG9ydGFudDtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTk1cHgpIHtcclxuICAgICAgd2lkdGg6IDYwJSAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IHNpemUgPSB1c2VXaW5kb3dTaXplKCk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8Q29udGVuZWRvcj5cclxuICAgICAgICB7c2l6ZSA+IDE0MDAgPyAoXHJcbiAgICAgICAgICBcclxuICAgICAgICAgIDxEaXZUcmVzSW1nVGV4dD5cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICA8QmVuZWZpY2lvcz5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxoMz5cclxuICAgICAgICAgICAgICAgICAgPGI+SW1wcmVzaW9uIGRlIGV0aXF1ZXRhcyBjb24gZGlmZXJlbnRlcyB0aXBvcyBkZSBhZGhlc2l2b3M6PC9iPlxyXG4gICAgICAgICAgICAgICAgPC9oMz5cclxuICAgICAgICAgICAgICA8L2Rpdj4gIFxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBQZXJtYW5lbnRlLlxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBSZW1vdmlibGUuXHJcbiAgICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICAgIERlIGFsdGEgYWRoZXJlbmNpYS5cclxuICAgICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgICAgQWNyw61saWNvLntcIiBcIn1cclxuICAgICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgPC9CZW5lZmljaW9zPlxyXG4gICAgICAgICAgICA8SU1HRVQ+XHJcbiAgICAgICAgICAgICAgPGltZyBzcmM9XCIvaW1nL0V0aXF1ZXRhcy5qcGdcIiBhbHQ9XCJFdGlxdWV0YXNcIiB3aWR0aD1cIjUwMHB4XCIvPlxyXG4gICAgICAgICAgICA8L0lNR0VUPlxyXG4gICAgICAgICAgPC9EaXZUcmVzSW1nVGV4dD5cclxuICAgICAgICApIDogKFxyXG4gICAgICAgICAgPERpdlRyZXNJbWdUZXh0U2luRmxleD5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8QmVuZWZpY2lvcz5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdhcmFuXCI+XHJcbiAgICAgICAgICAgICAgICA8aDM+XHJcbiAgICAgICAgICAgICAgICAgIDxiPkltcHJlc2nDs24gZGUgZXRpcXVldGFzIGNvbiBkaWZlcmVudGVzIHRpcG9zIGRlIGFkaGVzaXZvczwvYj5cclxuICAgICAgICAgICAgICAgIDwvaDM+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICAgIFBlcm1hbmVudGUuXHJcbiAgICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICAgIFJlbW92aWJsZS5cclxuICAgICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgICAgRGUgYWx0YSBhZGhlcmVuY2lhLlxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBBY3LDrWxpY29cclxuICAgICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgPC9CZW5lZmljaW9zPlxyXG5cclxuICAgICAgICAgICAgPElNR0VUPlxyXG4gICAgICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImltZ3Jlc2NlXCJcclxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvRXRpcXVldGFzLmpwZ1wiXHJcbiAgICAgICAgICAgICAgICBhbHQ9XCJFdGlxdWV0YXNcIlxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvSU1HRVQ+XHJcblxyXG4gICAgICAgICAgPC9EaXZUcmVzSW1nVGV4dFNpbkZsZXg+XHJcbiAgICAgICAgKX1cclxuXHJcbiAgICAgICAgPERpdlNlZ3VuZG9UZXh0bz5cclxuICAgICAgICAgIDxUZXh0b1NlZ3VuZG9EaXY+XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIDxUaXR1bG9JbXByZXNpb24+XHJcbiAgICAgICAgICA8Yj5JbXByZXNpb24gZGUgZXRpcXVldGFzIGVuIGxvcyBtZWpvcmVzIG1hdGVyaWFsZXMgY29tbyBsbyBzb246PC9iPlxyXG4gICAgICAgICAgPC9UaXR1bG9JbXByZXNpb24+XHJcbiAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlBvbGlvbGVmaW5hOiBBZGVjdWFkYSBwYXJhIGV0aXF1ZXRhcyBjb2xvY2FkYXMgZW4gc3VwZXJmaWNpZXMgYXNwZXJhcyBlIGlycmVndWxhcmVzPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlBvbGlwcm9waWxlbm86IEFkZWN1YWRvIHBhcmEgZXRpcXVldGFyIHpvbmFzIGN1cnZhcyBlIGlycmVndWxhcmVzLCBjYXBheiBkZSBzb3BvcnRhciBiYWphcyB0ZW1wZXJhdHVyYXMuPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlBvbGllc3RlcjogQWx0YSByZXNpdGVuY2lhIHkgZHVyYWJpbGlkYWQgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlBvbGlhbWlkYTogQWRlY3VhZGEgcGFyYSBldGlxdWV0YXMgY2FwYWNlcyBkZSByZXNpc3RpciBhbHRhcyB0ZW1wZXJhdHVyYXMuPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlBvbGlhbWlkYTogQWRlY3VhZGEgcGFyYSBldGlxdWV0YXMgY2FwYWNlcyBkZSByZWlzaXN0aXIgYWx0YXMgdGVtcGVyYXR1cmFzPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlBhcGVsOiBBZGVjdWFkbyBwYXJhIGltcHJlc2lvbiBkZSBldGlxdWV0YXMgZGUgdXNvIGdlbmVyYWwgeSBlc3BlY2lhbGlkYWRlcyhyZXNpc3RlbmNpYSBhIGFsdGFzIHRlbXBlcmF0dXJhcywgdWx0cmEgcmVtb3ZpYmxlLCBhbHRhIGFkaGVyZW5jaWEgeSBtw6FzLik8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICA8L1RleHRvU2VndW5kb0Rpdj4gXHJcbiAgICAgICAgPC9EaXZTZWd1bmRvVGV4dG8+XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgPERpdlRlcmNlclRleHRvPlxyXG4gICAgICAgIDxEaXZQVkM+XHJcbiAgICAgICAgICA8VGl0dWxvSW1wcmVzaW9uPlxyXG4gICAgICAgICAgPGI+SW1wcmVzaW9uIGRlIGV0aXF1ZXRhcyBwYXJhIGRpZmVyZW50ZXMgcHJvY2Vzb3M8L2I+XHJcbiAgICAgICAgICA8L1RpdHVsb0ltcHJlc2lvbj5cclxuICAgICAgICAgIDxvbCBjbGFzc05hbWU9XCJlc29sXCI+XHJcbiAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPkV0aXF1ZXRhcyB0ZXh0aWxlcy48L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+RXRpcXVldGFzIHBhcmEgZWwgc2VjdG9yIGF1dG9tb3RyaXouPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPkV0aXF1ZXRhcyBwYXJhIGVsIGNvbnRyb2wgZGUgcHJvZHVjdG9zLiA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+RXRpcXVldGFzIHBhcmEgZWwgc2VjdG9yIGRlIG1hbnVmYWN0dXJhLjwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5FdGlxdWV0YXMgcGFyYSBlbCBzZWN0b3Igc2FsdWQuPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICA8L29sPlxyXG4gICAgICAgIDwvRGl2UFZDPlxyXG4gICAgICAgICAgPElNR0NFUiBzcmM9XCIvaW1nL0V0aXF1ZXRhc011ZXN0cmEud2VicFwiIGFsdD1cIkV0aXF1ZXRhcyBNdWVzdHJhXCIgd2lkdGg9XCIzMCVcIi8+XHJcbiAgICAgICAgPC9EaXZUZXJjZXJUZXh0bz5cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJEaXZSXCI+XHJcbiAgICAgICAgICA8Q29udGVuZWRvckQ+XHJcbiAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvI3JlbnRhXCI+XHJcbiAgICAgICAgICAgICAgPE92YVRleERpdiBjbGFzc05hbWU9XCJiXCI+XHJcbiAgICAgICAgICAgICAgICA8T3ZhVGV4PlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuXCI+wqFDb25vemNhIG51ZXN0cm8gc2VydmljaW8gZGUgUmVudGEhPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9PdmFUZXg+XHJcbiAgICAgICAgICAgICAgPC9PdmFUZXhEaXY+XHJcbiAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgPExpbmsgaHJlZj1cIi8jcmVwYXJhY2lvblwiPlxyXG4gICAgICAgICAgICAgIDxPdmFUZXhEaXYgY2xhc3NOYW1lPVwiYlwiPlxyXG4gICAgICAgICAgICAgICAgPE92YVRleD5cclxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiblwiPlxyXG4gICAgICAgICAgICAgICAgICAgIMKhQ29ub3pjYSBudWVzdHJvIHNlcnZpY2lvIGRlIFJlcGFyYWNpw7NuIVxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L092YVRleD5cclxuICAgICAgICAgICAgICA8L092YVRleERpdj5cclxuICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICA8TGluayBocmVmPVwiLyN2ZW50YVwiPlxyXG4gICAgICAgICAgICAgIDxPdmFUZXhEaXYgY2xhc3NOYW1lPVwiYlwiPlxyXG4gICAgICAgICAgICAgICAgPE92YVRleD5cclxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiblwiPsKhQ29ub3pjYSBudWVzdHJvIHNlcnZpY2lvIGRlIFZlbnRhITwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvT3ZhVGV4PlxyXG4gICAgICAgICAgICAgIDwvT3ZhVGV4RGl2PlxyXG4gICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvdmVudGEtZGUtYWNjZXNvcmlvcy15LWNvbnN1bWlibGVzXCI+XHJcbiAgICAgICAgICAgICAgPE92YVRleERpdiBjbGFzc05hbWU9XCJiXCI+XHJcbiAgICAgICAgICAgICAgICA8T3ZhVGV4PlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgwqFBZHF1aWVyYSBsb3MgYWNjZXNvcmlvcyB5IGNvbnN1bWlibGVzIHF1ZSBuZWNlc2l0YSFcclxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9PdmFUZXg+XHJcbiAgICAgICAgICAgICAgPC9PdmFUZXhEaXY+XHJcbiAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9EU0QtdmVudGEtZW4tcnV0YVwiPlxyXG4gICAgICAgICAgICAgIDxPdmFUZXhEaXYgY2xhc3NOYW1lPVwiYlwiPlxyXG4gICAgICAgICAgICAgICAgPE92YVRleD5cclxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiblwiPlxyXG4gICAgICAgICAgICAgICAgICAgIMKhQ29ub3pjYSBudWVzdHJhIHNvbHVjacOzbiBcIkRTRFwiIHBhcmEgdmVudGEgZW4gcnV0YSFcclxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9PdmFUZXg+XHJcbiAgICAgICAgICAgICAgPC9PdmFUZXhEaXY+XHJcbiAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgPExpbmsgaHJlZj1cIi92ZW50YS1mdW5kYXMtaGFuZGhlbGQtaW1wcmVzb3JhLXBvcnRhdGlsXCI+XHJcbiAgICAgICAgICAgICAgPE92YVRleERpdkQgY2xhc3NOYW1lPVwiYlwiPlxyXG4gICAgICAgICAgICAgICAgPE92YVRleD5cclxuICAgICAgICAgICAgICAgICAgQ29udGFtb3MgY29uIGZ1bmRhcyBkaXNlw7FhZGFzIGEgbGEgbWVkaWRhIHBhcmEgY3VtcGxpciBjb24gc3VzXHJcbiAgICAgICAgICAgICAgICAgIG5lY2VzaWRhZGVzLlxyXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiblwiPlxyXG4gICAgICAgICAgICAgICAgICAgIMKhQWRxdWllcmEgbGEgcHJvdGVjY2nDs24gcXVlIHN1cyBlcXVpcG9zIG5lY2VzaXRhbiFcclxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9PdmFUZXg+XHJcbiAgICAgICAgICAgICAgPC9PdmFUZXhEaXZEPlxyXG4gICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvaW1wcmVzaW9uLWNyZWRlbmNpYWxlcy10YXJqZXRhcy1nYWZldGVzLXB2Y1wiPlxyXG4gICAgICAgICAgICAgIDxPdmFUZXhEaXZEIGNsYXNzTmFtZT1cImJcIj5cclxuICAgICAgICAgICAgICAgIDxPdmFUZXg+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuXCI+XHJcbiAgICAgICAgICAgICAgICAgIMKhQ29ub3pjYSBudWVzdHJvIHNlcnZpY2lvIGRlIGltcHJlc2lvbiBkZSBjcmVkZW5jaWFsZXMhXHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L092YVRleD5cclxuICAgICAgICAgICAgICA8L092YVRleERpdkQ+XHJcbiAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgIDwvQ29udGVuZWRvckQ+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvQ29udGVuZWRvcj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZXh0b0V0aXF1ZXRhcztcclxuIl19 */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Beneficios = _styled(\"ul\", false ? {\n    target: \"ej1y3l916\"\n  } : {\n    target: \"ej1y3l916\",\n    label: \"Beneficios\"\n  })(false ? {\n    name: \"wn0hft\",\n    styles: \"font-size:20px;text-align:left;margin-left:25px;display:grid;align-items:center;@media (max-width: 1750px){font-size:20px;}@media (max-width: 1400px){width:100%;height:100%;padding-top:2rem;}@media (max-width: 995px){width:90%;height:100%;}@media (max-width: 530px){font-size:15px;}\"\n  } : {\n    name: \"wn0hft\",\n    styles: \"font-size:20px;text-align:left;margin-left:25px;display:grid;align-items:center;@media (max-width: 1750px){font-size:20px;}@media (max-width: 1400px){width:100%;height:100%;padding-top:2rem;}@media (max-width: 995px){width:90%;height:100%;}@media (max-width: 530px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const BeneficiosLista = _styled(\"li\", false ? {\n    target: \"ej1y3l915\"\n  } : {\n    target: \"ej1y3l915\",\n    label: \"BeneficiosLista\"\n  })(false ? {\n    name: \"thhj3o\",\n    styles: \"list-style:outside;align-items:center;font-size:20px;@media (max-width: 530px){font-size:15px;}\"\n  } : {\n    name: \"thhj3o\",\n    styles: \"list-style:outside;align-items:center;font-size:20px;@media (max-width: 530px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const IMGTC = _styled(\"div\", false ? {\n    target: \"ej1y3l914\"\n  } : {\n    target: \"ej1y3l914\",\n    label: \"IMGTC\"\n  })(false ? {\n    name: \"1fu3lmy\",\n    styles: \"width:52%;height:70%;margin-top:0px;padding-left:2rem;border-radius:15px;@media (max-width: 1786px){width:65%;}@media (max-width: 1400px){width:100%;height:100%;text-align:center;}@media (max-width: 530px){padding-left:0px;}\"\n  } : {\n    name: \"1fu3lmy\",\n    styles: \"width:52%;height:70%;margin-top:0px;padding-left:2rem;border-radius:15px;@media (max-width: 1786px){width:65%;}@media (max-width: 1400px){width:100%;height:100%;text-align:center;}@media (max-width: 530px){padding-left:0px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const IMGET = _styled(\"div\", false ? {\n    target: \"ej1y3l913\"\n  } : {\n    target: \"ej1y3l913\",\n    label: \"IMGET\"\n  })(false ? {\n    name: \"1n7ivv\",\n    styles: \"max-width:500px;height:70%;margin-top:0px;padding-left:2rem;border-radius:15px;img{max-width:inherit;}\"\n  } : {\n    name: \"1n7ivv\",\n    styles: \"max-width:500px;height:70%;margin-top:0px;padding-left:2rem;border-radius:15px;img{max-width:inherit;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const DivSegundoTexto = _styled(\"div\", false ? {\n    target: \"ej1y3l912\"\n  } : {\n    target: \"ej1y3l912\",\n    label: \"DivSegundoTexto\"\n  })(false ? {\n    name: \"fs09x\",\n    styles: \"width:100%;padding:2rem;margin-top:3rem;@media (max-width: 1400px){margin-top:-212px;}@media (max-width: 530px){padding:1rem;}\"\n  } : {\n    name: \"fs09x\",\n    styles: \"width:100%;padding:2rem;margin-top:3rem;@media (max-width: 1400px){margin-top:-212px;}@media (max-width: 530px){padding:1rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const DivTercerTexto = _styled(\"div\", false ? {\n    target: \"ej1y3l911\"\n  } : {\n    target: \"ej1y3l911\",\n    label: \"DivTercerTexto\"\n  })(false ? {\n    name: \"edm7mf\",\n    styles: \"width:100%;padding-left:2rem;display:flex;@media (max-width: 830px){padding:1rem;flex-direction:column;}\"\n  } : {\n    name: \"edm7mf\",\n    styles: \"width:100%;padding-left:2rem;display:flex;@media (max-width: 830px){padding:1rem;flex-direction:column;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TextoSegundoDiv = _styled(\"p\", false ? {\n    target: \"ej1y3l910\"\n  } : {\n    target: \"ej1y3l910\",\n    label: \"TextoSegundoDiv\"\n  })(false ? {\n    name: \"1qxyp4e\",\n    styles: \"font-size:20px;@media (max-width: 530px){font-size:15px;padding:15px;}\"\n  } : {\n    name: \"1qxyp4e\",\n    styles: \"font-size:20px;@media (max-width: 530px){font-size:15px;padding:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TextoTercerDiv = _styled(\"div\", false ? {\n    target: \"ej1y3l99\"\n  } : {\n    target: \"ej1y3l99\",\n    label: \"TextoTercerDiv\"\n  })(false ? {\n    name: \"14dnk7q\",\n    styles: \"font-size:20px;display:grid;align-items:center;@media (max-width: 530px){font-size:15px;}\"\n  } : {\n    name: \"14dnk7q\",\n    styles: \"font-size:20px;display:grid;align-items:center;@media (max-width: 530px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const DivPVC = _styled(\"div\", false ? {\n    target: \"ej1y3l98\"\n  } : {\n    target: \"ej1y3l98\",\n    label: \"DivPVC\"\n  })(false ? {\n    name: \"1vs5rtw\",\n    styles: \"margin-top:4rem;padding-left:2rem;@media (max-width: 530px){padding:1rem;}\"\n  } : {\n    name: \"1vs5rtw\",\n    styles: \"margin-top:4rem;padding-left:2rem;@media (max-width: 530px){padding:1rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TituloImpresion = _styled(\"h2\", false ? {\n    target: \"ej1y3l97\"\n  } : {\n    target: \"ej1y3l97\",\n    label: \"TituloImpresion\"\n  })(false ? {\n    name: \"1q82c7c\",\n    styles: \"text-align:left;font-size:20px\"\n  } : {\n    name: \"1q82c7c\",\n    styles: \"text-align:left;font-size:20px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TituloImpresionDos = _styled(\"h2\", false ? {\n    target: \"ej1y3l96\"\n  } : {\n    target: \"ej1y3l96\",\n    label: \"TituloImpresionDos\"\n  })(false ? {\n    name: \"17g321i\",\n    styles: \"text-align:center;font-weight:bold;font-size:20px;margin-top:2.5rem\"\n  } : {\n    name: \"17g321i\",\n    styles: \"text-align:center;font-weight:bold;font-size:20px;margin-top:2.5rem\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const OvaTexDiv = _styled(\"div\", false ? {\n    target: \"ej1y3l95\"\n  } : {\n    target: \"ej1y3l95\",\n    label: \"OvaTexDiv\"\n  })(false ? {\n    name: \"bmxbe\",\n    styles: \"width:78%;height:4.5rem;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\"\n  } : {\n    name: \"bmxbe\",\n    styles: \"width:78%;height:4.5rem;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const OvaTexDivD = _styled(\"div\", false ? {\n    target: \"ej1y3l94\"\n  } : {\n    target: \"ej1y3l94\",\n    label: \"OvaTexDivD\"\n  })(false ? {\n    name: \"1xutzvp\",\n    styles: \"width:78%;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\"\n  } : {\n    name: \"1xutzvp\",\n    styles: \"width:78%;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const OvaTex = _styled(\"p\", false ? {\n    target: \"ej1y3l93\"\n  } : {\n    target: \"ej1y3l93\",\n    label: \"OvaTex\"\n  })(false ? {\n    name: \"1i04rfa\",\n    styles: \"font-size:20px;padding-top:20px;padding-bottom:10px;color:white;@media (max-width: 1500px){font-size:19px;}@media (max-width: 1355px){font-size:17px;}@media (max-width: 1250px){font-size:15px;}\"\n  } : {\n    name: \"1i04rfa\",\n    styles: \"font-size:20px;padding-top:20px;padding-bottom:10px;color:white;@media (max-width: 1500px){font-size:19px;}@media (max-width: 1355px){font-size:17px;}@media (max-width: 1250px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TextDiv = _styled(\"div\", false ? {\n    target: \"ej1y3l92\"\n  } : {\n    target: \"ej1y3l92\",\n    label: \"TextDiv\"\n  })(false ? {\n    name: \"q68gb5\",\n    styles: \"width:80%;margin:0px auto;@media (max-width: 1400px){width:100%;}\"\n  } : {\n    name: \"q68gb5\",\n    styles: \"width:80%;margin:0px auto;@media (max-width: 1400px){width:100%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const ContenedorD = _styled(\"div\", false ? {\n    target: \"ej1y3l91\"\n  } : {\n    target: \"ej1y3l91\",\n    label: \"ContenedorD\"\n  })(false ? {\n    name: \"1akbdyk\",\n    styles: \"width:100%;margin-top:4rem;@media (max-width: 995px){display:none;}\"\n  } : {\n    name: \"1akbdyk\",\n    styles: \"width:100%;margin-top:4rem;@media (max-width: 995px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const IMGCER = _styled(\"img\", false ? {\n    target: \"ej1y3l90\"\n  } : {\n    target: \"ej1y3l90\",\n    label: \"IMGCER\"\n  })(false ? {\n    name: \"10mhlkd\",\n    styles: \"border-radius:15px;object-fit:contain;@media (max-width: 1200px){width:50%!important;}@media (max-width: 1070px){width:45%!important;}@media (max-width: 995px){width:60%!important;}\"\n  } : {\n    name: \"10mhlkd\",\n    styles: \"border-radius:15px;object-fit:contain;@media (max-width: 1200px){width:50%!important;}@media (max-width: 1070px){width:45%!important;}@media (max-width: 995px){width:60%!important;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const size = useWindowSize();\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Contenedor, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }\n  }, size > 1400 ? ___EmotionJSX(DivTresImgText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Beneficios, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 19\n    }\n  }, \"Impresion de etiquetas con diferentes tipos de adhesivos:\"))), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 15\n    }\n  }, \"Permanente.\"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 15\n    }\n  }, \"Removible.\"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 15\n    }\n  }, \"De alta adherencia.\"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 15\n    }\n  }, \"Acr\\xEDlico.\", \" \")), ___EmotionJSX(IMGET, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"img\", {\n    src: \"/img/Etiquetas.jpg\",\n    alt: \"Etiquetas\",\n    width: \"500px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 15\n    }\n  }))) : ___EmotionJSX(DivTresImgTextSinFlex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Beneficios, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"garan\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 19\n    }\n  }, \"Impresi\\xF3n de etiquetas con diferentes tipos de adhesivos\"))), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 15\n    }\n  }, \"Permanente.\"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 15\n    }\n  }, \"Removible.\"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 15\n    }\n  }, \"De alta adherencia.\"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 15\n    }\n  }, \"Acr\\xEDlico\")), ___EmotionJSX(IMGET, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(\"img\", {\n    className: \"imgresce\",\n    src: \"/img/Etiquetas.jpg\",\n    alt: \"Etiquetas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 15\n    }\n  }))), ___EmotionJSX(DivSegundoTexto, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(TextoSegundoDiv, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(TituloImpresion, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 11\n    }\n  }, \"Impresion de etiquetas en los mejores materiales como lo son:\")), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 11\n    }\n  }, \"Poliolefina: Adecuada para etiquetas colocadas en superficies asperas e irregulares\"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 11\n    }\n  }, \"Polipropileno: Adecuado para etiquetar zonas curvas e irregulares, capaz de soportar bajas temperaturas.\"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 11\n    }\n  }, \"Poliester: Alta resitencia y durabilidad \"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 11\n    }\n  }, \"Poliamida: Adecuada para etiquetas capaces de resistir altas temperaturas.\"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 11\n    }\n  }, \"Poliamida: Adecuada para etiquetas capaces de reisistir altas temperaturas\"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 11\n    }\n  }, \"Papel: Adecuado para impresion de etiquetas de uso general y especialidades(resistencia a altas temperaturas, ultra removible, alta adherencia y m\\xE1s.)\"))), ___EmotionJSX(DivTercerTexto, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(DivPVC, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(TituloImpresion, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 11\n    }\n  }, \"Impresion de etiquetas para diferentes procesos\")), ___EmotionJSX(\"ol\", {\n    className: \"esol\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 11\n    }\n  }, \"Etiquetas textiles.\"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 11\n    }\n  }, \"Etiquetas para el sector automotriz.\"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 11\n    }\n  }, \"Etiquetas para el control de productos. \"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 11\n    }\n  }, \"Etiquetas para el sector de manufactura.\"), ___EmotionJSX(BeneficiosLista, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 11\n    }\n  }, \"Etiquetas para el sector salud.\"))), ___EmotionJSX(IMGCER, {\n    src: \"/img/EtiquetasMuestra.webp\",\n    alt: \"Etiquetas Muestra\",\n    width: \"30%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 11\n    }\n  })), ___EmotionJSX(\"div\", {\n    className: \"DivR\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(ContenedorD, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Link, {\n    href: \"/#renta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(OvaTex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"span\", {\n    className: \"n\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 19\n    }\n  }, \"\\xA1Conozca nuestro servicio de Renta!\")))), ___EmotionJSX(Link, {\n    href: \"/#reparacion\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(OvaTex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"span\", {\n    className: \"n\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 19\n    }\n  }, \"\\xA1Conozca nuestro servicio de Reparaci\\xF3n!\")))), ___EmotionJSX(Link, {\n    href: \"/#venta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(OvaTex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"span\", {\n    className: \"n\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 19\n    }\n  }, \"\\xA1Conozca nuestro servicio de Venta!\")))), ___EmotionJSX(Link, {\n    href: \"/venta-de-accesorios-y-consumibles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(OvaTex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"span\", {\n    className: \"n\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 19\n    }\n  }, \"\\xA1Adquiera los accesorios y consumibles que necesita!\")))), ___EmotionJSX(Link, {\n    href: \"/DSD-venta-en-ruta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(OvaTex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"span\", {\n    className: \"n\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 19\n    }\n  }, \"\\xA1Conozca nuestra soluci\\xF3n \\\"DSD\\\" para venta en ruta!\")))), ___EmotionJSX(Link, {\n    href: \"/venta-fundas-handheld-impresora-portatil\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(OvaTexDivD, {\n    className: \"b\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(OvaTex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 17\n    }\n  }, \"Contamos con fundas dise\\xF1adas a la medida para cumplir con sus necesidades.\", ___EmotionJSX(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 19\n    }\n  }), ___EmotionJSX(\"span\", {\n    className: \"n\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 19\n    }\n  }, \"\\xA1Adquiera la protecci\\xF3n que sus equipos necesitan!\")))), ___EmotionJSX(Link, {\n    href: \"/impresion-credenciales-tarjetas-gafetes-pvc\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(OvaTexDivD, {\n    className: \"b\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(OvaTex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"span\", {\n    className: \"n\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 17\n    }\n  }, \"\\xA1Conozca nuestro servicio de impresion de credenciales!\"))))))));\n};\n\nexport default TextoEtiquetas;","map":{"version":3,"sources":["C:/Users/Crist/Desktop/HHS-20211123T184355Z-001/HHS/components/pestanas/TextoEtiquetas.js"],"names":["React","Link","useWindowSize","TextoEtiquetas","Contenedor","DivTresImgText","DivTresImgTextSinFlex","Beneficios","BeneficiosLista","IMGTC","IMGET","DivSegundoTexto","DivTercerTexto","TextoSegundoDiv","TextoTercerDiv","DivPVC","TituloImpresion","TituloImpresionDos","OvaTexDiv","OvaTexDivD","OvaTex","TextDiv","ContenedorD","IMGCER","size"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport Link from \"next/link\";\r\nimport useWindowSize from \"../../hooks/useWindowSize\";\r\n\r\nconst TextoEtiquetas = () => {\r\n  const Contenedor = styled.div`\r\n    width: 50%;\r\n\r\n    @media (max-width: 995px) {\r\n      width: 100%;\r\n    }\r\n  `;\r\n\r\n  const DivTresImgText = styled.div`\r\n    display: flex;\r\n    margin-top: 7rem;\r\n\r\n    @media (max-width: 1900px) {\r\n      margin-top: 1rem;\r\n    }\r\n\r\n    @media (max-width: 1816px) {\r\n      margin-top: 2rem;\r\n    }\r\n\r\n    @media (max-width: 1619px) {\r\n      margin-top: 3rem;\r\n    }\r\n  `;\r\n\r\n  const DivTresImgTextSinFlex = styled.div`\r\n    display: grid;\r\n    margin: 0px auto;\r\n  `;\r\n\r\n  const Beneficios = styled.ul`\r\n    font-size: 20px;\r\n    text-align: left;\r\n    margin-left: 25px;\r\n    display: grid;\r\n    align-items: center;\r\n\r\n    @media (max-width: 1750px) {\r\n      font-size: 20px;\r\n    }\r\n\r\n    @media (max-width: 1400px) {\r\n      width: 100%;\r\n      height: 100%;\r\n      padding-top: 2rem;\r\n    }\r\n\r\n    @media (max-width: 995px) {\r\n      width: 90%;\r\n      height: 100%;\r\n    }\r\n\r\n    @media (max-width: 530px) {\r\n      font-size: 15px;\r\n    }\r\n  `;\r\n\r\n  const BeneficiosLista = styled.li`\r\n    list-style: outside;\r\n    align-items: center;\r\n    font-size: 20px;\r\n\r\n    @media (max-width: 530px) {\r\n      font-size: 15px;\r\n    }\r\n  `;\r\n\r\n  const IMGTC = styled.div`\r\n    width: 52%;\r\n    height: 70%;\r\n    margin-top: 0px;\r\n    padding-left: 2rem;\r\n    border-radius: 15px;\r\n\r\n    @media (max-width: 1786px) {\r\n      width: 65%;\r\n    }\r\n\r\n    @media (max-width: 1400px) {\r\n      width: 100%;\r\n      height: 100%;\r\n      text-align: center;\r\n    }\r\n\r\n    @media (max-width: 530px) {\r\n      padding-left: 0px;\r\n    }\r\n  `;\r\n\r\n  const IMGET= styled.div`\r\n    max-width:500px;\r\n    height: 70%;\r\n    margin-top: 0px;\r\n    padding-left: 2rem;\r\n    border-radius: 15px;\r\n\r\n    img{\r\n      max-width:inherit;\r\n      \r\n    }\r\n  `;\r\n\r\n\r\n  const DivSegundoTexto = styled.div`\r\n    width: 100%;\r\n    padding: 2rem;\r\n    margin-top: 3rem;\r\n\r\n    @media (max-width: 1400px) {\r\n      margin-top: -212px;\r\n    }\r\n\r\n    @media (max-width: 530px) {\r\n      padding: 1rem;\r\n    }\r\n  `;\r\n\r\n  const DivTercerTexto = styled.div`\r\n    width: 100%;\r\n    padding-left: 2rem;\r\n    \r\n    display: flex;\r\n\r\n    @media (max-width: 830px) {\r\n      padding: 1rem;\r\n      flex-direction:column;\r\n    }\r\n  `;\r\n\r\n\r\n\r\n  const TextoSegundoDiv = styled.p`\r\n    font-size: 20px;\r\n\r\n    @media (max-width: 530px) {\r\n      font-size: 15px;\r\n      padding: 15px;\r\n    }\r\n  `;\r\n\r\n  const TextoTercerDiv = styled.div`\r\n    font-size: 20px;\r\n    display: grid;\r\n    align-items: center;\r\n\r\n    @media (max-width: 530px) {\r\n      font-size: 15px;\r\n    }\r\n  `;\r\n\r\n  const DivPVC = styled.div`\r\n    margin-top: 4rem;\r\n    padding-left: 2rem;\r\n\r\n    @media (max-width: 530px) {\r\n      padding: 1rem;\r\n    }\r\n  `;\r\n\r\n  const TituloImpresion = styled.h2`\r\n    text-align: left;\r\n\r\n    font-size: 20px;\r\n  `;\r\n\r\n  const TituloImpresionDos = styled.h2`\r\n    text-align: center;\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    margin-top: 2.5rem;\r\n  `;\r\n\r\n  const OvaTexDiv = styled.div`\r\n    width: 78%;\r\n    height: 4.5rem;\r\n    background-color: #0076c0;\r\n    border-radius: 4rem;\r\n    text-align: center;\r\n    margin: auto;\r\n    cursor: pointer;\r\n\r\n    @media (max-width: 899px) {\r\n      display: none;\r\n    }\r\n  `;\r\n\r\n  const OvaTexDivD = styled.div`\r\n    width: 78%;\r\n\r\n    background-color: #0076c0;\r\n    border-radius: 4rem;\r\n    text-align: center;\r\n    margin: auto;\r\n    cursor: pointer;\r\n\r\n    @media (max-width: 899px) {\r\n      display: none;\r\n    }\r\n  `;\r\n\r\n  const OvaTex = styled.p`\r\n    font-size: 20px;\r\n    padding-top: 20px;\r\n    padding-bottom: 10px;\r\n    color: white;\r\n\r\n    @media (max-width: 1500px) {\r\n      font-size: 19px;\r\n    }\r\n\r\n    @media (max-width: 1355px) {\r\n      font-size: 17px;\r\n    }\r\n\r\n    @media (max-width: 1250px) {\r\n      font-size: 15px;\r\n    }\r\n  `;\r\n\r\n  const TextDiv = styled.div`\r\n    width: 80%;\r\n    margin: 0px auto;\r\n\r\n    @media (max-width: 1400px) {\r\n      width: 100%;\r\n    }\r\n  `;\r\n\r\n  const ContenedorD = styled.div`\r\n    width: 100%;\r\n    margin-top: 4rem;\r\n\r\n    @media (max-width: 995px) {\r\n      display: none;\r\n    }\r\n  `;\r\n\r\n  const IMGCER = styled.img`\r\n    border-radius:15px;\r\n    object-fit: contain;\r\n    @media (max-width: 1200px) {\r\n      width: 50% !important;\r\n    }\r\n\r\n    @media (max-width: 1070px) {\r\n      width: 45% !important;\r\n    }\r\n\r\n    @media (max-width: 995px) {\r\n      width: 60% !important;\r\n    }\r\n  `;\r\n\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <>\r\n      <Contenedor>\r\n        {size > 1400 ? (\r\n          \r\n          <DivTresImgText>\r\n          \r\n            <Beneficios>\r\n            <div>\r\n                <h3>\r\n                  <b>Impresion de etiquetas con diferentes tipos de adhesivos:</b>\r\n                </h3>\r\n              </div>  \r\n              <BeneficiosLista>\r\n                Permanente.\r\n              </BeneficiosLista>\r\n              <BeneficiosLista>\r\n                Removible.\r\n              </BeneficiosLista>\r\n              <BeneficiosLista>\r\n                De alta adherencia.\r\n              </BeneficiosLista>\r\n              <BeneficiosLista>\r\n                Acrílico.{\" \"}\r\n              </BeneficiosLista>\r\n            </Beneficios>\r\n            <IMGET>\r\n              <img src=\"/img/Etiquetas.jpg\" alt=\"Etiquetas\" width=\"500px\"/>\r\n            </IMGET>\r\n          </DivTresImgText>\r\n        ) : (\r\n          <DivTresImgTextSinFlex>\r\n            \r\n            \r\n            <Beneficios>\r\n              <div className=\"garan\">\r\n                <h3>\r\n                  <b>Impresión de etiquetas con diferentes tipos de adhesivos</b>\r\n                </h3>\r\n              </div>\r\n              <BeneficiosLista>\r\n                Permanente.\r\n              </BeneficiosLista>\r\n              <BeneficiosLista>\r\n                Removible.\r\n              </BeneficiosLista>\r\n              <BeneficiosLista>\r\n                De alta adherencia.\r\n              </BeneficiosLista>\r\n              <BeneficiosLista>\r\n                Acrílico\r\n              </BeneficiosLista>\r\n            </Beneficios>\r\n\r\n            <IMGET>\r\n              <img\r\n                className=\"imgresce\"\r\n                src=\"/img/Etiquetas.jpg\"\r\n                alt=\"Etiquetas\"\r\n              />\r\n            </IMGET>\r\n\r\n          </DivTresImgTextSinFlex>\r\n        )}\r\n\r\n        <DivSegundoTexto>\r\n          <TextoSegundoDiv>\r\n          \r\n          <TituloImpresion>\r\n          <b>Impresion de etiquetas en los mejores materiales como lo son:</b>\r\n          </TituloImpresion>\r\n          <BeneficiosLista>Poliolefina: Adecuada para etiquetas colocadas en superficies asperas e irregulares</BeneficiosLista>\r\n          <BeneficiosLista>Polipropileno: Adecuado para etiquetar zonas curvas e irregulares, capaz de soportar bajas temperaturas.</BeneficiosLista>\r\n          <BeneficiosLista>Poliester: Alta resitencia y durabilidad </BeneficiosLista>\r\n          <BeneficiosLista>Poliamida: Adecuada para etiquetas capaces de resistir altas temperaturas.</BeneficiosLista>\r\n          <BeneficiosLista>Poliamida: Adecuada para etiquetas capaces de reisistir altas temperaturas</BeneficiosLista>\r\n          <BeneficiosLista>Papel: Adecuado para impresion de etiquetas de uso general y especialidades(resistencia a altas temperaturas, ultra removible, alta adherencia y más.)</BeneficiosLista>\r\n            \r\n          </TextoSegundoDiv> \r\n        </DivSegundoTexto>\r\n        \r\n                \r\n\r\n        <DivTercerTexto>\r\n        <DivPVC>\r\n          <TituloImpresion>\r\n          <b>Impresion de etiquetas para diferentes procesos</b>\r\n          </TituloImpresion>\r\n          <ol className=\"esol\">\r\n          <BeneficiosLista>Etiquetas textiles.</BeneficiosLista>\r\n          <BeneficiosLista>Etiquetas para el sector automotriz.</BeneficiosLista>\r\n          <BeneficiosLista>Etiquetas para el control de productos. </BeneficiosLista>\r\n          <BeneficiosLista>Etiquetas para el sector de manufactura.</BeneficiosLista>\r\n          <BeneficiosLista>Etiquetas para el sector salud.</BeneficiosLista>\r\n          </ol>\r\n        </DivPVC>\r\n          <IMGCER src=\"/img/EtiquetasMuestra.webp\" alt=\"Etiquetas Muestra\" width=\"30%\"/>\r\n        </DivTercerTexto>\r\n        \r\n\r\n        <div className=\"DivR\">\r\n          <ContenedorD>\r\n            <Link href=\"/#renta\">\r\n              <OvaTexDiv className=\"b\">\r\n                <OvaTex>\r\n                  <span className=\"n\">¡Conozca nuestro servicio de Renta!</span>\r\n                </OvaTex>\r\n              </OvaTexDiv>\r\n            </Link>\r\n            <Link href=\"/#reparacion\">\r\n              <OvaTexDiv className=\"b\">\r\n                <OvaTex>\r\n                  <span className=\"n\">\r\n                    ¡Conozca nuestro servicio de Reparación!\r\n                  </span>\r\n                </OvaTex>\r\n              </OvaTexDiv>\r\n            </Link>\r\n            <Link href=\"/#venta\">\r\n              <OvaTexDiv className=\"b\">\r\n                <OvaTex>\r\n                  <span className=\"n\">¡Conozca nuestro servicio de Venta!</span>\r\n                </OvaTex>\r\n              </OvaTexDiv>\r\n            </Link>\r\n            <Link href=\"/venta-de-accesorios-y-consumibles\">\r\n              <OvaTexDiv className=\"b\">\r\n                <OvaTex>\r\n                  <span className=\"n\">\r\n                    ¡Adquiera los accesorios y consumibles que necesita!\r\n                  </span>\r\n                </OvaTex>\r\n              </OvaTexDiv>\r\n            </Link>\r\n            <Link href=\"/DSD-venta-en-ruta\">\r\n              <OvaTexDiv className=\"b\">\r\n                <OvaTex>\r\n                  <span className=\"n\">\r\n                    ¡Conozca nuestra solución \"DSD\" para venta en ruta!\r\n                  </span>\r\n                </OvaTex>\r\n              </OvaTexDiv>\r\n            </Link>\r\n            <Link href=\"/venta-fundas-handheld-impresora-portatil\">\r\n              <OvaTexDivD className=\"b\">\r\n                <OvaTex>\r\n                  Contamos con fundas diseñadas a la medida para cumplir con sus\r\n                  necesidades.\r\n                  <br />\r\n                  <span className=\"n\">\r\n                    ¡Adquiera la protección que sus equipos necesitan!\r\n                  </span>\r\n                </OvaTex>\r\n              </OvaTexDivD>\r\n            </Link>\r\n            <Link href=\"/impresion-credenciales-tarjetas-gafetes-pvc\">\r\n              <OvaTexDivD className=\"b\">\r\n                <OvaTex>\r\n                <span className=\"n\">\r\n                  ¡Conozca nuestro servicio de impresion de credenciales!\r\n                </span>\r\n                </OvaTex>\r\n              </OvaTexDivD>\r\n            </Link>\r\n          </ContenedorD>\r\n        </div>\r\n      </Contenedor>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextoEtiquetas;\r\n"]},"metadata":{},"sourceType":"module"}