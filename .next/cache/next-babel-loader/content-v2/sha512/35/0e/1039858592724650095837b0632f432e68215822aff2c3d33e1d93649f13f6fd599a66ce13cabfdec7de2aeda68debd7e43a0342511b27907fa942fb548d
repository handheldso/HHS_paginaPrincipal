{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport useWindowSize from \"../../hooks/useWindowSize\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst TextoCredenciales = () => {\n  const Contenedor = _styled(\"div\", true ? {\n    target: \"e16dr8tm18\"\n  } : {\n    target: \"e16dr8tm18\",\n    label: \"Contenedor\"\n  })(true ? {\n    name: \"yb3z0d\",\n    styles: \"width:50%;@media (max-width: 995px){width:100%;}\"\n  } : {\n    name: \"yb3z0d\",\n    styles: \"width:50%;@media (max-width: 995px){width:100%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNFUlxcRGVza3RvcFxcbnVldm8gY29kaWdvIEhIUyAtIGNvcGlhXFxjb21wb25lbnRzXFxwZXN0YW5hc1xcVGV4dG9DcmVkZW5jaWFsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTStCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcVVNFUlxcRGVza3RvcFxcbnVldm8gY29kaWdvIEhIUyAtIGNvcGlhXFxjb21wb25lbnRzXFxwZXN0YW5hc1xcVGV4dG9DcmVkZW5jaWFsZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xyXG5pbXBvcnQgTGluayBmcm9tIFwibmV4dC9saW5rXCI7XHJcbmltcG9ydCB1c2VXaW5kb3dTaXplIGZyb20gXCIuLi8uLi9ob29rcy91c2VXaW5kb3dTaXplXCI7XHJcblxyXG5jb25zdCBUZXh0b0NyZWRlbmNpYWxlcyA9ICgpID0+IHtcclxuICBjb25zdCBDb250ZW5lZG9yID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiA1MCU7XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5NXB4KSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IERpdlRyZXNJbWdUZXh0ID0gc3R5bGVkLmRpdmBcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBtYXJnaW4tdG9wOiA3cmVtO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTAwcHgpIHtcclxuICAgICAgbWFyZ2luLXRvcDogNHJlbTtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTgxNnB4KSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDEycmVtO1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNjE5cHgpIHtcclxuICAgICAgbWFyZ2luLXRvcDogMThyZW07XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgRGl2VHJlc0ltZ1RleHRTaW5GbGV4ID0gc3R5bGVkLmRpdmBcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBtYXJnaW46IDE1cmVtIGF1dG87XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgQmVuZWZpY2lvcyA9IHN0eWxlZC51bGBcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICBtYXJnaW4tbGVmdDogMjVweDtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNzUwcHgpIHtcclxuICAgICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNDAwcHgpIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgcGFkZGluZy10b3A6IDJyZW07XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5NXB4KSB7XHJcbiAgICAgIHdpZHRoOiA5MCU7XHJcbiAgICAgIGhlaWdodDogMTAwJTtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgZm9udC1zaXplOiAxNXB4O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IEJlbmVmaWNpb3NMaXN0YSA9IHN0eWxlZC5saWBcclxuICAgIGxpc3Qtc3R5bGU6IG91dHNpZGU7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MzBweCkge1xyXG4gICAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgSU1HVEMgPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6IDUyJTtcclxuICAgIGhlaWdodDogNzAlO1xyXG4gICAgbWFyZ2luLXRvcDogMHB4O1xyXG4gICAgcGFkZGluZy1sZWZ0OiAycmVtO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNzg2cHgpIHtcclxuICAgICAgd2lkdGg6IDY1JTtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTQwMHB4KSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgcGFkZGluZy1sZWZ0OiAwcHg7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgRGl2U2VndW5kb1RleHRvID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZzogMnJlbTtcclxuICAgIG1hcmdpbi10b3A6IDNyZW07XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE0MDBweCkge1xyXG4gICAgICBtYXJnaW4tdG9wOiAtMjEycHg7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDUzMHB4KSB7XHJcbiAgICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgRGl2VGVyY2VyVGV4dG8gPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XHJcbiAgICBtYXJnaW4tdG9wOiAzcmVtO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgcGFkZGluZzogMXJlbTtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBUZXh0b1NlZ3VuZG9EaXYgPSBzdHlsZWQucGBcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgZm9udC1zaXplOiAxNXB4O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IFRleHRvVGVyY2VyRGl2ID0gc3R5bGVkLmRpdmBcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MzBweCkge1xyXG4gICAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgRGl2UFZDID0gc3R5bGVkLmRpdmBcclxuICAgIG1hcmdpbi10b3A6IDRyZW07XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDJyZW07XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDUzMHB4KSB7XHJcbiAgICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgVGl0dWxvSW1wcmVzaW9uID0gc3R5bGVkLmgyYFxyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICBgO1xyXG5cclxuICBjb25zdCBUaXR1bG9JbXByZXNpb25Eb3MgPSBzdHlsZWQuaDJgXHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIG1hcmdpbi10b3A6IDIuNXJlbTtcclxuICBgO1xyXG5cclxuICBjb25zdCBPdmFUZXhEaXYgPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6IDc4JTtcclxuICAgIGhlaWdodDogNC41cmVtO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNzZjMDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRyZW07XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW46IGF1dG87XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDg5OXB4KSB7XHJcbiAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgT3ZhVGV4RGl2RCA9IHN0eWxlZC5kaXZgXHJcbiAgICB3aWR0aDogNzglO1xyXG5cclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cmVtO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4OTlweCkge1xyXG4gICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IE92YVRleCA9IHN0eWxlZC5wYFxyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgcGFkZGluZy10b3A6IDIwcHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTUwMHB4KSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTlweDtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTM1NXB4KSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTdweDtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTI1MHB4KSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBUZXh0RGl2ID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiA4MCU7XHJcbiAgICBtYXJnaW46IDBweCBhdXRvO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNDAwcHgpIHtcclxuICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgQ29udGVuZWRvckQgPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBtYXJnaW4tdG9wOiA0cmVtO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTVweCkge1xyXG4gICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IElNR0NFUiA9IHN0eWxlZC5pbWdgXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XHJcbiAgICAgIHdpZHRoOiA1MCUgIWltcG9ydGFudDtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTA3MHB4KSB7XHJcbiAgICAgIHdpZHRoOiA0NSUgIWltcG9ydGFudDtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTk1cHgpIHtcclxuICAgICAgd2lkdGg6IDYwJSAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IHNpemUgPSB1c2VXaW5kb3dTaXplKCk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8Q29udGVuZWRvcj5cclxuICAgICAgICB7c2l6ZSA+IDE0MDAgPyAoXHJcbiAgICAgICAgICA8RGl2VHJlc0ltZ1RleHQ+XHJcbiAgICAgICAgICAgIDxJTUdUQz5cclxuICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9pbWcvVHJlc0NyZWRlbmNpYWxlcy53ZWJwXCIgYWx0PVwiQ3JlZGVuY2lhbGVzXCIgLz5cclxuICAgICAgICAgICAgPC9JTUdUQz5cclxuXHJcbiAgICAgICAgICAgIDxCZW5lZmljaW9zPlxyXG4gICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8aDM+XHJcbiAgICAgICAgICAgICAgICAgIDxiPkdhcmFudGl6YW1vczo8L2I+XHJcbiAgICAgICAgICAgICAgICA8L2gzPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBJbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBhIGNvbG9yLlxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBJbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBhIGJsYW5jbyB5IG5lZ3JvLlxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBJbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBhIDEgeSAyIGNhcmFzLlxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBJbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBjb24gaG9sb2dyYW1hIGRlIHNlZ3VyaWRhZC57XCIgXCJ9XHJcbiAgICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgIDwvQmVuZWZpY2lvcz5cclxuICAgICAgICAgIDwvRGl2VHJlc0ltZ1RleHQ+XHJcbiAgICAgICAgKSA6IChcclxuICAgICAgICAgIDxEaXZUcmVzSW1nVGV4dFNpbkZsZXg+XHJcbiAgICAgICAgICAgIHtzaXplIDwgOTk1ID8gKFxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2VudGVcIj5cclxuICAgICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJmb250aGRcIj5cclxuICAgICAgICAgICAgICAgICAgSW1wcmVzacOzbiBkZSBjcmVkZW5jaWFsZXMgYSBkb21pY2lsaW8gcGFyYSBlbXByZXNhcyBlXHJcbiAgICAgICAgICAgICAgICAgIGluc3RpdHVjaW9uZXMgZWR1Y2F0aXZhcy5cclxuICAgICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgIDxiPsKhTGxhbWUgcGFyYSBtw6FzIGluZm9ybWFjacOzbiE8L2I+XHJcbiAgICAgICAgICAgICAgICA8L2gyPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgIDw+IDwvPlxyXG4gICAgICAgICAgICApfVxyXG4gICAgICAgICAgICA8SU1HVEM+XHJcbiAgICAgICAgICAgICAgPGltZ1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW1ncmVzY2VcIlxyXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9UcmVzQ3JlZGVuY2lhbGVzLndlYnBcIlxyXG4gICAgICAgICAgICAgICAgYWx0PVwiQ3JlZGVuY2lhbGVzXCJcclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L0lNR1RDPlxyXG4gICAgICAgICAgICA8QmVuZWZpY2lvcz5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdhcmFuXCI+XHJcbiAgICAgICAgICAgICAgICA8aDM+XHJcbiAgICAgICAgICAgICAgICAgIDxiPkdhcmFudGl6YW1vczwvYj5cclxuICAgICAgICAgICAgICAgIDwvaDM+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICAgIEltcHJlc2nDs24gZGUgY3JlZGVuY2lhbGVzIGEgY29sb3IuXHJcbiAgICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICAgIEltcHJlc2nDs24gZGUgY3JlZGVuY2lhbGVzIGEgYmxhbmNvIHkgbmVncm8uXHJcbiAgICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICAgIEltcHJlc2nDs24gZGUgY3JlZGVuY2lhbGVzIGEgMSB5IDIgY2FyYXNcclxuICAgICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgICAgSW1wcmVzacOzbiBkZSBjcmVkZW5jaWFsZXMgY29uIGhvbG9ncmFtYSBkZSBzZWd1cmlkYWQuXHJcbiAgICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgIDwvQmVuZWZpY2lvcz5cclxuICAgICAgICAgIDwvRGl2VHJlc0ltZ1RleHRTaW5GbGV4PlxyXG4gICAgICAgICl9XHJcblxyXG4gICAgICAgIDxEaXZTZWd1bmRvVGV4dG8+XHJcbiAgICAgICAgICA8VGV4dG9TZWd1bmRvRGl2PlxyXG4gICAgICAgICAgICBOdWVzdHJhcyBjcmVkZW5jaWFsZXMgc29uIGltcHJlc2FzIGVuIG1hdGVyaWFsZXMsIGFsdGFtZW50ZVxyXG4gICAgICAgICAgICByZXNpc3RlbnRlcyB5IGR1cmFkZXJvcywgcXVlIGxlIGRhbiBhIGNhZGEgdGFyamV0YSB5IGdhZmV0ZSB1bmFcclxuICAgICAgICAgICAgbGFyZ2EgdmlkYSBkZSB1c28uIENvbnRhbW9zIGNvbiBpbXByZXNpw7NuIGVuIFBWQywgUEVUIHlcclxuICAgICAgICAgICAgcG9saWNhcmJvbmF0by4gR2FyYW50aXphbW9zIHVuYSBleGNlbGVudGUgY2FsaWRhZCBkZSBpbXByZXNpw7NuLFxyXG4gICAgICAgICAgICB0ZW5nYSBsYSBzZWd1cmlkYWQgZGUgcXVlIHN1cyBjcmVkZW5jaWFsZXMgY29udGFyw6FuIGNvbiB1biBob2xvZ3JhbWFcclxuICAgICAgICAgICAgZGUgc2VndXJpZGFkIHBhcmEgcHJldmVuaXIgZGVzZ2FzdGVzIHkgZXZpdGFyIGZhbHNpZmljYWNpb25lcy5cclxuICAgICAgICAgIDwvVGV4dG9TZWd1bmRvRGl2PlxyXG4gICAgICAgIDwvRGl2U2VndW5kb1RleHRvPlxyXG4gICAgICAgIDxEaXZUZXJjZXJUZXh0bz5cclxuICAgICAgICAgIDxUZXh0b1RlcmNlckRpdj5cclxuICAgICAgICAgICAgRXMgaW5kaXNwZW5zYWJsZSBxdWUgY2FkYSBpbnN0aXR1Y2nDs24geSBlbXByZXNhIHRlbmdhIGVsXHJcbiAgICAgICAgICAgIGNvbm9jaW1pZW50byBkZSBsYSBzYWx1ZCBkZSBzdXMgY29sYWJvcmFkb3Jlcy4gQ29udGFtb3MgY29uIGxhIGltcHJlc2nDs24gZGUgY3JlZGVuY2lhbGVzIGNvbiB1biBjw7NkaWdvIFFSIHBhcmFcclxuICAgICAgICAgICAgdmVyaWZpY2FyIHkgdmFsaWRhciBlbCBjZXJ0aWZpY2FkbyBkZSB2YWN1bmFjacOzbiBjb250cmEgPGJyLz5DT1ZJRC0xOS5cclxuICAgICAgICAgIDwvVGV4dG9UZXJjZXJEaXY+XHJcbiAgICAgICAgICA8SU1HQ0VSIHNyYz1cIi9pbWcvQ2VydGlmaWNhZG8ud2VicFwiIGFsdD1cIkNlcnRpZmljYWRvIGRlIFZhY3VuYWNpw7NuXCIgLz5cclxuICAgICAgICA8L0RpdlRlcmNlclRleHRvPlxyXG4gICAgICAgIDxEaXZQVkM+XHJcbiAgICAgICAgICA8VGl0dWxvSW1wcmVzaW9uPlxyXG4gICAgICAgICAgICBJbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBlbiBQVkMsIFBFVCB5IHBvbGljYXJib25hdG86XHJcbiAgICAgICAgICA8L1RpdHVsb0ltcHJlc2lvbj5cclxuICAgICAgICAgIDxvbCBjbGFzc05hbWU9XCJlc29sXCI+XHJcbiAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPkNyZWRlbmNpYWxlcyBjb24gdW4gY8OzZGlnbyBRUiBwYXJhIHZlcmlmaWNhciBlbCBjZXJ0aWZpY2FkbyBkZSB2YWN1bmFjacOzbiBjb250cmEgQ09WSUQtMTkuPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+Q3JlZGVuY2lhbGVzIHBhcmEgZW1wcmVzYXMuPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgQ3JlZGVuY2lhbGVzIHBhcmEgaW5zdGl0dWNpb25lcyBlZHVjYXRpdmFzLlxyXG4gICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICBDcmVkZW5jaWFsZXMgcGFyYSBleHBvc2ljaW9uZXMgeSBldmVudG9zLlxyXG4gICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICBDcmVkZW5jaWFsZXMgcGFyYSBlbCBjb250cm9sIGRlIGFjY2Vzby5cclxuICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+R2FmZXRlcyBwYXJhIHBlcnNvbmFsLjwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIENyZWRlbmNpYWxlcyBwYXJhIGNsdWJlcyBkZXBvcnRpdm9zIHkgYXNvY2lhY2lvbmVzLlxyXG4gICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgIDwvb2w+XHJcbiAgICAgICAgICA8VGl0dWxvSW1wcmVzaW9uRG9zPlxyXG4gICAgICAgICAgICBDb250YW1vcyBjb24gZWwgYmVuZWZpY2lvIGRlIGltcHJpbWlyIHN1cyBjcmVkZW5jaWFsZXMgY29uIHVuXHJcbiAgICAgICAgICAgIGhvbG9ncmFtYSBkZSBzZWd1cmlkYWQgcGFyYSBwcm90ZWdlciBzdSBpbmZvcm1hY2nDs24ue1wiIFwifVxyXG4gICAgICAgICAgPC9UaXR1bG9JbXByZXNpb25Eb3M+XHJcbiAgICAgICAgPC9EaXZQVkM+XHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRGl2UlwiPlxyXG4gICAgICAgICAgPENvbnRlbmVkb3JEPlxyXG4gICAgICAgICAgICA8TGluayBocmVmPVwiLyNyZW50YVwiPlxyXG4gICAgICAgICAgICAgIDxPdmFUZXhEaXYgY2xhc3NOYW1lPVwiYlwiPlxyXG4gICAgICAgICAgICAgICAgPE92YVRleD5cclxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiblwiPsKhQ29ub3pjYSBudWVzdHJvIHNlcnZpY2lvIGRlIFJlbnRhITwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvT3ZhVGV4PlxyXG4gICAgICAgICAgICAgIDwvT3ZhVGV4RGl2PlxyXG4gICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvI3JlcGFyYWNpb25cIj5cclxuICAgICAgICAgICAgICA8T3ZhVGV4RGl2IGNsYXNzTmFtZT1cImJcIj5cclxuICAgICAgICAgICAgICAgIDxPdmFUZXg+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5cIj5cclxuICAgICAgICAgICAgICAgICAgICDCoUNvbm96Y2EgbnVlc3RybyBzZXJ2aWNpbyBkZSBSZXBhcmFjacOzbiFcclxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9PdmFUZXg+XHJcbiAgICAgICAgICAgICAgPC9PdmFUZXhEaXY+XHJcbiAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgPExpbmsgaHJlZj1cIi8jdmVudGFcIj5cclxuICAgICAgICAgICAgICA8T3ZhVGV4RGl2IGNsYXNzTmFtZT1cImJcIj5cclxuICAgICAgICAgICAgICAgIDxPdmFUZXg+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5cIj7CoUNvbm96Y2EgbnVlc3RybyBzZXJ2aWNpbyBkZSBWZW50YSE8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L092YVRleD5cclxuICAgICAgICAgICAgICA8L092YVRleERpdj5cclxuICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICA8TGluayBocmVmPVwiL3ZlbnRhLWRlLWFjY2Vzb3Jpb3MteS1jb25zdW1pYmxlc1wiPlxyXG4gICAgICAgICAgICAgIDxPdmFUZXhEaXYgY2xhc3NOYW1lPVwiYlwiPlxyXG4gICAgICAgICAgICAgICAgPE92YVRleD5cclxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiblwiPlxyXG4gICAgICAgICAgICAgICAgICAgIMKhQWRxdWllcmEgbG9zIGFjY2Vzb3Jpb3MgeSBjb25zdW1pYmxlcyBxdWUgbmVjZXNpdGEhXHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvT3ZhVGV4PlxyXG4gICAgICAgICAgICAgIDwvT3ZhVGV4RGl2PlxyXG4gICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvRFNELXZlbnRhLWVuLXJ1dGFcIj5cclxuICAgICAgICAgICAgICA8T3ZhVGV4RGl2IGNsYXNzTmFtZT1cImJcIj5cclxuICAgICAgICAgICAgICAgIDxPdmFUZXg+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5cIj5cclxuICAgICAgICAgICAgICAgICAgICDCoUNvbm96Y2EgbnVlc3RyYSBzb2x1Y2nDs24gXCJEU0RcIiBwYXJhIHZlbnRhIGVuIHJ1dGEhXHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvT3ZhVGV4PlxyXG4gICAgICAgICAgICAgIDwvT3ZhVGV4RGl2PlxyXG4gICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvdmVudGEtZnVuZGFzLWhhbmRoZWxkLWltcHJlc29yYS1wb3J0YXRpbFwiPlxyXG4gICAgICAgICAgICAgIDxPdmFUZXhEaXZEIGNsYXNzTmFtZT1cImJcIj5cclxuICAgICAgICAgICAgICAgIDxPdmFUZXg+XHJcbiAgICAgICAgICAgICAgICAgIENvbnRhbW9zIGNvbiBmdW5kYXMgZGlzZcOxYWRhcyBhIGxhIG1lZGlkYSBwYXJhIGN1bXBsaXIgY29uIHN1c1xyXG4gICAgICAgICAgICAgICAgICBuZWNlc2lkYWRlcy5cclxuICAgICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5cIj5cclxuICAgICAgICAgICAgICAgICAgICDCoUFkcXVpZXJhIGxhIHByb3RlY2Npw7NuIHF1ZSBzdXMgZXF1aXBvcyBuZWNlc2l0YW4hXHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvT3ZhVGV4PlxyXG4gICAgICAgICAgICAgIDwvT3ZhVGV4RGl2RD5cclxuICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgPC9Db250ZW5lZG9yRD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9Db250ZW5lZG9yPlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRleHRvQ3JlZGVuY2lhbGVzO1xyXG4iXX0= */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const DivTresImgText = _styled(\"div\", true ? {\n    target: \"e16dr8tm17\"\n  } : {\n    target: \"e16dr8tm17\",\n    label: \"DivTresImgText\"\n  })(true ? {\n    name: \"1tehkw8\",\n    styles: \"display:flex;margin-top:7rem;@media (max-width: 1900px){margin-top:4rem;}@media (max-width: 1816px){margin-top:12rem;}@media (max-width: 1619px){margin-top:18rem;}\"\n  } : {\n    name: \"1tehkw8\",\n    styles: \"display:flex;margin-top:7rem;@media (max-width: 1900px){margin-top:4rem;}@media (max-width: 1816px){margin-top:12rem;}@media (max-width: 1619px){margin-top:18rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const DivTresImgTextSinFlex = _styled(\"div\", true ? {\n    target: \"e16dr8tm16\"\n  } : {\n    target: \"e16dr8tm16\",\n    label: \"DivTresImgTextSinFlex\"\n  })(true ? {\n    name: \"16dujgp\",\n    styles: \"display:grid;margin:15rem auto\"\n  } : {\n    name: \"16dujgp\",\n    styles: \"display:grid;margin:15rem auto\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Beneficios = _styled(\"ul\", true ? {\n    target: \"e16dr8tm15\"\n  } : {\n    target: \"e16dr8tm15\",\n    label: \"Beneficios\"\n  })(true ? {\n    name: \"wn0hft\",\n    styles: \"font-size:20px;text-align:left;margin-left:25px;display:grid;align-items:center;@media (max-width: 1750px){font-size:20px;}@media (max-width: 1400px){width:100%;height:100%;padding-top:2rem;}@media (max-width: 995px){width:90%;height:100%;}@media (max-width: 530px){font-size:15px;}\"\n  } : {\n    name: \"wn0hft\",\n    styles: \"font-size:20px;text-align:left;margin-left:25px;display:grid;align-items:center;@media (max-width: 1750px){font-size:20px;}@media (max-width: 1400px){width:100%;height:100%;padding-top:2rem;}@media (max-width: 995px){width:90%;height:100%;}@media (max-width: 530px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const BeneficiosLista = _styled(\"li\", true ? {\n    target: \"e16dr8tm14\"\n  } : {\n    target: \"e16dr8tm14\",\n    label: \"BeneficiosLista\"\n  })(true ? {\n    name: \"thhj3o\",\n    styles: \"list-style:outside;align-items:center;font-size:20px;@media (max-width: 530px){font-size:15px;}\"\n  } : {\n    name: \"thhj3o\",\n    styles: \"list-style:outside;align-items:center;font-size:20px;@media (max-width: 530px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const IMGTC = _styled(\"div\", true ? {\n    target: \"e16dr8tm13\"\n  } : {\n    target: \"e16dr8tm13\",\n    label: \"IMGTC\"\n  })(true ? {\n    name: \"4w66cr\",\n    styles: \"width:52%;height:70%;margin-top:0px;padding-left:2rem;@media (max-width: 1786px){width:65%;}@media (max-width: 1400px){width:100%;height:100%;text-align:center;}@media (max-width: 530px){padding-left:0px;}\"\n  } : {\n    name: \"4w66cr\",\n    styles: \"width:52%;height:70%;margin-top:0px;padding-left:2rem;@media (max-width: 1786px){width:65%;}@media (max-width: 1400px){width:100%;height:100%;text-align:center;}@media (max-width: 530px){padding-left:0px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const DivSegundoTexto = _styled(\"div\", true ? {\n    target: \"e16dr8tm12\"\n  } : {\n    target: \"e16dr8tm12\",\n    label: \"DivSegundoTexto\"\n  })(true ? {\n    name: \"fs09x\",\n    styles: \"width:100%;padding:2rem;margin-top:3rem;@media (max-width: 1400px){margin-top:-212px;}@media (max-width: 530px){padding:1rem;}\"\n  } : {\n    name: \"fs09x\",\n    styles: \"width:100%;padding:2rem;margin-top:3rem;@media (max-width: 1400px){margin-top:-212px;}@media (max-width: 530px){padding:1rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const DivTercerTexto = _styled(\"div\", true ? {\n    target: \"e16dr8tm11\"\n  } : {\n    target: \"e16dr8tm11\",\n    label: \"DivTercerTexto\"\n  })(true ? {\n    name: \"1g8a0n4\",\n    styles: \"width:100%;padding-left:2rem;margin-top:3rem;display:flex;@media (max-width: 530px){padding:1rem;}\"\n  } : {\n    name: \"1g8a0n4\",\n    styles: \"width:100%;padding-left:2rem;margin-top:3rem;display:flex;@media (max-width: 530px){padding:1rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TextoSegundoDiv = _styled(\"p\", true ? {\n    target: \"e16dr8tm10\"\n  } : {\n    target: \"e16dr8tm10\",\n    label: \"TextoSegundoDiv\"\n  })(true ? {\n    name: \"pgnicl\",\n    styles: \"font-size:20px;@media (max-width: 530px){font-size:15px;}\"\n  } : {\n    name: \"pgnicl\",\n    styles: \"font-size:20px;@media (max-width: 530px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TextoTercerDiv = _styled(\"div\", true ? {\n    target: \"e16dr8tm9\"\n  } : {\n    target: \"e16dr8tm9\",\n    label: \"TextoTercerDiv\"\n  })(true ? {\n    name: \"14dnk7q\",\n    styles: \"font-size:20px;display:grid;align-items:center;@media (max-width: 530px){font-size:15px;}\"\n  } : {\n    name: \"14dnk7q\",\n    styles: \"font-size:20px;display:grid;align-items:center;@media (max-width: 530px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const DivPVC = _styled(\"div\", true ? {\n    target: \"e16dr8tm8\"\n  } : {\n    target: \"e16dr8tm8\",\n    label: \"DivPVC\"\n  })(true ? {\n    name: \"1vs5rtw\",\n    styles: \"margin-top:4rem;padding-left:2rem;@media (max-width: 530px){padding:1rem;}\"\n  } : {\n    name: \"1vs5rtw\",\n    styles: \"margin-top:4rem;padding-left:2rem;@media (max-width: 530px){padding:1rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TituloImpresion = _styled(\"h2\", true ? {\n    target: \"e16dr8tm7\"\n  } : {\n    target: \"e16dr8tm7\",\n    label: \"TituloImpresion\"\n  })(true ? {\n    name: \"1jsu5g9\",\n    styles: \"text-align:center;font-size:20px\"\n  } : {\n    name: \"1jsu5g9\",\n    styles: \"text-align:center;font-size:20px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TituloImpresionDos = _styled(\"h2\", true ? {\n    target: \"e16dr8tm6\"\n  } : {\n    target: \"e16dr8tm6\",\n    label: \"TituloImpresionDos\"\n  })(true ? {\n    name: \"17g321i\",\n    styles: \"text-align:center;font-weight:bold;font-size:20px;margin-top:2.5rem\"\n  } : {\n    name: \"17g321i\",\n    styles: \"text-align:center;font-weight:bold;font-size:20px;margin-top:2.5rem\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const OvaTexDiv = _styled(\"div\", true ? {\n    target: \"e16dr8tm5\"\n  } : {\n    target: \"e16dr8tm5\",\n    label: \"OvaTexDiv\"\n  })(true ? {\n    name: \"bmxbe\",\n    styles: \"width:78%;height:4.5rem;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\"\n  } : {\n    name: \"bmxbe\",\n    styles: \"width:78%;height:4.5rem;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const OvaTexDivD = _styled(\"div\", true ? {\n    target: \"e16dr8tm4\"\n  } : {\n    target: \"e16dr8tm4\",\n    label: \"OvaTexDivD\"\n  })(true ? {\n    name: \"1xutzvp\",\n    styles: \"width:78%;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\"\n  } : {\n    name: \"1xutzvp\",\n    styles: \"width:78%;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const OvaTex = _styled(\"p\", true ? {\n    target: \"e16dr8tm3\"\n  } : {\n    target: \"e16dr8tm3\",\n    label: \"OvaTex\"\n  })(true ? {\n    name: \"1i04rfa\",\n    styles: \"font-size:20px;padding-top:20px;padding-bottom:10px;color:white;@media (max-width: 1500px){font-size:19px;}@media (max-width: 1355px){font-size:17px;}@media (max-width: 1250px){font-size:15px;}\"\n  } : {\n    name: \"1i04rfa\",\n    styles: \"font-size:20px;padding-top:20px;padding-bottom:10px;color:white;@media (max-width: 1500px){font-size:19px;}@media (max-width: 1355px){font-size:17px;}@media (max-width: 1250px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TextDiv = _styled(\"div\", true ? {\n    target: \"e16dr8tm2\"\n  } : {\n    target: \"e16dr8tm2\",\n    label: \"TextDiv\"\n  })(true ? {\n    name: \"q68gb5\",\n    styles: \"width:80%;margin:0px auto;@media (max-width: 1400px){width:100%;}\"\n  } : {\n    name: \"q68gb5\",\n    styles: \"width:80%;margin:0px auto;@media (max-width: 1400px){width:100%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const ContenedorD = _styled(\"div\", true ? {\n    target: \"e16dr8tm1\"\n  } : {\n    target: \"e16dr8tm1\",\n    label: \"ContenedorD\"\n  })(true ? {\n    name: \"1akbdyk\",\n    styles: \"width:100%;margin-top:4rem;@media (max-width: 995px){display:none;}\"\n  } : {\n    name: \"1akbdyk\",\n    styles: \"width:100%;margin-top:4rem;@media (max-width: 995px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const IMGCER = _styled(\"img\", true ? {\n    target: \"e16dr8tm0\"\n  } : {\n    target: \"e16dr8tm0\",\n    label: \"IMGCER\"\n  })(true ? {\n    name: \"bxbbea\",\n    styles: \"@media (max-width: 1200px){width:50%!important;}@media (max-width: 1070px){width:45%!important;}@media (max-width: 995px){width:60%!important;}\"\n  } : {\n    name: \"bxbbea\",\n    styles: \"@media (max-width: 1200px){width:50%!important;}@media (max-width: 1070px){width:45%!important;}@media (max-width: 995px){width:60%!important;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNFUlxcRGVza3RvcFxcbnVldm8gY29kaWdvIEhIUyAtIGNvcGlhXFxjb21wb25lbnRzXFxwZXN0YW5hc1xcVGV4dG9DcmVkZW5jaWFsZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ08yQiIsImZpbGUiOiJDOlxcVXNlcnNcXFVTRVJcXERlc2t0b3BcXG51ZXZvIGNvZGlnbyBISFMgLSBjb3BpYVxcY29tcG9uZW50c1xccGVzdGFuYXNcXFRleHRvQ3JlZGVuY2lhbGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcclxuaW1wb3J0IExpbmsgZnJvbSBcIm5leHQvbGlua1wiO1xyXG5pbXBvcnQgdXNlV2luZG93U2l6ZSBmcm9tIFwiLi4vLi4vaG9va3MvdXNlV2luZG93U2l6ZVwiO1xyXG5cclxuY29uc3QgVGV4dG9DcmVkZW5jaWFsZXMgPSAoKSA9PiB7XHJcbiAgY29uc3QgQ29udGVuZWRvciA9IHN0eWxlZC5kaXZgXHJcbiAgICB3aWR0aDogNTAlO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTVweCkge1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBEaXZUcmVzSW1nVGV4dCA9IHN0eWxlZC5kaXZgXHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgbWFyZ2luLXRvcDogN3JlbTtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTkwMHB4KSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDRyZW07XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE4MTZweCkge1xyXG4gICAgICBtYXJnaW4tdG9wOiAxMnJlbTtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTYxOXB4KSB7XHJcbiAgICAgIG1hcmdpbi10b3A6IDE4cmVtO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IERpdlRyZXNJbWdUZXh0U2luRmxleCA9IHN0eWxlZC5kaXZgXHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgbWFyZ2luOiAxNXJlbSBhdXRvO1xyXG4gIGA7XHJcblxyXG4gIGNvbnN0IEJlbmVmaWNpb3MgPSBzdHlsZWQudWxgXHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgbWFyZ2luLWxlZnQ6IDI1cHg7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTc1MHB4KSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIH1cclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTQwMHB4KSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgIHBhZGRpbmctdG9wOiAycmVtO1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTVweCkge1xyXG4gICAgICB3aWR0aDogOTAlO1xyXG4gICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDUzMHB4KSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBCZW5lZmljaW9zTGlzdGEgPSBzdHlsZWQubGlgXHJcbiAgICBsaXN0LXN0eWxlOiBvdXRzaWRlO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgZm9udC1zaXplOiAxNXB4O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IElNR1RDID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiA1MiU7XHJcbiAgICBoZWlnaHQ6IDcwJTtcclxuICAgIG1hcmdpbi10b3A6IDBweDtcclxuICAgIHBhZGRpbmctbGVmdDogMnJlbTtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTc4NnB4KSB7XHJcbiAgICAgIHdpZHRoOiA2NSU7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE0MDBweCkge1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDUzMHB4KSB7XHJcbiAgICAgIHBhZGRpbmctbGVmdDogMHB4O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IERpdlNlZ3VuZG9UZXh0byA9IHN0eWxlZC5kaXZgXHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmc6IDJyZW07XHJcbiAgICBtYXJnaW4tdG9wOiAzcmVtO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNDAwcHgpIHtcclxuICAgICAgbWFyZ2luLXRvcDogLTIxMnB4O1xyXG4gICAgfVxyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MzBweCkge1xyXG4gICAgICBwYWRkaW5nOiAxcmVtO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IERpdlRlcmNlclRleHRvID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAycmVtO1xyXG4gICAgbWFyZ2luLXRvcDogM3JlbTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDUzMHB4KSB7XHJcbiAgICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgVGV4dG9TZWd1bmRvRGl2ID0gc3R5bGVkLnBgXHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDUzMHB4KSB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTVweDtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBUZXh0b1RlcmNlckRpdiA9IHN0eWxlZC5kaXZgXHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTMwcHgpIHtcclxuICAgICAgZm9udC1zaXplOiAxNXB4O1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IERpdlBWQyA9IHN0eWxlZC5kaXZgXHJcbiAgICBtYXJnaW4tdG9wOiA0cmVtO1xyXG4gICAgcGFkZGluZy1sZWZ0OiAycmVtO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1MzBweCkge1xyXG4gICAgICBwYWRkaW5nOiAxcmVtO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IFRpdHVsb0ltcHJlc2lvbiA9IHN0eWxlZC5oMmBcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuXHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgVGl0dWxvSW1wcmVzaW9uRG9zID0gc3R5bGVkLmgyYFxyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBtYXJnaW4tdG9wOiAyLjVyZW07XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgT3ZhVGV4RGl2ID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiA3OCU7XHJcbiAgICBoZWlnaHQ6IDQuNXJlbTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cmVtO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4OTlweCkge1xyXG4gICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IE92YVRleERpdkQgPSBzdHlsZWQuZGl2YFxyXG4gICAgd2lkdGg6IDc4JTtcclxuXHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3NmMwO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHJlbTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG1hcmdpbjogYXV0bztcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogODk5cHgpIHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBPdmFUZXggPSBzdHlsZWQucGBcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDEwcHg7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE1MDBweCkge1xyXG4gICAgICBmb250LXNpemU6IDE5cHg7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEzNTVweCkge1xyXG4gICAgICBmb250LXNpemU6IDE3cHg7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEyNTBweCkge1xyXG4gICAgICBmb250LXNpemU6IDE1cHg7XHJcbiAgICB9XHJcbiAgYDtcclxuXHJcbiAgY29uc3QgVGV4dERpdiA9IHN0eWxlZC5kaXZgXHJcbiAgICB3aWR0aDogODAlO1xyXG4gICAgbWFyZ2luOiAwcHggYXV0bztcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTQwMHB4KSB7XHJcbiAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG4gIGA7XHJcblxyXG4gIGNvbnN0IENvbnRlbmVkb3JEID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLXRvcDogNHJlbTtcclxuXHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTk1cHgpIHtcclxuICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBJTUdDRVIgPSBzdHlsZWQuaW1nYFxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xyXG4gICAgICB3aWR0aDogNTAlICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEwNzBweCkge1xyXG4gICAgICB3aWR0aDogNDUlICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5NXB4KSB7XHJcbiAgICAgIHdpZHRoOiA2MCUgIWltcG9ydGFudDtcclxuICAgIH1cclxuICBgO1xyXG5cclxuICBjb25zdCBzaXplID0gdXNlV2luZG93U2l6ZSgpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgPENvbnRlbmVkb3I+XHJcbiAgICAgICAge3NpemUgPiAxNDAwID8gKFxyXG4gICAgICAgICAgPERpdlRyZXNJbWdUZXh0PlxyXG4gICAgICAgICAgICA8SU1HVEM+XHJcbiAgICAgICAgICAgICAgPGltZyBzcmM9XCIvaW1nL1RyZXNDcmVkZW5jaWFsZXMud2VicFwiIGFsdD1cIkNyZWRlbmNpYWxlc1wiIC8+XHJcbiAgICAgICAgICAgIDwvSU1HVEM+XHJcblxyXG4gICAgICAgICAgICA8QmVuZWZpY2lvcz5cclxuICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGgzPlxyXG4gICAgICAgICAgICAgICAgICA8Yj5HYXJhbnRpemFtb3M6PC9iPlxyXG4gICAgICAgICAgICAgICAgPC9oMz5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgICAgSW1wcmVzacOzbiBkZSBjcmVkZW5jaWFsZXMgYSBjb2xvci5cclxuICAgICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgICAgSW1wcmVzacOzbiBkZSBjcmVkZW5jaWFsZXMgYSBibGFuY28geSBuZWdyby5cclxuICAgICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgICAgSW1wcmVzacOzbiBkZSBjcmVkZW5jaWFsZXMgYSAxIHkgMiBjYXJhcy5cclxuICAgICAgICAgICAgICA8L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgICAgSW1wcmVzacOzbiBkZSBjcmVkZW5jaWFsZXMgY29uIGhvbG9ncmFtYSBkZSBzZWd1cmlkYWQue1wiIFwifVxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICA8L0JlbmVmaWNpb3M+XHJcbiAgICAgICAgICA8L0RpdlRyZXNJbWdUZXh0PlxyXG4gICAgICAgICkgOiAoXHJcbiAgICAgICAgICA8RGl2VHJlc0ltZ1RleHRTaW5GbGV4PlxyXG4gICAgICAgICAgICB7c2l6ZSA8IDk5NSA/IChcclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNlbnRlXCI+XHJcbiAgICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwiZm9udGhkXCI+XHJcbiAgICAgICAgICAgICAgICAgIEltcHJlc2nDs24gZGUgY3JlZGVuY2lhbGVzIGEgZG9taWNpbGlvIHBhcmEgZW1wcmVzYXMgZVxyXG4gICAgICAgICAgICAgICAgICBpbnN0aXR1Y2lvbmVzIGVkdWNhdGl2YXMuXHJcbiAgICAgICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgICAgICA8Yj7CoUxsYW1lIHBhcmEgbcOhcyBpbmZvcm1hY2nDs24hPC9iPlxyXG4gICAgICAgICAgICAgICAgPC9oMj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgICA8PiA8Lz5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgPElNR1RDPlxyXG4gICAgICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImltZ3Jlc2NlXCJcclxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvVHJlc0NyZWRlbmNpYWxlcy53ZWJwXCJcclxuICAgICAgICAgICAgICAgIGFsdD1cIkNyZWRlbmNpYWxlc1wiXHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9JTUdUQz5cclxuICAgICAgICAgICAgPEJlbmVmaWNpb3M+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnYXJhblwiPlxyXG4gICAgICAgICAgICAgICAgPGgzPlxyXG4gICAgICAgICAgICAgICAgICA8Yj5HYXJhbnRpemFtb3M8L2I+XHJcbiAgICAgICAgICAgICAgICA8L2gzPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBJbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBhIGNvbG9yLlxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBJbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBhIGJsYW5jbyB5IG5lZ3JvLlxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgICBJbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBhIDEgeSAyIGNhcmFzXHJcbiAgICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICAgIEltcHJlc2nDs24gZGUgY3JlZGVuY2lhbGVzIGNvbiBob2xvZ3JhbWEgZGUgc2VndXJpZGFkLlxyXG4gICAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICA8L0JlbmVmaWNpb3M+XHJcbiAgICAgICAgICA8L0RpdlRyZXNJbWdUZXh0U2luRmxleD5cclxuICAgICAgICApfVxyXG5cclxuICAgICAgICA8RGl2U2VndW5kb1RleHRvPlxyXG4gICAgICAgICAgPFRleHRvU2VndW5kb0Rpdj5cclxuICAgICAgICAgICAgTnVlc3RyYXMgY3JlZGVuY2lhbGVzIHNvbiBpbXByZXNhcyBlbiBtYXRlcmlhbGVzLCBhbHRhbWVudGVcclxuICAgICAgICAgICAgcmVzaXN0ZW50ZXMgeSBkdXJhZGVyb3MsIHF1ZSBsZSBkYW4gYSBjYWRhIHRhcmpldGEgeSBnYWZldGUgdW5hXHJcbiAgICAgICAgICAgIGxhcmdhIHZpZGEgZGUgdXNvLiBDb250YW1vcyBjb24gaW1wcmVzacOzbiBlbiBQVkMsIFBFVCB5XHJcbiAgICAgICAgICAgIHBvbGljYXJib25hdG8uIEdhcmFudGl6YW1vcyB1bmEgZXhjZWxlbnRlIGNhbGlkYWQgZGUgaW1wcmVzacOzbixcclxuICAgICAgICAgICAgdGVuZ2EgbGEgc2VndXJpZGFkIGRlIHF1ZSBzdXMgY3JlZGVuY2lhbGVzIGNvbnRhcsOhbiBjb24gdW4gaG9sb2dyYW1hXHJcbiAgICAgICAgICAgIGRlIHNlZ3VyaWRhZCBwYXJhIHByZXZlbmlyIGRlc2dhc3RlcyB5IGV2aXRhciBmYWxzaWZpY2FjaW9uZXMuXHJcbiAgICAgICAgICA8L1RleHRvU2VndW5kb0Rpdj5cclxuICAgICAgICA8L0RpdlNlZ3VuZG9UZXh0bz5cclxuICAgICAgICA8RGl2VGVyY2VyVGV4dG8+XHJcbiAgICAgICAgICA8VGV4dG9UZXJjZXJEaXY+XHJcbiAgICAgICAgICAgIEVzIGluZGlzcGVuc2FibGUgcXVlIGNhZGEgaW5zdGl0dWNpw7NuIHkgZW1wcmVzYSB0ZW5nYSBlbFxyXG4gICAgICAgICAgICBjb25vY2ltaWVudG8gZGUgbGEgc2FsdWQgZGUgc3VzIGNvbGFib3JhZG9yZXMuIENvbnRhbW9zIGNvbiBsYSBpbXByZXNpw7NuIGRlIGNyZWRlbmNpYWxlcyBjb24gdW4gY8OzZGlnbyBRUiBwYXJhXHJcbiAgICAgICAgICAgIHZlcmlmaWNhciB5IHZhbGlkYXIgZWwgY2VydGlmaWNhZG8gZGUgdmFjdW5hY2nDs24gY29udHJhIDxici8+Q09WSUQtMTkuXHJcbiAgICAgICAgICA8L1RleHRvVGVyY2VyRGl2PlxyXG4gICAgICAgICAgPElNR0NFUiBzcmM9XCIvaW1nL0NlcnRpZmljYWRvLndlYnBcIiBhbHQ9XCJDZXJ0aWZpY2FkbyBkZSBWYWN1bmFjacOzblwiIC8+XHJcbiAgICAgICAgPC9EaXZUZXJjZXJUZXh0bz5cclxuICAgICAgICA8RGl2UFZDPlxyXG4gICAgICAgICAgPFRpdHVsb0ltcHJlc2lvbj5cclxuICAgICAgICAgICAgSW1wcmVzacOzbiBkZSBjcmVkZW5jaWFsZXMgZW4gUFZDLCBQRVQgeSBwb2xpY2FyYm9uYXRvOlxyXG4gICAgICAgICAgPC9UaXR1bG9JbXByZXNpb24+XHJcbiAgICAgICAgICA8b2wgY2xhc3NOYW1lPVwiZXNvbFwiPlxyXG4gICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5DcmVkZW5jaWFsZXMgY29uIHVuIGPDs2RpZ28gUVIgcGFyYSB2ZXJpZmljYXIgZWwgY2VydGlmaWNhZG8gZGUgdmFjdW5hY2nDs24gY29udHJhIENPVklELTE5LjwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPkNyZWRlbmNpYWxlcyBwYXJhIGVtcHJlc2FzLjwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICAgIENyZWRlbmNpYWxlcyBwYXJhIGluc3RpdHVjaW9uZXMgZWR1Y2F0aXZhcy5cclxuICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgQ3JlZGVuY2lhbGVzIHBhcmEgZXhwb3NpY2lvbmVzIHkgZXZlbnRvcy5cclxuICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgIDxCZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICAgICAgQ3JlZGVuY2lhbGVzIHBhcmEgZWwgY29udHJvbCBkZSBhY2Nlc28uXHJcbiAgICAgICAgICAgIDwvQmVuZWZpY2lvc0xpc3RhPlxyXG4gICAgICAgICAgICA8QmVuZWZpY2lvc0xpc3RhPkdhZmV0ZXMgcGFyYSBwZXJzb25hbC48L0JlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgPEJlbmVmaWNpb3NMaXN0YT5cclxuICAgICAgICAgICAgICBDcmVkZW5jaWFsZXMgcGFyYSBjbHViZXMgZGVwb3J0aXZvcyB5IGFzb2NpYWNpb25lcy5cclxuICAgICAgICAgICAgPC9CZW5lZmljaW9zTGlzdGE+XHJcbiAgICAgICAgICA8L29sPlxyXG4gICAgICAgICAgPFRpdHVsb0ltcHJlc2lvbkRvcz5cclxuICAgICAgICAgICAgQ29udGFtb3MgY29uIGVsIGJlbmVmaWNpbyBkZSBpbXByaW1pciBzdXMgY3JlZGVuY2lhbGVzIGNvbiB1blxyXG4gICAgICAgICAgICBob2xvZ3JhbWEgZGUgc2VndXJpZGFkIHBhcmEgcHJvdGVnZXIgc3UgaW5mb3JtYWNpw7NuLntcIiBcIn1cclxuICAgICAgICAgIDwvVGl0dWxvSW1wcmVzaW9uRG9zPlxyXG4gICAgICAgIDwvRGl2UFZDPlxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkRpdlJcIj5cclxuICAgICAgICAgIDxDb250ZW5lZG9yRD5cclxuICAgICAgICAgICAgPExpbmsgaHJlZj1cIi8jcmVudGFcIj5cclxuICAgICAgICAgICAgICA8T3ZhVGV4RGl2IGNsYXNzTmFtZT1cImJcIj5cclxuICAgICAgICAgICAgICAgIDxPdmFUZXg+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5cIj7CoUNvbm96Y2EgbnVlc3RybyBzZXJ2aWNpbyBkZSBSZW50YSE8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L092YVRleD5cclxuICAgICAgICAgICAgICA8L092YVRleERpdj5cclxuICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICA8TGluayBocmVmPVwiLyNyZXBhcmFjaW9uXCI+XHJcbiAgICAgICAgICAgICAgPE92YVRleERpdiBjbGFzc05hbWU9XCJiXCI+XHJcbiAgICAgICAgICAgICAgICA8T3ZhVGV4PlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgwqFDb25vemNhIG51ZXN0cm8gc2VydmljaW8gZGUgUmVwYXJhY2nDs24hXHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvT3ZhVGV4PlxyXG4gICAgICAgICAgICAgIDwvT3ZhVGV4RGl2PlxyXG4gICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvI3ZlbnRhXCI+XHJcbiAgICAgICAgICAgICAgPE92YVRleERpdiBjbGFzc05hbWU9XCJiXCI+XHJcbiAgICAgICAgICAgICAgICA8T3ZhVGV4PlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuXCI+wqFDb25vemNhIG51ZXN0cm8gc2VydmljaW8gZGUgVmVudGEhPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9PdmFUZXg+XHJcbiAgICAgICAgICAgICAgPC9PdmFUZXhEaXY+XHJcbiAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgPExpbmsgaHJlZj1cIi92ZW50YS1kZS1hY2Nlc29yaW9zLXktY29uc3VtaWJsZXNcIj5cclxuICAgICAgICAgICAgICA8T3ZhVGV4RGl2IGNsYXNzTmFtZT1cImJcIj5cclxuICAgICAgICAgICAgICAgIDxPdmFUZXg+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5cIj5cclxuICAgICAgICAgICAgICAgICAgICDCoUFkcXVpZXJhIGxvcyBhY2Nlc29yaW9zIHkgY29uc3VtaWJsZXMgcXVlIG5lY2VzaXRhIVxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L092YVRleD5cclxuICAgICAgICAgICAgICA8L092YVRleERpdj5cclxuICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICA8TGluayBocmVmPVwiL0RTRC12ZW50YS1lbi1ydXRhXCI+XHJcbiAgICAgICAgICAgICAgPE92YVRleERpdiBjbGFzc05hbWU9XCJiXCI+XHJcbiAgICAgICAgICAgICAgICA8T3ZhVGV4PlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgwqFDb25vemNhIG51ZXN0cmEgc29sdWNpw7NuIFwiRFNEXCIgcGFyYSB2ZW50YSBlbiBydXRhIVxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L092YVRleD5cclxuICAgICAgICAgICAgICA8L092YVRleERpdj5cclxuICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICA8TGluayBocmVmPVwiL3ZlbnRhLWZ1bmRhcy1oYW5kaGVsZC1pbXByZXNvcmEtcG9ydGF0aWxcIj5cclxuICAgICAgICAgICAgICA8T3ZhVGV4RGl2RCBjbGFzc05hbWU9XCJiXCI+XHJcbiAgICAgICAgICAgICAgICA8T3ZhVGV4PlxyXG4gICAgICAgICAgICAgICAgICBDb250YW1vcyBjb24gZnVuZGFzIGRpc2XDsWFkYXMgYSBsYSBtZWRpZGEgcGFyYSBjdW1wbGlyIGNvbiBzdXNcclxuICAgICAgICAgICAgICAgICAgbmVjZXNpZGFkZXMuXHJcbiAgICAgICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgwqFBZHF1aWVyYSBsYSBwcm90ZWNjacOzbiBxdWUgc3VzIGVxdWlwb3MgbmVjZXNpdGFuIVxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L092YVRleD5cclxuICAgICAgICAgICAgICA8L092YVRleERpdkQ+XHJcbiAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgIDwvQ29udGVuZWRvckQ+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvQ29udGVuZWRvcj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZXh0b0NyZWRlbmNpYWxlcztcclxuIl19 */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const size = useWindowSize();\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Contenedor, null, size > 1400 ? ___EmotionJSX(DivTresImgText, null, ___EmotionJSX(IMGTC, null, ___EmotionJSX(\"img\", {\n    src: \"/img/TresCredenciales.webp\",\n    alt: \"Credenciales\"\n  })), ___EmotionJSX(Beneficios, null, ___EmotionJSX(\"div\", null, ___EmotionJSX(\"h3\", null, ___EmotionJSX(\"b\", null, \"Garantizamos:\"))), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales a color.\"), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales a blanco y negro.\"), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales a 1 y 2 caras.\"), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales con holograma de seguridad.\", \" \"))) : ___EmotionJSX(DivTresImgTextSinFlex, null, size < 995 ? ___EmotionJSX(\"div\", {\n    className: \"cente\"\n  }, ___EmotionJSX(\"h2\", {\n    className: \"fonthd\"\n  }, \"Impresi\\xF3n de credenciales a domicilio para empresas e instituciones educativas.\", ___EmotionJSX(\"br\", null), ___EmotionJSX(\"b\", null, \"\\xA1Llame para m\\xE1s informaci\\xF3n!\"))) : ___EmotionJSX(React.Fragment, null, \" \"), ___EmotionJSX(IMGTC, null, ___EmotionJSX(\"img\", {\n    className: \"imgresce\",\n    src: \"/img/TresCredenciales.webp\",\n    alt: \"Credenciales\"\n  })), ___EmotionJSX(Beneficios, null, ___EmotionJSX(\"div\", {\n    className: \"garan\"\n  }, ___EmotionJSX(\"h3\", null, ___EmotionJSX(\"b\", null, \"Garantizamos\"))), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales a color.\"), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales a blanco y negro.\"), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales a 1 y 2 caras\"), ___EmotionJSX(BeneficiosLista, null, \"Impresi\\xF3n de credenciales con holograma de seguridad.\"))), ___EmotionJSX(DivSegundoTexto, null, ___EmotionJSX(TextoSegundoDiv, null, \"Nuestras credenciales son impresas en materiales, altamente resistentes y duraderos, que le dan a cada tarjeta y gafete una larga vida de uso. Contamos con impresi\\xF3n en PVC, PET y policarbonato. Garantizamos una excelente calidad de impresi\\xF3n, tenga la seguridad de que sus credenciales contar\\xE1n con un holograma de seguridad para prevenir desgastes y evitar falsificaciones.\")), ___EmotionJSX(DivTercerTexto, null, ___EmotionJSX(TextoTercerDiv, null, \"Es indispensable que cada instituci\\xF3n y empresa tenga el conocimiento de la salud de sus colaboradores. Contamos con la impresi\\xF3n de credenciales con un c\\xF3digo QR para verificar y validar el certificado de vacunaci\\xF3n contra \", ___EmotionJSX(\"br\", null), \"COVID-19.\"), ___EmotionJSX(IMGCER, {\n    src: \"/img/Certificado.webp\",\n    alt: \"Certificado de Vacunaci\\xF3n\"\n  })), ___EmotionJSX(DivPVC, null, ___EmotionJSX(TituloImpresion, null, \"Impresi\\xF3n de credenciales en PVC, PET y policarbonato:\"), ___EmotionJSX(\"ol\", {\n    className: \"esol\"\n  }, ___EmotionJSX(BeneficiosLista, null, \"Credenciales con un c\\xF3digo QR para verificar el certificado de vacunaci\\xF3n contra COVID-19.\"), ___EmotionJSX(BeneficiosLista, null, \"Credenciales para empresas.\"), ___EmotionJSX(BeneficiosLista, null, \"Credenciales para instituciones educativas.\"), ___EmotionJSX(BeneficiosLista, null, \"Credenciales para exposiciones y eventos.\"), ___EmotionJSX(BeneficiosLista, null, \"Credenciales para el control de acceso.\"), ___EmotionJSX(BeneficiosLista, null, \"Gafetes para personal.\"), ___EmotionJSX(BeneficiosLista, null, \"Credenciales para clubes deportivos y asociaciones.\")), ___EmotionJSX(TituloImpresionDos, null, \"Contamos con el beneficio de imprimir sus credenciales con un holograma de seguridad para proteger su informaci\\xF3n.\", \" \")), ___EmotionJSX(\"div\", {\n    className: \"DivR\"\n  }, ___EmotionJSX(ContenedorD, null, ___EmotionJSX(Link, {\n    href: \"/#renta\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestro servicio de Renta!\")))), ___EmotionJSX(Link, {\n    href: \"/#reparacion\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestro servicio de Reparaci\\xF3n!\")))), ___EmotionJSX(Link, {\n    href: \"/#venta\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestro servicio de Venta!\")))), ___EmotionJSX(Link, {\n    href: \"/venta-de-accesorios-y-consumibles\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Adquiera los accesorios y consumibles que necesita!\")))), ___EmotionJSX(Link, {\n    href: \"/DSD-venta-en-ruta\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestra soluci\\xF3n \\\"DSD\\\" para venta en ruta!\")))), ___EmotionJSX(Link, {\n    href: \"/venta-fundas-handheld-impresora-portatil\"\n  }, ___EmotionJSX(OvaTexDivD, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, \"Contamos con fundas dise\\xF1adas a la medida para cumplir con sus necesidades.\", ___EmotionJSX(\"br\", null), ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Adquiera la protecci\\xF3n que sus equipos necesitan!\"))))))));\n};\n\nexport default TextoCredenciales;","map":null,"metadata":{},"sourceType":"module"}