{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Head from \"next/head\";\nimport Header from \"../components/layout/Header\";\nimport SoftwareTitulo from \"../components/pestanas/SoftwareTitulo\";\nimport TextoSoftware from \"../components/pestanas/TextoSoftware\";\nimport BotonSoftware from \"../components/pestanas/BotonSoftware\";\nimport Form from \"../components/pestanas/Form\";\nimport Ubicacion from \"../components/pestanas/Ubicacion\";\nimport Servicios from \"../components/pestanas/DnuestrosS\";\nimport MapaDuns from \"../components/pestanas/MapaDuns\";\nimport Footer from \"../components/layout/Footer\";\nimport { Modal, Button, Carousel } from \"react-bootstrap\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst software = () => {\n  const ContenedorFlexa = _styled(\"div\", true ? {\n    target: \"e19ch8a24\"\n  } : {\n    target: \"e19ch8a24\",\n    label: \"ContenedorFlexa\"\n  })(true ? {\n    name: \"3o1miv\",\n    styles: \"display:flex;@media (max-width: 995px){display:block;}\"\n  } : {\n    name: \"3o1miv\",\n    styles: \"display:flex;@media (max-width: 995px){display:block;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const ContenedorFlex = _styled(\"div\", true ? {\n    target: \"e19ch8a23\"\n  } : {\n    target: \"e19ch8a23\",\n    label: \"ContenedorFlex\"\n  })(true ? {\n    name: \"o0r707\",\n    styles: \"display:flex;@media (max-width: 700px){display:block;}\"\n  } : {\n    name: \"o0r707\",\n    styles: \"display:flex;@media (max-width: 700px){display:block;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const ContenedorBotona = _styled(\"div\", true ? {\n    target: \"e19ch8a22\"\n  } : {\n    target: \"e19ch8a22\",\n    label: \"ContenedorBotona\"\n  })(true ? {\n    name: \"udt92q\",\n    styles: \"@media (max-width: 995px){display:block;}\"\n  } : {\n    name: \"udt92q\",\n    styles: \"@media (max-width: 995px){display:block;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const ImgModal = _styled(\"img\", true ? {\n    target: \"e19ch8a21\"\n  } : {\n    target: \"e19ch8a21\",\n    label: \"ImgModal\"\n  })(true ? {\n    name: \"16na1d5\",\n    styles: \"max-width:100%!important;min-width:100%!important;max-height:100%!important;min-height:100%!important\"\n  } : {\n    name: \"16na1d5\",\n    styles: \"max-width:100%!important;min-width:100%!important;max-height:100%!important;min-height:100%!important\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNFUlxcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXHBhZ2VzXFxEU0QtdmVudGEtZW4tcnV0YS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQzZCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcVVNFUlxcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXHBhZ2VzXFxEU0QtdmVudGEtZW4tcnV0YS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgSGVhZCBmcm9tIFwibmV4dC9oZWFkXCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCBIZWFkZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvbGF5b3V0L0hlYWRlclwiO1xuaW1wb3J0IFNvZnR3YXJlVGl0dWxvIGZyb20gXCIuLi9jb21wb25lbnRzL3Blc3RhbmFzL1NvZnR3YXJlVGl0dWxvXCI7XG5pbXBvcnQgVGV4dG9Tb2Z0d2FyZSBmcm9tIFwiLi4vY29tcG9uZW50cy9wZXN0YW5hcy9UZXh0b1NvZnR3YXJlXCI7XG5pbXBvcnQgQm90b25Tb2Z0d2FyZSBmcm9tIFwiLi4vY29tcG9uZW50cy9wZXN0YW5hcy9Cb3RvblNvZnR3YXJlXCI7XG5pbXBvcnQgRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9wZXN0YW5hcy9Gb3JtXCI7XG5pbXBvcnQgVWJpY2FjaW9uIGZyb20gXCIuLi9jb21wb25lbnRzL3Blc3RhbmFzL1ViaWNhY2lvblwiO1xuaW1wb3J0IFNlcnZpY2lvcyBmcm9tIFwiLi4vY29tcG9uZW50cy9wZXN0YW5hcy9EbnVlc3Ryb3NTXCI7XG5pbXBvcnQgTWFwYUR1bnMgZnJvbSBcIi4uL2NvbXBvbmVudHMvcGVzdGFuYXMvTWFwYUR1bnNcIjtcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvbGF5b3V0L0Zvb3RlclwiO1xuXG5pbXBvcnQgeyBNb2RhbCwgQnV0dG9uLCBDYXJvdXNlbCB9IGZyb20gXCJyZWFjdC1ib290c3RyYXBcIjtcblxuY29uc3Qgc29mdHdhcmUgPSAoKSA9PiB7XG4gIGNvbnN0IENvbnRlbmVkb3JGbGV4YSA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTVweCkge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3JGbGV4ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDcwMHB4KSB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvckJvdG9uYSA9IHN0eWxlZC5kaXZgXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5NXB4KSB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1nTW9kYWwgPSBzdHlsZWQuaW1nYFxuICAgIG1heC13aWR0aDogMTAwJSAhaW1wb3J0YW50O1xuICAgIG1pbi13aWR0aDogMTAwJSAhaW1wb3J0YW50O1xuICAgIG1heC1oZWlnaHQ6IDEwMCUgIWltcG9ydGFudDtcbiAgICBtaW4taGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7XG4gIGA7XG5cbiAgY29uc3QgUHVudGVybyA9IHN0eWxlZC5hYFxuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgYDtcblxuICBjb25zdCBSZWRpcmlnaXIgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3MoZmFsc2UpO1xuXG4gICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IFwiLyNyZXBhcmFjaW9uXCI7XG4gIH07XG5cbiAgY29uc3QgW2FiaWVydG9BbnVuY2lvcywgY2FtYmlhckFiaWVydG9BbnVuY2lvc10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFthYmllcnRvQ3Vwb24sIGNhbWJpYXJBYmllcnRvQ3Vwb25dID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgY29uc3QgY2VycmFyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyhmYWxzZSk7XG4gIH07XG5cbiAgLy8gY29uc3QgY2VycmFyTW9kYWxDdXBvbiA9ICgpID0+IHtcbiAgLy8gICBjYW1iaWFyQWJpZXJ0b0N1cG9uKGZhbHNlKTtcbiAgLy8gICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgLy8gICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3ModHJ1ZSk7XG4gIC8vICAgfSwgNjAwMCk7XG4gIC8vIH07XG5cbiAgey8qRVNURSBTRSBCT1JSQSovfVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyh0cnVlKTtcbiAgICB9LCA2MDAwKTtcbiAgfSwgW10pXG57LypFc3RlIHNlIGJvcnJhKi99XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEhlYWQ+XG4gICAgICAgIDxodG1sIGxhbmc9XCJlc1wiIC8+XG4gICAgICAgIDx0aXRsZT5cbiAgICAgICAgICBEU0QgVmVudGEgZW4gUnV0YSB8IFNvZnR3YXJlIHBhcmEgQ29udHJvbCBkZSBJbnZlbnRhcmlvIHwgQXBsaWNhY2nDs25cbiAgICAgICAgICBwYXJhIEhhbmQgSGVsZCB8IFNpc3RlbWEgcGFyYSBHZXN0acOzbiBkZSBQZWRpZG9zLlxuICAgICAgICA8L3RpdGxlPlxuICAgICAgICA8bWV0YVxuICAgICAgICAgIG5hbWU9XCJkZXNjcmlwdGlvblwiXG4gICAgICAgICAgY29udGVudD1cIlNvbHVjacOzbiBEU0QgcGFyYSB2ZW50YSBlbiBydXRhIHkgcmVwYXJ0by4gQXBsaWNhY2nDs24gcGFyYSBIYW5kaGVsZHMgcXVlIGxlIFBlcm1pdGlyw6EgVGVuZXIgQ29udHJvbCBkZSBTdSBJbnZlbnRhcmlvLiAgU29mdHdhcmUgQWRlY3VhZG8gcGFyYSBUb21hIGRlIFBlZGlkb3MgZW4gUnV0YS4gU2lzdGVtYSBFc3BlY2lhbGl6YWRvIGRlIFZlbnRhIGFsIERldGFsbGUgcGFyYSBFcXVpcG9zIEhhbmQgSGVsZCwgY29uIFNpc3RlbWEgT3BlcmF0aXZvIEFuZHJvaWQuXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGxpbmsgcmVsPVwic2hvcnRjdXQgaWNvblwiIGhyZWY9XCIvbG9nby1jb3BpYS5wbmdcIiAvPlxuICAgICAgICA8bWV0YVxuICAgICAgICAgIG5hbWU9XCJrZXl3b3Jkc1wiXG4gICAgICAgICAgY29udGVudD1cIkNvbnRyb2wgZGUgSW52ZW50YXJpbywgQXBsaWNhY2nDs24gTcOzdmlsLCBBcHAsIFZlbnRhIGVuIFJ1dGEsIERTRCwgRGlyZWN0IFN0b3JlIERlbGl2ZXJ5LCBTb2x1Y2nDs24sIEhhbmRoZWxkLCBQREEsIFRlcm1pbmFsIFBvcnTDoXRpbCwgU29mdHdhcmUsIFNpc3RlbWEgZGUgUHVudG8gZGUgVmVudGEsIFRvbWEgZGUgUGVkaWRvcywgRnVlcnphIGRlIFZlbnRhcywgVmVudGEgYWwgZGV0YWxsZSwgUHJvZ3JhbWFjacOzbiBkZSBWaXNpdGFzLCBQcm9jZXNvIGRlIFJ1dGEsIERpc3Bvc2l0aXZvcyBtw7N2aWxlcyBlIEltcGxlbWVudGFjacOzbi5cIlxuICAgICAgICAvPlxuICAgICAgICA8bWV0YSBuYW1lPVwicm9ib3RzXCIgY29udGVudD1cImluZGV4LGZvbGxvdyxhbGxcIiAvPlxuICAgICAgICA8bWV0YVxuICAgICAgICAgIHByb3BlcnR5PVwib2c6dGl0bGVcIlxuICAgICAgICAgIGNvbnRlbnQ9XCJTb2Z0d2FyZSBISFMgfCBWZW50YSBlbiBydXRhIHwgSW1wbGVtZW50YWNpw7NuIHBhcmEgSGFuZCBIZWxkIHwgQ29udHJvbCBkZSBJbnZlbnRhcmlvXCJcbiAgICAgICAgLz5cbiAgICAgICAgPG1ldGFcbiAgICAgICAgICBwcm9wZXJ0eT1cIm9nOmltYWdlXCJcbiAgICAgICAgICBjb250ZW50PVwiaHR0cHM6Ly9pLmliYi5jby80MkszWmRuL2xvZ28tY29waWEucG5nXCJcbiAgICAgICAgLz5cbiAgICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp0eXBlXCIgY29udGVudD1cIndlYnNpdGVcIiAvPlxuICAgICAgICA8bWV0YVxuICAgICAgICAgIHByb3BlcnR5PVwib2c6ZGVzY3JpcHRpb25cIlxuICAgICAgICAgIGNvbnRlbnQ9XCJTb2x1Y2nDs24gRFNEIHBhcmEgdmVudGEgZW4gcnV0YSB5IHJlcGFydG8uIEFwbGljYWNpw7NuIHBhcmEgSGFuZGhlbGRzIHF1ZSBsZSBQZXJtaXRpcsOhIFRlbmVyIENvbnRyb2wgZGUgU3UgSW52ZW50YXJpby4gIFNvZnR3YXJlIEFkZWN1YWRvIHBhcmEgVG9tYSBkZSBQZWRpZG9zIGVuIFJ1dGEuIFNpc3RlbWEgRXNwZWNpYWxpemFkbyBkZSBWZW50YSBhbCBEZXRhbGxlIHBhcmEgRXF1aXBvcyBIYW5kIEhlbGQsIGNvbiBTaXN0ZW1hIE9wZXJhdGl2byBBbmRyb2lkLlwiXG4gICAgICAgIC8+XG4gICAgICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmNhcmRcIiBjb250ZW50PVwic3VtbWFyeV9sYXJnZV9pbWFnZVwiIC8+XG4gICAgICAgIDxsaW5rXG4gICAgICAgICAgcmVsPVwiaWNvblwiXG4gICAgICAgICAgdHlwZT1cImltYWdlL3BuZ1wiXG4gICAgICAgICAgc2l6ZXM9XCIxNjB4OTlcIlxuICAgICAgICAgIGhyZWY9XCJodHRwczovL2kuaWJiLmNvLzQySzNaZG4vbG9nby1jb3BpYS5wbmdcIlxuICAgICAgICAvPlxuICAgICAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb21cIiAvPlxuICAgICAgICA8bGlua1xuICAgICAgICAgIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJhbGV3YXkmZGlzcGxheT1zd2FwXCJcbiAgICAgICAgICByZWw9XCJzdHlsZXNoZWV0XCJcbiAgICAgICAgLz5cbiAgICAgICAgPHNjcmlwdFxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICBfX2h0bWw6IGAoZnVuY3Rpb24odyxkLHMsbCxpKXt3W2xdPXdbbF18fFtdO3dbbF0ucHVzaCh7J2d0bS5zdGFydCc6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLGV2ZW50OidndG0uanMnfSk7dmFyIGY9ZC5nZXRFbGVtZW50c0J5VGFnTmFtZShzKVswXSxcbiAgICAgICAgICAgICAgICBqPWQuY3JlYXRlRWxlbWVudChzKSxkbD1sIT0nZGF0YUxheWVyJz8nJmw9JytsOicnO2ouYXN5bmM9dHJ1ZTtqLnNyYz1cbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RtLmpzP2lkPScraStkbDtmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosZik7XG4gICAgICAgICAgICAgICAgfSkod2luZG93LGRvY3VtZW50LCdzY3JpcHQnLCdkYXRhTGF5ZXInLCdHVE0tS1hIV0RDMicpO2AsXG4gICAgICAgICAgfX1cbiAgICAgICAgPjwvc2NyaXB0PlxuXG4gICAgICAgIHsvKiBFc3RvIGVzIHBhcmEgdGF3ayAqL31cbiAgICAgICAgPHNjcmlwdFxuICAgICAgICAgIGFzeW5jXG4gICAgICAgICAgc3JjPVwiaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD1BVy03MjgyNDk4OTVcIlxuICAgICAgICA+PC9zY3JpcHQ+XG4gICAgICAgIDxzY3JpcHRcbiAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xuICAgICAgICAgICAgX19odG1sOiBgd2luZG93LmRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW107IGZ1bmN0aW9uIGd0YWcoKXtkYXRhTGF5ZXIucHVzaChhcmd1bWVudHMpO30gZ3RhZygnanMnLCBuZXcgRGF0ZSgpKTsgZ3RhZygnY29uZmlnJywgJ0FXLTcyODI0OTg5NScpO2AsXG4gICAgICAgICAgfX1cbiAgICAgICAgPjwvc2NyaXB0PlxuICAgICAgPC9IZWFkPlxuXG4gICAgICA8bm9zY3JpcHRcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgICBfX2h0bWw6IGA8aWZyYW1lIHNyYz1cImh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLUtYSFdEQzJcIlxuICAgICAgICAgIGhlaWdodD1cIjBcIiB3aWR0aD1cIjBcIiBzdHlsZT1cImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlblwiPjwvaWZyYW1lPmAsXG4gICAgICAgIH19XG4gICAgICA+PC9ub3NjcmlwdD5cblxuICAgICAgPEhlYWRlciAvPlxuXG4gICAgICA8U29mdHdhcmVUaXR1bG8gLz5cblxuICAgICAgPENvbnRlbmVkb3JGbGV4YT5cbiAgICAgICAgPFRleHRvU29mdHdhcmUgLz5cbiAgICAgICAgPEZvcm0gLz5cbiAgICAgIDwvQ29udGVuZWRvckZsZXhhPlxuXG4gICAgICA8Q29udGVuZWRvckJvdG9uYT5cbiAgICAgICAgPEJvdG9uU29mdHdhcmUgLz5cbiAgICAgIDwvQ29udGVuZWRvckJvdG9uYT5cblxuICAgICAgPENvbnRlbmVkb3JGbGV4PlxuICAgICAgICA8VWJpY2FjaW9uIC8+XG4gICAgICAgIDxTZXJ2aWNpb3MgLz5cbiAgICAgIDwvQ29udGVuZWRvckZsZXg+XG5cbiAgICAgIDxNYXBhRHVucyAvPlxuXG4gICAgICA8Rm9vdGVyIC8+XG5cbiAgICAgey8qIHsgPE1vZGFsXG4gICAgICAgIHNob3c9e2FiaWVydG9DdXBvbn1cbiAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbEN1cG9ufVxuICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgIHNpemU9XCJtZFwiXG4gICAgICAgIGNsYXNzTmFtZT1cIm1vZGFsLWFsdHVyYSBwcHAgXCJcbiAgICAgID5cbiAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgPEltZ01vZGFsIHNyYz1cImltZy9jdXBvbi53ZWJwXCIgYWx0PVwiY3Vwb24gaGFuZCBoZWxkXCIgLz5cbiAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImxpZ2h0XCIgb25DbGljaz17Y2VycmFyTW9kYWxDdXBvbn0+XG4gICAgICAgICAgICBDZXJyYXJcbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgIDwvTW9kYWw+fSAqL31cblxuICAgICAgPE1vZGFsXG4gICAgICAgIHNob3c9e2FiaWVydG9BbnVuY2lvc31cbiAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbH1cbiAgICAgICAga2V5Ym9hcmQ9e2ZhbHNlfVxuICAgICAgICBzaXplPVwibGdcIlxuICAgICAgICBjbGFzc05hbWU9XCJtb2RhbC1hbHR1cmEgcHBwXCJcbiAgICAgID5cbiAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cbiAgICAgICAgICA8TW9kYWwuVGl0bGU+Tm90aWNpYXM8L01vZGFsLlRpdGxlPlxuICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgPENhcm91c2VsPlxuICAgICAgICAgIHsvKiA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0VEQTUwLmdpZlwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUHJvbW9jacOzbiBIYW5kaGVsZCBFREE1MCBIb25leXdlbGxcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9Qcm9tb2Npw7NuX21jOTA5MF9mdW5jaW9uYWxfcG84M3NrLndlYnBcIlxuICAgICAgICAgICAgICAgIGFsdD1cIkhhbmQgSGVsZCBNQzkwOTBcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgIHsvKiA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL1Byb21vY2nDs25fZHMyMjc4LndlYnBcIlxuICAgICAgICAgICAgICAgIGFsdD1cIkxlY3RvciBkZSBDw7NkaWdvcyBEUzIyNzhcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICA8SW1nTW9kYWxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9Qcm9tb2Npw7NuX0NONTEud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIEludGVybWVjIEhvbmV5d2VsbCBDTjUxXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICB7LyogPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9Qcm9tb2Npw7NuX0NLNjUud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUHJvbW9jacOzbiBDSzY1XCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT4gKi99XG4gICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvZXZvbGlzX2FkaWtpby53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJldm9saXMgYWRpa2lvXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9ldm9saXNfaW1wcmVzb3Jhcy53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJldm9saXMgaW1wcmVzb3Jhc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICB7LyogPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL2ltcHJlc29yYV9JTVozMjAud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUmVudGEgZGUgSW1wcmVzb3JhIGRlIGV0aXF1ZXRhcyBJTVozMjBcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgIHsvKiA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvUHJvbW9jacOzbl9NQzkxOTBfc3JpY2I2LndlYnBcIlxuICAgICAgICAgICAgICAgIGFsdD1cIkhhbmQgSGVsZCBNQzkxOTBcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0lNQUdFTl9aRUJSQV9CQU5ORVJfODAwWDUwMF9seXFucHUud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiWmVicmEgSGFuZCBIZWxkIEltcHJlc29yYXMgTGVjdG9yZXNcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIDxQdW50ZXJvIG9uQ2xpY2s9e1JlZGlyaWdpcn0+XG4gICAgICAgICAgICAgICAgPEltZ01vZGFsXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIFwiXG4gICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0NvcGlhX2RlX3DDs2xpemFzX3JlcGFyYWNpw7NuX3NnMHhpbS53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIlBvbGl6YXMgZGUgcmVwYXJhY2lvbiBoYW5kaGVsZCBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcyB5IGxlY3RvcmVzXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L1B1bnRlcm8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjbGlja3NcIlxuICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kaWhhd3FybnQvaW1hZ2UvdXBsb2FkL3YxNjIzMDk4MDE0L2Jhbm5lci9wdWJsaWNhY2klQzMlQjNuX251ZXZvX2xhbnphbWllbnRvX2VjNTBfeV9lYzU1X2Ztd25oei5wbmdcIlxuICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8SW1nTW9kYWxcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgXCJcbiAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvQ29waWFfZGVfZWM1MF95X2VjNTVfZW5fd2ViX2t5eDZtcC53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIlplYnJhIGhhbmRoZWxkIEVDNTAgRUM1NVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIDxJbWdNb2RhbFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0lNQUdFTl9aRUJSQV9CQU5ORVJfODAwWDUwMF92cjZwMWQud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiWmVicmEgSGFuZCBIZWxkIEltcHJlc29yYXMgTGVjdG9yZXNcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIDxQdW50ZXJvXG4gICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RpaGF3cXJudC9pbWFnZS91cGxvYWQvdjE2MjMwOTgwMTIvYmFubmVyL0VEQTYxS19GQl9vMm9ib2QucG5nXCJcbiAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEltZ01vZGFsXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIFwiXG4gICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0VEQTYxS19XRUJfbHVxbmZzLndlYnBcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIEVEQTYxSyBaZWJyYVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9QdW50ZXJvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIDxQdW50ZXJvXG4gICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RpaGF3cXJudC9pbWFnZS91cGxvYWQvdjE2MjMwOTgwMTAvYmFubmVyL2NrNjVfRkJfMV9yajh6M3UucG5nXCJcbiAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEltZ01vZGFsXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIFwiXG4gICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0NLNjVfV0VCX2w5YWttMy53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIkhhbmQgSGVsZCBDSzY1IFplYnJhXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L1B1bnRlcm8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgPC9DYXJvdXNlbD5cbiAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImxpZ2h0XCIgb25DbGljaz17Y2VycmFyTW9kYWx9PlxuICAgICAgICAgICAgQ2VycmFyXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgICAgPC9Nb2RhbD5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNvZnR3YXJlO1xuIl19 */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Puntero = _styled(\"a\", true ? {\n    target: \"e19ch8a20\"\n  } : {\n    target: \"e19ch8a20\",\n    label: \"Puntero\"\n  })(true ? {\n    name: \"e0dnmk\",\n    styles: \"cursor:pointer\"\n  } : {\n    name: \"e0dnmk\",\n    styles: \"cursor:pointer\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNFUlxcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXHBhZ2VzXFxEU0QtdmVudGEtZW4tcnV0YS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2QzBCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcVVNFUlxcRGVza3RvcFxcY29kaWdvIGRlIHBydWViYSBISFNcXHBhZ2VzXFxEU0QtdmVudGEtZW4tcnV0YS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgSGVhZCBmcm9tIFwibmV4dC9oZWFkXCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCBIZWFkZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvbGF5b3V0L0hlYWRlclwiO1xuaW1wb3J0IFNvZnR3YXJlVGl0dWxvIGZyb20gXCIuLi9jb21wb25lbnRzL3Blc3RhbmFzL1NvZnR3YXJlVGl0dWxvXCI7XG5pbXBvcnQgVGV4dG9Tb2Z0d2FyZSBmcm9tIFwiLi4vY29tcG9uZW50cy9wZXN0YW5hcy9UZXh0b1NvZnR3YXJlXCI7XG5pbXBvcnQgQm90b25Tb2Z0d2FyZSBmcm9tIFwiLi4vY29tcG9uZW50cy9wZXN0YW5hcy9Cb3RvblNvZnR3YXJlXCI7XG5pbXBvcnQgRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9wZXN0YW5hcy9Gb3JtXCI7XG5pbXBvcnQgVWJpY2FjaW9uIGZyb20gXCIuLi9jb21wb25lbnRzL3Blc3RhbmFzL1ViaWNhY2lvblwiO1xuaW1wb3J0IFNlcnZpY2lvcyBmcm9tIFwiLi4vY29tcG9uZW50cy9wZXN0YW5hcy9EbnVlc3Ryb3NTXCI7XG5pbXBvcnQgTWFwYUR1bnMgZnJvbSBcIi4uL2NvbXBvbmVudHMvcGVzdGFuYXMvTWFwYUR1bnNcIjtcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvbGF5b3V0L0Zvb3RlclwiO1xuXG5pbXBvcnQgeyBNb2RhbCwgQnV0dG9uLCBDYXJvdXNlbCB9IGZyb20gXCJyZWFjdC1ib290c3RyYXBcIjtcblxuY29uc3Qgc29mdHdhcmUgPSAoKSA9PiB7XG4gIGNvbnN0IENvbnRlbmVkb3JGbGV4YSA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA5OTVweCkge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3JGbGV4ID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDcwMHB4KSB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvckJvdG9uYSA9IHN0eWxlZC5kaXZgXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5NXB4KSB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSW1nTW9kYWwgPSBzdHlsZWQuaW1nYFxuICAgIG1heC13aWR0aDogMTAwJSAhaW1wb3J0YW50O1xuICAgIG1pbi13aWR0aDogMTAwJSAhaW1wb3J0YW50O1xuICAgIG1heC1oZWlnaHQ6IDEwMCUgIWltcG9ydGFudDtcbiAgICBtaW4taGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7XG4gIGA7XG5cbiAgY29uc3QgUHVudGVybyA9IHN0eWxlZC5hYFxuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgYDtcblxuICBjb25zdCBSZWRpcmlnaXIgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3MoZmFsc2UpO1xuXG4gICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IFwiLyNyZXBhcmFjaW9uXCI7XG4gIH07XG5cbiAgY29uc3QgW2FiaWVydG9BbnVuY2lvcywgY2FtYmlhckFiaWVydG9BbnVuY2lvc10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFthYmllcnRvQ3Vwb24sIGNhbWJpYXJBYmllcnRvQ3Vwb25dID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgY29uc3QgY2VycmFyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyhmYWxzZSk7XG4gIH07XG5cbiAgLy8gY29uc3QgY2VycmFyTW9kYWxDdXBvbiA9ICgpID0+IHtcbiAgLy8gICBjYW1iaWFyQWJpZXJ0b0N1cG9uKGZhbHNlKTtcbiAgLy8gICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgLy8gICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3ModHJ1ZSk7XG4gIC8vICAgfSwgNjAwMCk7XG4gIC8vIH07XG5cbiAgey8qRVNURSBTRSBCT1JSQSovfVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyh0cnVlKTtcbiAgICB9LCA2MDAwKTtcbiAgfSwgW10pXG57LypFc3RlIHNlIGJvcnJhKi99XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEhlYWQ+XG4gICAgICAgIDxodG1sIGxhbmc9XCJlc1wiIC8+XG4gICAgICAgIDx0aXRsZT5cbiAgICAgICAgICBEU0QgVmVudGEgZW4gUnV0YSB8IFNvZnR3YXJlIHBhcmEgQ29udHJvbCBkZSBJbnZlbnRhcmlvIHwgQXBsaWNhY2nDs25cbiAgICAgICAgICBwYXJhIEhhbmQgSGVsZCB8IFNpc3RlbWEgcGFyYSBHZXN0acOzbiBkZSBQZWRpZG9zLlxuICAgICAgICA8L3RpdGxlPlxuICAgICAgICA8bWV0YVxuICAgICAgICAgIG5hbWU9XCJkZXNjcmlwdGlvblwiXG4gICAgICAgICAgY29udGVudD1cIlNvbHVjacOzbiBEU0QgcGFyYSB2ZW50YSBlbiBydXRhIHkgcmVwYXJ0by4gQXBsaWNhY2nDs24gcGFyYSBIYW5kaGVsZHMgcXVlIGxlIFBlcm1pdGlyw6EgVGVuZXIgQ29udHJvbCBkZSBTdSBJbnZlbnRhcmlvLiAgU29mdHdhcmUgQWRlY3VhZG8gcGFyYSBUb21hIGRlIFBlZGlkb3MgZW4gUnV0YS4gU2lzdGVtYSBFc3BlY2lhbGl6YWRvIGRlIFZlbnRhIGFsIERldGFsbGUgcGFyYSBFcXVpcG9zIEhhbmQgSGVsZCwgY29uIFNpc3RlbWEgT3BlcmF0aXZvIEFuZHJvaWQuXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGxpbmsgcmVsPVwic2hvcnRjdXQgaWNvblwiIGhyZWY9XCIvbG9nby1jb3BpYS5wbmdcIiAvPlxuICAgICAgICA8bWV0YVxuICAgICAgICAgIG5hbWU9XCJrZXl3b3Jkc1wiXG4gICAgICAgICAgY29udGVudD1cIkNvbnRyb2wgZGUgSW52ZW50YXJpbywgQXBsaWNhY2nDs24gTcOzdmlsLCBBcHAsIFZlbnRhIGVuIFJ1dGEsIERTRCwgRGlyZWN0IFN0b3JlIERlbGl2ZXJ5LCBTb2x1Y2nDs24sIEhhbmRoZWxkLCBQREEsIFRlcm1pbmFsIFBvcnTDoXRpbCwgU29mdHdhcmUsIFNpc3RlbWEgZGUgUHVudG8gZGUgVmVudGEsIFRvbWEgZGUgUGVkaWRvcywgRnVlcnphIGRlIFZlbnRhcywgVmVudGEgYWwgZGV0YWxsZSwgUHJvZ3JhbWFjacOzbiBkZSBWaXNpdGFzLCBQcm9jZXNvIGRlIFJ1dGEsIERpc3Bvc2l0aXZvcyBtw7N2aWxlcyBlIEltcGxlbWVudGFjacOzbi5cIlxuICAgICAgICAvPlxuICAgICAgICA8bWV0YSBuYW1lPVwicm9ib3RzXCIgY29udGVudD1cImluZGV4LGZvbGxvdyxhbGxcIiAvPlxuICAgICAgICA8bWV0YVxuICAgICAgICAgIHByb3BlcnR5PVwib2c6dGl0bGVcIlxuICAgICAgICAgIGNvbnRlbnQ9XCJTb2Z0d2FyZSBISFMgfCBWZW50YSBlbiBydXRhIHwgSW1wbGVtZW50YWNpw7NuIHBhcmEgSGFuZCBIZWxkIHwgQ29udHJvbCBkZSBJbnZlbnRhcmlvXCJcbiAgICAgICAgLz5cbiAgICAgICAgPG1ldGFcbiAgICAgICAgICBwcm9wZXJ0eT1cIm9nOmltYWdlXCJcbiAgICAgICAgICBjb250ZW50PVwiaHR0cHM6Ly9pLmliYi5jby80MkszWmRuL2xvZ28tY29waWEucG5nXCJcbiAgICAgICAgLz5cbiAgICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp0eXBlXCIgY29udGVudD1cIndlYnNpdGVcIiAvPlxuICAgICAgICA8bWV0YVxuICAgICAgICAgIHByb3BlcnR5PVwib2c6ZGVzY3JpcHRpb25cIlxuICAgICAgICAgIGNvbnRlbnQ9XCJTb2x1Y2nDs24gRFNEIHBhcmEgdmVudGEgZW4gcnV0YSB5IHJlcGFydG8uIEFwbGljYWNpw7NuIHBhcmEgSGFuZGhlbGRzIHF1ZSBsZSBQZXJtaXRpcsOhIFRlbmVyIENvbnRyb2wgZGUgU3UgSW52ZW50YXJpby4gIFNvZnR3YXJlIEFkZWN1YWRvIHBhcmEgVG9tYSBkZSBQZWRpZG9zIGVuIFJ1dGEuIFNpc3RlbWEgRXNwZWNpYWxpemFkbyBkZSBWZW50YSBhbCBEZXRhbGxlIHBhcmEgRXF1aXBvcyBIYW5kIEhlbGQsIGNvbiBTaXN0ZW1hIE9wZXJhdGl2byBBbmRyb2lkLlwiXG4gICAgICAgIC8+XG4gICAgICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmNhcmRcIiBjb250ZW50PVwic3VtbWFyeV9sYXJnZV9pbWFnZVwiIC8+XG4gICAgICAgIDxsaW5rXG4gICAgICAgICAgcmVsPVwiaWNvblwiXG4gICAgICAgICAgdHlwZT1cImltYWdlL3BuZ1wiXG4gICAgICAgICAgc2l6ZXM9XCIxNjB4OTlcIlxuICAgICAgICAgIGhyZWY9XCJodHRwczovL2kuaWJiLmNvLzQySzNaZG4vbG9nby1jb3BpYS5wbmdcIlxuICAgICAgICAvPlxuICAgICAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb21cIiAvPlxuICAgICAgICA8bGlua1xuICAgICAgICAgIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJhbGV3YXkmZGlzcGxheT1zd2FwXCJcbiAgICAgICAgICByZWw9XCJzdHlsZXNoZWV0XCJcbiAgICAgICAgLz5cbiAgICAgICAgPHNjcmlwdFxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICBfX2h0bWw6IGAoZnVuY3Rpb24odyxkLHMsbCxpKXt3W2xdPXdbbF18fFtdO3dbbF0ucHVzaCh7J2d0bS5zdGFydCc6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLGV2ZW50OidndG0uanMnfSk7dmFyIGY9ZC5nZXRFbGVtZW50c0J5VGFnTmFtZShzKVswXSxcbiAgICAgICAgICAgICAgICBqPWQuY3JlYXRlRWxlbWVudChzKSxkbD1sIT0nZGF0YUxheWVyJz8nJmw9JytsOicnO2ouYXN5bmM9dHJ1ZTtqLnNyYz1cbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RtLmpzP2lkPScraStkbDtmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosZik7XG4gICAgICAgICAgICAgICAgfSkod2luZG93LGRvY3VtZW50LCdzY3JpcHQnLCdkYXRhTGF5ZXInLCdHVE0tS1hIV0RDMicpO2AsXG4gICAgICAgICAgfX1cbiAgICAgICAgPjwvc2NyaXB0PlxuXG4gICAgICAgIHsvKiBFc3RvIGVzIHBhcmEgdGF3ayAqL31cbiAgICAgICAgPHNjcmlwdFxuICAgICAgICAgIGFzeW5jXG4gICAgICAgICAgc3JjPVwiaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD1BVy03MjgyNDk4OTVcIlxuICAgICAgICA+PC9zY3JpcHQ+XG4gICAgICAgIDxzY3JpcHRcbiAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xuICAgICAgICAgICAgX19odG1sOiBgd2luZG93LmRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW107IGZ1bmN0aW9uIGd0YWcoKXtkYXRhTGF5ZXIucHVzaChhcmd1bWVudHMpO30gZ3RhZygnanMnLCBuZXcgRGF0ZSgpKTsgZ3RhZygnY29uZmlnJywgJ0FXLTcyODI0OTg5NScpO2AsXG4gICAgICAgICAgfX1cbiAgICAgICAgPjwvc2NyaXB0PlxuICAgICAgPC9IZWFkPlxuXG4gICAgICA8bm9zY3JpcHRcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgICBfX2h0bWw6IGA8aWZyYW1lIHNyYz1cImh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLUtYSFdEQzJcIlxuICAgICAgICAgIGhlaWdodD1cIjBcIiB3aWR0aD1cIjBcIiBzdHlsZT1cImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlblwiPjwvaWZyYW1lPmAsXG4gICAgICAgIH19XG4gICAgICA+PC9ub3NjcmlwdD5cblxuICAgICAgPEhlYWRlciAvPlxuXG4gICAgICA8U29mdHdhcmVUaXR1bG8gLz5cblxuICAgICAgPENvbnRlbmVkb3JGbGV4YT5cbiAgICAgICAgPFRleHRvU29mdHdhcmUgLz5cbiAgICAgICAgPEZvcm0gLz5cbiAgICAgIDwvQ29udGVuZWRvckZsZXhhPlxuXG4gICAgICA8Q29udGVuZWRvckJvdG9uYT5cbiAgICAgICAgPEJvdG9uU29mdHdhcmUgLz5cbiAgICAgIDwvQ29udGVuZWRvckJvdG9uYT5cblxuICAgICAgPENvbnRlbmVkb3JGbGV4PlxuICAgICAgICA8VWJpY2FjaW9uIC8+XG4gICAgICAgIDxTZXJ2aWNpb3MgLz5cbiAgICAgIDwvQ29udGVuZWRvckZsZXg+XG5cbiAgICAgIDxNYXBhRHVucyAvPlxuXG4gICAgICA8Rm9vdGVyIC8+XG5cbiAgICAgey8qIHsgPE1vZGFsXG4gICAgICAgIHNob3c9e2FiaWVydG9DdXBvbn1cbiAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbEN1cG9ufVxuICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgIHNpemU9XCJtZFwiXG4gICAgICAgIGNsYXNzTmFtZT1cIm1vZGFsLWFsdHVyYSBwcHAgXCJcbiAgICAgID5cbiAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgPEltZ01vZGFsIHNyYz1cImltZy9jdXBvbi53ZWJwXCIgYWx0PVwiY3Vwb24gaGFuZCBoZWxkXCIgLz5cbiAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImxpZ2h0XCIgb25DbGljaz17Y2VycmFyTW9kYWxDdXBvbn0+XG4gICAgICAgICAgICBDZXJyYXJcbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgIDwvTW9kYWw+fSAqL31cblxuICAgICAgPE1vZGFsXG4gICAgICAgIHNob3c9e2FiaWVydG9BbnVuY2lvc31cbiAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbH1cbiAgICAgICAga2V5Ym9hcmQ9e2ZhbHNlfVxuICAgICAgICBzaXplPVwibGdcIlxuICAgICAgICBjbGFzc05hbWU9XCJtb2RhbC1hbHR1cmEgcHBwXCJcbiAgICAgID5cbiAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cbiAgICAgICAgICA8TW9kYWwuVGl0bGU+Tm90aWNpYXM8L01vZGFsLlRpdGxlPlxuICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgPENhcm91c2VsPlxuICAgICAgICAgIHsvKiA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0VEQTUwLmdpZlwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUHJvbW9jacOzbiBIYW5kaGVsZCBFREE1MCBIb25leXdlbGxcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9Qcm9tb2Npw7NuX21jOTA5MF9mdW5jaW9uYWxfcG84M3NrLndlYnBcIlxuICAgICAgICAgICAgICAgIGFsdD1cIkhhbmQgSGVsZCBNQzkwOTBcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgIHsvKiA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL1Byb21vY2nDs25fZHMyMjc4LndlYnBcIlxuICAgICAgICAgICAgICAgIGFsdD1cIkxlY3RvciBkZSBDw7NkaWdvcyBEUzIyNzhcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICA8SW1nTW9kYWxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9Qcm9tb2Npw7NuX0NONTEud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIEludGVybWVjIEhvbmV5d2VsbCBDTjUxXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICB7LyogPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9Qcm9tb2Npw7NuX0NLNjUud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUHJvbW9jacOzbiBDSzY1XCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT4gKi99XG4gICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvZXZvbGlzX2FkaWtpby53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJldm9saXMgYWRpa2lvXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9ldm9saXNfaW1wcmVzb3Jhcy53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJldm9saXMgaW1wcmVzb3Jhc1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICB7LyogPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL2ltcHJlc29yYV9JTVozMjAud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUmVudGEgZGUgSW1wcmVzb3JhIGRlIGV0aXF1ZXRhcyBJTVozMjBcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgIHsvKiA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvUHJvbW9jacOzbl9NQzkxOTBfc3JpY2I2LndlYnBcIlxuICAgICAgICAgICAgICAgIGFsdD1cIkhhbmQgSGVsZCBNQzkxOTBcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0lNQUdFTl9aRUJSQV9CQU5ORVJfODAwWDUwMF9seXFucHUud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiWmVicmEgSGFuZCBIZWxkIEltcHJlc29yYXMgTGVjdG9yZXNcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIDxQdW50ZXJvIG9uQ2xpY2s9e1JlZGlyaWdpcn0+XG4gICAgICAgICAgICAgICAgPEltZ01vZGFsXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIFwiXG4gICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0NvcGlhX2RlX3DDs2xpemFzX3JlcGFyYWNpw7NuX3NnMHhpbS53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIlBvbGl6YXMgZGUgcmVwYXJhY2lvbiBoYW5kaGVsZCBpbXByZXNvcmFzIGRlIGV0aXF1ZXRhcyB5IGxlY3RvcmVzXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L1B1bnRlcm8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjbGlja3NcIlxuICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS9kaWhhd3FybnQvaW1hZ2UvdXBsb2FkL3YxNjIzMDk4MDE0L2Jhbm5lci9wdWJsaWNhY2klQzMlQjNuX251ZXZvX2xhbnphbWllbnRvX2VjNTBfeV9lYzU1X2Ztd25oei5wbmdcIlxuICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8SW1nTW9kYWxcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgXCJcbiAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvQ29waWFfZGVfZWM1MF95X2VjNTVfZW5fd2ViX2t5eDZtcC53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIlplYnJhIGhhbmRoZWxkIEVDNTAgRUM1NVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIDxJbWdNb2RhbFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0lNQUdFTl9aRUJSQV9CQU5ORVJfODAwWDUwMF92cjZwMWQud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiWmVicmEgSGFuZCBIZWxkIEltcHJlc29yYXMgTGVjdG9yZXNcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIDxQdW50ZXJvXG4gICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RpaGF3cXJudC9pbWFnZS91cGxvYWQvdjE2MjMwOTgwMTIvYmFubmVyL0VEQTYxS19GQl9vMm9ib2QucG5nXCJcbiAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEltZ01vZGFsXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIFwiXG4gICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0VEQTYxS19XRUJfbHVxbmZzLndlYnBcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIEVEQTYxSyBaZWJyYVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9QdW50ZXJvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIDxQdW50ZXJvXG4gICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RpaGF3cXJudC9pbWFnZS91cGxvYWQvdjE2MjMwOTgwMTAvYmFubmVyL2NrNjVfRkJfMV9yajh6M3UucG5nXCJcbiAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEltZ01vZGFsXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIFwiXG4gICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0NLNjVfV0VCX2w5YWttMy53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIkhhbmQgSGVsZCBDSzY1IFplYnJhXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L1B1bnRlcm8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgPC9DYXJvdXNlbD5cbiAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImxpZ2h0XCIgb25DbGljaz17Y2VycmFyTW9kYWx9PlxuICAgICAgICAgICAgQ2VycmFyXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgICAgPC9Nb2RhbD5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNvZnR3YXJlO1xuIl19 */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Redirigir = e => {\n    e.preventDefault();\n    cambiarAbiertoAnuncios(false);\n    document.location.href = \"/#reparacion\";\n  };\n\n  const {\n    0: abiertoAnuncios,\n    1: cambiarAbiertoAnuncios\n  } = useState(false);\n  const {\n    0: abiertoCupon,\n    1: cambiarAbiertoCupon\n  } = useState(true);\n\n  const cerrarModal = () => {\n    cambiarAbiertoAnuncios(false);\n  }; // const cerrarModalCupon = () => {\n  //   cambiarAbiertoCupon(false);\n  //   setTimeout(() => {\n  //     cambiarAbiertoAnuncios(true);\n  //   }, 6000);\n  // };\n\n\n  {\n    /*ESTE SE BORRA*/\n  }\n  useEffect(() => {\n    setTimeout(() => {\n      cambiarAbiertoAnuncios(true);\n    }, 6000);\n  }, []);\n  {\n    /*Este se borra*/\n  }\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Head, null, ___EmotionJSX(\"html\", {\n    lang: \"es\"\n  }), ___EmotionJSX(\"title\", null, \"DSD Venta en Ruta | Software para Control de Inventario | Aplicaci\\xF3n para Hand Held | Sistema para Gesti\\xF3n de Pedidos.\"), ___EmotionJSX(\"meta\", {\n    name: \"description\",\n    content: \"Soluci\\xF3n DSD para venta en ruta y reparto. Aplicaci\\xF3n para Handhelds que le Permitir\\xE1 Tener Control de Su Inventario.  Software Adecuado para Toma de Pedidos en Ruta. Sistema Especializado de Venta al Detalle para Equipos Hand Held, con Sistema Operativo Android.\"\n  }), ___EmotionJSX(\"link\", {\n    rel: \"shortcut icon\",\n    href: \"/logo-copia.png\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"keywords\",\n    content: \"Control de Inventario, Aplicaci\\xF3n M\\xF3vil, App, Venta en Ruta, DSD, Direct Store Delivery, Soluci\\xF3n, Handheld, PDA, Terminal Port\\xE1til, Software, Sistema de Punto de Venta, Toma de Pedidos, Fuerza de Ventas, Venta al detalle, Programaci\\xF3n de Visitas, Proceso de Ruta, Dispositivos m\\xF3viles e Implementaci\\xF3n.\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"robots\",\n    content: \"index,follow,all\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:title\",\n    content: \"Software HHS | Venta en ruta | Implementaci\\xF3n para Hand Held | Control de Inventario\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:image\",\n    content: \"https://i.ibb.co/42K3Zdn/logo-copia.png\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:type\",\n    content: \"website\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:description\",\n    content: \"Soluci\\xF3n DSD para venta en ruta y reparto. Aplicaci\\xF3n para Handhelds que le Permitir\\xE1 Tener Control de Su Inventario.  Software Adecuado para Toma de Pedidos en Ruta. Sistema Especializado de Venta al Detalle para Equipos Hand Held, con Sistema Operativo Android.\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\"\n  }), ___EmotionJSX(\"link\", {\n    rel: \"icon\",\n    type: \"image/png\",\n    sizes: \"160x99\",\n    href: \"https://i.ibb.co/42K3Zdn/logo-copia.png\"\n  }), ___EmotionJSX(\"link\", {\n    rel: \"preconnect\",\n    href: \"https://fonts.gstatic.com\"\n  }), ___EmotionJSX(\"link\", {\n    href: \"https://fonts.googleapis.com/css2?family=Raleway&display=swap\",\n    rel: \"stylesheet\"\n  }), ___EmotionJSX(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start': new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n                })(window,document,'script','dataLayer','GTM-KXHWDC2');`\n    }\n  }), ___EmotionJSX(\"script\", {\n    async: true,\n    src: \"https://www.googletagmanager.com/gtag/js?id=AW-728249895\"\n  }), ___EmotionJSX(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'AW-728249895');`\n    }\n  })), ___EmotionJSX(\"noscript\", {\n    dangerouslySetInnerHTML: {\n      __html: `<iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-KXHWDC2\"\n          height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe>`\n    }\n  }), ___EmotionJSX(Header, null), ___EmotionJSX(SoftwareTitulo, null), ___EmotionJSX(ContenedorFlexa, null, ___EmotionJSX(TextoSoftware, null), ___EmotionJSX(Form, null)), ___EmotionJSX(ContenedorBotona, null, ___EmotionJSX(BotonSoftware, null)), ___EmotionJSX(ContenedorFlex, null, ___EmotionJSX(Ubicacion, null), ___EmotionJSX(Servicios, null)), ___EmotionJSX(MapaDuns, null), ___EmotionJSX(Footer, null), ___EmotionJSX(Modal, {\n    show: abiertoAnuncios,\n    onHide: cerrarModal,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura ppp\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Noticias\")), ___EmotionJSX(Modal.Body, null, ___EmotionJSX(Carousel, null, ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/Promoci\\xF3n_mc9090_funcional_po83sk.webp\",\n    alt: \"Hand Held MC9090\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/Promoci\\xF3n_CN51.webp\",\n    alt: \"Hand Held Intermec Honeywell CN51\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/evolis_adikio.webp\",\n    alt: \"evolis adikio\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/evolis_impresoras.webp\",\n    alt: \"evolis impresoras\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/IMAGEN_ZEBRA_BANNER_800X500_lyqnpu.webp\",\n    alt: \"Zebra Hand Held Impresoras Lectores\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(Puntero, {\n    onClick: Redirigir\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/Copia_de_p\\xF3lizas_reparaci\\xF3n_sg0xim.webp\",\n    alt: \"Polizas de reparacion handheld impresoras de etiquetas y lectores\"\n  }))), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"a\", {\n    className: \"clicks\",\n    href: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1623098014/banner/publicaci%C3%B3n_nuevo_lanzamiento_ec50_y_ec55_fmwnhz.png\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/Copia_de_ec50_y_ec55_en_web_kyx6mp.webp\",\n    alt: \"Zebra handheld EC50 EC55\"\n  }))), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/IMAGEN_ZEBRA_BANNER_800X500_vr6p1d.webp\",\n    alt: \"Zebra Hand Held Impresoras Lectores\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(Puntero, {\n    href: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1623098012/banner/EDA61K_FB_o2obod.png\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/EDA61K_WEB_luqnfs.webp\",\n    alt: \"Hand Held EDA61K Zebra\"\n  }))), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(Puntero, {\n    href: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1623098010/banner/ck65_FB_1_rj8z3u.png\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/CK65_WEB_l9akm3.webp\",\n    alt: \"Hand Held CK65 Zebra\"\n  }))))), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModal\n  }, \"Cerrar\"))));\n};\n\nexport default software;","map":null,"metadata":{},"sourceType":"module"}