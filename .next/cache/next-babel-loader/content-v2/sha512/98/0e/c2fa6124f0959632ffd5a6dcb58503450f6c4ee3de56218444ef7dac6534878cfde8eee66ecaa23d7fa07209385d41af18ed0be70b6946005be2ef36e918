{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport Head from \"next/head\";\nimport Header from \"../components/layout/Header\";\nimport VentaL from \"../components/pestanas/VentaL\";\nimport IconosVentaGeneral from \"../components/pestanas/IconosVentaGeneral\";\nimport Form from \"../components/pestanas/Form\";\nimport Ubicacion from \"../components/pestanas/Ubicacion\";\nimport Servicios from \"../components/pestanas/DnuestrosS\";\nimport MapaDuns from \"../components/pestanas/MapaDuns\";\nimport BotonesMovilCinco from \"../components/pestanas/BotonesMovilCinco\";\nimport Footer from \"../components/layout/Footer\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar VLectores = function VLectores() {\n  var ContenedorFlexa = _styled(\"div\", true ? {\n    target: \"e1tcq1pd3\"\n  } : {\n    target: \"e1tcq1pd3\",\n    label: \"ContenedorFlexa\"\n  })(true ? {\n    name: \"bhfu6s\",\n    styles: \"display:flex;margin-top:-167px;@media (max-width: 1750px){margin-top:-127px;}@media (max-width: 1470px){margin-top:-70px;}@media (max-width: 1300px){margin-top:0px;}@media (max-width: 1200px){margin-top:120px;}@media (max-width: 995px){display:block;}\"\n  } : {\n    name: \"bhfu6s\",\n    styles: \"display:flex;margin-top:-167px;@media (max-width: 1750px){margin-top:-127px;}@media (max-width: 1470px){margin-top:-70px;}@media (max-width: 1300px){margin-top:0px;}@media (max-width: 1200px){margin-top:120px;}@media (max-width: 995px){display:block;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var ContenedorFlex = _styled(\"div\", true ? {\n    target: \"e1tcq1pd2\"\n  } : {\n    target: \"e1tcq1pd2\",\n    label: \"ContenedorFlex\"\n  })(true ? {\n    name: \"o0r707\",\n    styles: \"display:flex;@media (max-width: 700px){display:block;}\"\n  } : {\n    name: \"o0r707\",\n    styles: \"display:flex;@media (max-width: 700px){display:block;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var ContenedorBotona = _styled(\"div\", true ? {\n    target: \"e1tcq1pd1\"\n  } : {\n    target: \"e1tcq1pd1\",\n    label: \"ContenedorBotona\"\n  })(true ? {\n    name: \"udt92q\",\n    styles: \"@media (max-width: 995px){display:block;}\"\n  } : {\n    name: \"udt92q\",\n    styles: \"@media (max-width: 995px){display:block;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxwYWdlc1xcdmVudGEtZGUtbGVjdG9yZXMtZGUtY29kaWdvcy1kZS1iYXJyYXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaURxQyIsImZpbGUiOiJDOlxcVXNlcnNcXGpoaW5vXFxEZXNrdG9wXFxjb2RpZ28gZGUgcHJ1ZWJhIEhIU1xccGFnZXNcXHZlbnRhLWRlLWxlY3RvcmVzLWRlLWNvZGlnb3MtZGUtYmFycmFzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IExpbmsgZnJvbSBcIm5leHQvbGlua1wiO1xuaW1wb3J0IEhlYWQgZnJvbSBcIm5leHQvaGVhZFwiO1xuaW1wb3J0IEhlYWRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9sYXlvdXQvSGVhZGVyXCI7XG5pbXBvcnQgVmVudGFMIGZyb20gXCIuLi9jb21wb25lbnRzL3Blc3RhbmFzL1ZlbnRhTFwiO1xuaW1wb3J0IEljb25vc1ZlbnRhR2VuZXJhbCBmcm9tIFwiLi4vY29tcG9uZW50cy9wZXN0YW5hcy9JY29ub3NWZW50YUdlbmVyYWxcIjtcbmltcG9ydCBGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL3Blc3RhbmFzL0Zvcm1cIjtcbmltcG9ydCBVYmljYWNpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvcGVzdGFuYXMvVWJpY2FjaW9uXCI7XG5pbXBvcnQgU2VydmljaW9zIGZyb20gXCIuLi9jb21wb25lbnRzL3Blc3RhbmFzL0RudWVzdHJvc1NcIjtcbmltcG9ydCBNYXBhRHVucyBmcm9tIFwiLi4vY29tcG9uZW50cy9wZXN0YW5hcy9NYXBhRHVuc1wiO1xuaW1wb3J0IEJvdG9uZXNNb3ZpbENpbmNvIGZyb20gXCIuLi9jb21wb25lbnRzL3Blc3RhbmFzL0JvdG9uZXNNb3ZpbENpbmNvXCI7XG5pbXBvcnQgRm9vdGVyIGZyb20gXCIuLi9jb21wb25lbnRzL2xheW91dC9Gb290ZXJcIjtcbmltcG9ydCB7IE1vZGFsLCBCdXR0b24gfSBmcm9tIFwicmVhY3QtYm9vdHN0cmFwXCI7XG5cbmNvbnN0IFZMZWN0b3JlcyA9ICgpID0+IHtcbiAgY29uc3QgQ29udGVuZWRvckZsZXhhID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi10b3A6IC0xNjdweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNzUwcHgpIHtcbiAgICAgIG1hcmdpbi10b3A6IC0xMjdweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTQ3MHB4KSB7XG4gICAgICBtYXJnaW4tdG9wOiAtNzBweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTMwMHB4KSB7XG4gICAgICBtYXJnaW4tdG9wOiAwcHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgICAgbWFyZ2luLXRvcDogMTIwcHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5NXB4KSB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgQ29udGVuZWRvckZsZXggPSBzdHlsZWQuZGl2YFxuICAgIGRpc3BsYXk6IGZsZXg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzAwcHgpIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBDb250ZW5lZG9yQm90b25hID0gc3R5bGVkLmRpdmBcbiAgICBAbWVkaWEgKG1heC13aWR0aDogOTk1cHgpIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJbWdNb2RhbCA9IHN0eWxlZC5pbWdgXG4gICAgbWF4LXdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gICAgbWluLXdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gICAgbWF4LWhlaWdodDogMTAwJSAhaW1wb3J0YW50O1xuICAgIG1pbi1oZWlnaHQ6IDEwMCUgIWltcG9ydGFudDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIGA7XG5cbiAgY29uc3QgW2FiaWVydG9BbnVuY2lvcywgY2FtYmlhckFiaWVydG9BbnVuY2lvc10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFthYmllcnRvQ3Vwb24sIGNhbWJpYXJBYmllcnRvQ3Vwb25dID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgY29uc3QgY2VycmFyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyhmYWxzZSk7XG4gIH07XG5cbiAgLy8gIGNvbnN0IGNlcnJhck1vZGFsQ3Vwb24gPSAoKSA9PiB7XG4gIC8vICAgIGNhbWJpYXJBYmllcnRvQ3Vwb24oZmFsc2UpO1xuICAvLyAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgLy8gICAgICBjYW1iaWFyQWJpZXJ0b0FudW5jaW9zKHRydWUpO1xuICAvLyAgICB9LCA2MDAwKTtcbiAgLy8gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3ModHJ1ZSk7XG4gICAgfSwgNjAwMCk7XG4gIH0sIFtdKVxuXG4gIFxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwieWFcIj5cbiAgICAgIDxIZWFkPlxuICAgICAgICA8aHRtbCBsYW5nPVwiZXNcIiAvPlxuICAgICAgICA8dGl0bGU+XG4gICAgICAgICAgVmVudGEgZGUgTGVjdG9yZXMgZGUgQ8OzZGlnb3MgZGUgQmFycmFzIHwgTGVjdG9yZXMgSW5hbMOhbWJyaWNvcyB8XG4gICAgICAgICAgRXNjw6FuZXJlcyBkZSBDw7NkaWdvcyBkZSBCYXJyYXNcbiAgICAgICAgPC90aXRsZT5cbiAgICAgICAgPGxpbmsgcmVsPVwic2hvcnRjdXQgaWNvblwiIGhyZWY9XCIvbG9nby1jb3BpYS5wbmdcIiAvPlxuICAgICAgICA8bWV0YVxuICAgICAgICAgIG5hbWU9XCJkZXNjcmlwdGlvblwiXG4gICAgICAgICAgY29udGVudD1cIlZlbnRhIGRlIExlY3RvcmVzIGRlIEPDs2RpZ29zIGRlIEJhcnJhcyB5IEPDs2RpZ29zIFFSLiBDb250YW1vcyBjb24gRXF1aXBvcyBwYXJhIExlY3R1cmEgMUQgeSAyRC4gwqFDcsOpZGl0byBJbmljaWFsIHkgUGxhbmVzIGRlIEZpbmFuY2lhbWllbnRvISBTb3BvcnRlIFTDqWNuaWNvIFBvc3R2ZW50YS4gwqFDb3RpY2UgYWhvcmEhIEVxdWlwb3MgSG9uZXl3ZWxsIHkgWmVicmEuXCJcbiAgICAgICAgLz5cbiAgICAgICAgPG1ldGFcbiAgICAgICAgICBuYW1lPVwia2V5d29yZHNcIlxuICAgICAgICAgIGNvbnRlbnQ9XCJWZW50YSwgY29tcHJhLCBwcmVjaW8sIHNjYW5uZXIsIGxlY3RvciBkZSBjw7NkaWdvcywgZXNjw6FuZXIsIGPDs2RpZ29zIGRlIGJhcnJhcywgaG9uZXl3ZWxsLCBzeW1ib2wsIG1vdG9yb2xhLCBpbnRlcm1lYywgemVicmEsIGPDs2RpZ29zIHFyLCBsZWN0b3IgaW5hbMOhbWJyaWNvXCJcbiAgICAgICAgLz5cbiAgICAgICAgPG1ldGEgbmFtZT1cInJvYm90c1wiIGNvbnRlbnQ9XCJpbmRleCxmb2xsb3csYWxsXCIgLz5cbiAgICAgICAgPG1ldGFcbiAgICAgICAgICBwcm9wZXJ0eT1cIm9nOnRpdGxlXCJcbiAgICAgICAgICBjb250ZW50PVwiVmVudGEgZGUgTGVjdG9yZXMgZGUgQ8OzZGlnb3MgZGUgQmFycmFzIHwgTGVjdG9yZXMgSW5hbMOhbWJyaWNvcyB8IEVzY8OhbmVyZXMgZGUgQ8OzZGlnb3MgZGUgQmFycmFzXCJcbiAgICAgICAgLz5cbiAgICAgICAgPG1ldGFcbiAgICAgICAgICBwcm9wZXJ0eT1cIm9nOmltYWdlXCJcbiAgICAgICAgICBjb250ZW50PVwiaHR0cHM6Ly9pLmliYi5jby80MkszWmRuL2xvZ28tY29waWEucG5nXCJcbiAgICAgICAgLz5cbiAgICAgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp0eXBlXCIgY29udGVudD1cIndlYnNpdGVcIiAvPlxuICAgICAgICA8bWV0YVxuICAgICAgICAgIHByb3BlcnR5PVwib2c6ZGVzY3JpcHRpb25cIlxuICAgICAgICAgIGNvbnRlbnQ9XCJWZW50YSBkZSBMZWN0b3JlcyBkZSBDw7NkaWdvcyBkZSBCYXJyYXMgeSBDw7NkaWdvcyBRUi4gQ29udGFtb3MgY29uIEVxdWlwb3MgcGFyYSBMZWN0dXJhIDFEIHkgMkQuIMKhQ3LDqWRpdG8gSW5pY2lhbCB5IFBsYW5lcyBkZSBGaW5hbmNpYW1pZW50byEgU29wb3J0ZSBUw6ljbmljbyBQb3N0dmVudGEuIMKhQ290aWNlIGFob3JhISBFcXVpcG9zIEhvbmV5d2VsbCB5IFplYnJhLlwiXG4gICAgICAgIC8+XG4gICAgICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmNhcmRcIiBjb250ZW50PVwic3VtbWFyeV9sYXJnZV9pbWFnZVwiIC8+XG4gICAgICAgIDxsaW5rXG4gICAgICAgICAgcmVsPVwiaWNvblwiXG4gICAgICAgICAgdHlwZT1cImltYWdlL3BuZ1wiXG4gICAgICAgICAgc2l6ZXM9XCIxNjB4OTlcIlxuICAgICAgICAgIGhyZWY9XCJodHRwczovL2kuaWJiLmNvLzQySzNaZG4vbG9nby1jb3BpYS5wbmdcIlxuICAgICAgICAvPlxuICAgICAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb21cIiAvPlxuICAgICAgICA8bGlua1xuICAgICAgICAgIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJhbGV3YXkmZGlzcGxheT1zd2FwXCJcbiAgICAgICAgICByZWw9XCJzdHlsZXNoZWV0XCJcbiAgICAgICAgLz5cbiAgICAgICAgPHNjcmlwdFxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICBfX2h0bWw6IGAoZnVuY3Rpb24odyxkLHMsbCxpKXt3W2xdPXdbbF18fFtdO3dbbF0ucHVzaCh7J2d0bS5zdGFydCc6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLGV2ZW50OidndG0uanMnfSk7dmFyIGY9ZC5nZXRFbGVtZW50c0J5VGFnTmFtZShzKVswXSxcbiAgICAgICAgICAgICAgICBqPWQuY3JlYXRlRWxlbWVudChzKSxkbD1sIT0nZGF0YUxheWVyJz8nJmw9JytsOicnO2ouYXN5bmM9dHJ1ZTtqLnNyYz1cbiAgICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RtLmpzP2lkPScraStkbDtmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosZik7XG4gICAgICAgICAgICAgICAgfSkod2luZG93LGRvY3VtZW50LCdzY3JpcHQnLCdkYXRhTGF5ZXInLCdHVE0tS1hIV0RDMicpO2AsXG4gICAgICAgICAgfX1cbiAgICAgICAgPjwvc2NyaXB0PlxuXG4gICAgICAgIHsvKiBFc3RvIGVzIHBhcmEgdGF3ayAqL31cbiAgICAgICAgPHNjcmlwdFxuICAgICAgICAgIGFzeW5jXG4gICAgICAgICAgc3JjPVwiaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD1BVy03MjgyNDk4OTVcIlxuICAgICAgICA+PC9zY3JpcHQ+XG4gICAgICAgIDxzY3JpcHRcbiAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xuICAgICAgICAgICAgX19odG1sOiBgd2luZG93LmRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW107IGZ1bmN0aW9uIGd0YWcoKXtkYXRhTGF5ZXIucHVzaChhcmd1bWVudHMpO30gZ3RhZygnanMnLCBuZXcgRGF0ZSgpKTsgZ3RhZygnY29uZmlnJywgJ0FXLTcyODI0OTg5NScpO2AsXG4gICAgICAgICAgfX1cbiAgICAgICAgPjwvc2NyaXB0PlxuICAgICAgPC9IZWFkPlxuXG4gICAgICA8bm9zY3JpcHRcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgICBfX2h0bWw6IGA8aWZyYW1lIHNyYz1cImh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL25zLmh0bWw/aWQ9R1RNLUtYSFdEQzJcIlxuICAgICAgICAgIGhlaWdodD1cIjBcIiB3aWR0aD1cIjBcIiBzdHlsZT1cImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlblwiPjwvaWZyYW1lPmAsXG4gICAgICAgIH19XG4gICAgICA+PC9ub3NjcmlwdD5cblxuICAgICAgPEhlYWRlciAvPlxuXG4gICAgICA8VmVudGFMIC8+XG5cbiAgICAgIDxDb250ZW5lZG9yRmxleGE+XG4gICAgICAgIDxJY29ub3NWZW50YUdlbmVyYWxcbiAgICAgICAgICB1bm9pPVwiL2ltZy9Db250YW1vcyBjb24gbGVjdG9yZXMgMUQgeSAyRC53ZWJwXCJcbiAgICAgICAgICB1bm9tPVwiQ29udGFtb3MgY29uIGxlY3RvcmVzIDFEIHkgMkQuXCJcbiAgICAgICAgICBkb3NtPVwiwr9OZWNlc2l0YSBkYXIgbWFudGVuaW1pZW50byBhIHN1cyBsZWN0b3Jlcz8uXCJcbiAgICAgICAgICB0cmVzbT1cIsK/TmVjZXNpdGEgdW4gcGxhbiBkZSByZW50YSBwYXJhIGxlY3RvcmVzPy5cIlxuICAgICAgICAgIGx1bm89XCJyZXBhcmFjaW9uLWRlLWxlY3RvcmVzLWRlLWNvZGlnb3MtZGUtYmFycmFzXCJcbiAgICAgICAgICBsZG9zPVwicmVudGEtZGUtbGVjdG9yZXMtZGUtY29kaWdvcy1kZS1iYXJyYXNcIlxuICAgICAgICAvPlxuICAgICAgICA8Rm9ybSAvPlxuICAgICAgPC9Db250ZW5lZG9yRmxleGE+XG5cbiAgICAgIDxDb250ZW5lZG9yQm90b25hPlxuICAgICAgICA8Qm90b25lc01vdmlsQ2luY29cbiAgICAgICAgICBtdW5vPVwiwr9OZWNlc2l0YSBkYXIgbWFudGVuaW1pZW50byBhIHN1cyBsZWN0b3Jlcz8uXCJcbiAgICAgICAgICBtZG9zPVwiwqFDb25vemNhIG51ZXN0cm8gc2VydmljaW8gZGUgUmVwYXJhY2nDs24hXCJcbiAgICAgICAgICBtdHJlcz1cIsK/TmVjZXNpdGEgdW4gcGxhbiBkZSByZW50YSBwYXJhIGxlY3RvcmVzPy5cIlxuICAgICAgICAgIG1jdWF0cm89XCLCoUNvbm96Y2EgbnVlc3RybyBzZXJ2aWNpbyBkZSBSZW50YSFcIlxuICAgICAgICAgIG1jaW5jbz1cIkFkcXVpZXJhIGxvcyBhY2Nlc29yaW9zIHkgY29uc3VtaWJsZXMgcXVlIG5lY2VzaXRhLlwiXG4gICAgICAgICAgbXNlaXM9XCLCoUNvbnTDoWN0ZW5vcyFcIlxuICAgICAgICAgIG1zaWV0ZT0nUG9uZW1vcyBhIHN1IGRpc3Bvc2ljacOzbiBsYSBzb2x1Y2nDs24gXCJEU0RcIiBwYXJhIHZlbnRhIGVuIHJ1dGEuJ1xuICAgICAgICAgIG1vY2hvPVwiwqFDb27Ds3pjYWxvIVwiXG4gICAgICAgICAgbW51ZXZlPVwiQ29udGFtb3MgY29uIGZ1bmRhcyBkaXNlw7FhZGFzIGEgbGEgbWVkaWRhIHBhcmEgY3VtcGxpciBjb24gc3VzIG5lY2VzaWRhZGVzLlwiXG4gICAgICAgICAgbWRpZXo9XCLCoUFkcXVpZXJhIGxhIHByb3RlY2Npw7NuIHF1ZSBzdXMgZXF1aXBvcyBuZWNlc2l0YW4hXCJcbiAgICAgICAgICBsdW5vPVwicmVwYXJhY2lvbi1kZS1sZWN0b3Jlcy1kZS1jb2RpZ29zLWRlLWJhcnJhc1wiXG4gICAgICAgICAgbGRvcz1cInJlbnRhLWRlLWxlY3RvcmVzLWRlLWNvZGlnb3MtZGUtYmFycmFzXCJcbiAgICAgICAgICBsdHJlcz1cInZlbnRhLWRlLWFjY2Vzb3Jpb3MteS1jb25zdW1pYmxlc1wiXG4gICAgICAgICAgbGN1YXRybz1cIkRTRC12ZW50YS1lbi1ydXRhXCJcbiAgICAgICAgICBsY2luY289XCJ2ZW50YS1mdW5kYXMtaGFuZGhlbGQtaW1wcmVzb3JhLXBvcnRhdGlsXCJcbiAgICAgICAgLz5cbiAgICAgIDwvQ29udGVuZWRvckJvdG9uYT5cblxuICAgICAgPENvbnRlbmVkb3JGbGV4PlxuICAgICAgICA8VWJpY2FjaW9uIC8+XG4gICAgICAgIDxTZXJ2aWNpb3MgLz5cbiAgICAgIDwvQ29udGVuZWRvckZsZXg+XG5cbiAgICAgIDxNYXBhRHVucyAvPlxuXG4gICAgICA8Rm9vdGVyIC8+XG5cbiAgICAgey8qIHsgPE1vZGFsXG4gICAgICAgIHNob3c9e2FiaWVydG9DdXBvbn1cbiAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbEN1cG9ufVxuICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgIHNpemU9XCJtZFwiXG4gICAgICAgIGNsYXNzTmFtZT1cIm1vZGFsLWFsdHVyYSBwcHAgXCJcbiAgICAgID5cbiAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgPEltZ01vZGFsIHNyYz1cImltZy9jdXBvbi53ZWJwXCIgYWx0PVwiY3Vwb24gaGFuZCBoZWxkXCIgLz5cbiAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImxpZ2h0XCIgb25DbGljaz17Y2VycmFyTW9kYWxDdXBvbn0+XG4gICAgICAgICAgICBDZXJyYXJcbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICA8L01vZGFsPlxuICAgICB9ICovfVxuICAgICAgPE1vZGFsXG4gICAgICAgIHNob3c9e2FiaWVydG9BbnVuY2lvc31cbiAgICAgICAgb25IaWRlPXtjZXJyYXJNb2RhbH1cbiAgICAgICAga2V5Ym9hcmQ9e2ZhbHNlfVxuICAgICAgICBzaXplPVwibGdcIlxuICAgICAgICBjbGFzc05hbWU9XCJtb2RhbC1hbHR1cmEgcHBwIFwiXG4gICAgICA+XG4gICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgIDxMaW5rIGhyZWY9XCIvcmVudGEtZGUtbGVjdG9yZXMtZGUtY29kaWdvcy1kZS1iYXJyYXNcIj5cbiAgICAgICAgICAgIDxJbWdNb2RhbFxuICAgICAgICAgICAgICBzcmM9XCJpbWcvUlZsZWN0b3Jlcy53ZWJwXCJcbiAgICAgICAgICAgICAgYWx0PVwiZW5sYWNlIHJlbnRhIHZlbnRhIGRlIGxlY3RvcmVzXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9MaW5rPlxuICAgICAgICA8L01vZGFsLkJvZHk+XG4gICAgICAgIDxNb2RhbC5Gb290ZXI+XG4gICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBvbkNsaWNrPXtjZXJyYXJNb2RhbH0+XG4gICAgICAgICAgICBDZXJyYXJcbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICA8L01vZGFsPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVkxlY3RvcmVzO1xuIl19 */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var ImgModal = _styled(\"img\", true ? {\n    target: \"e1tcq1pd0\"\n  } : {\n    target: \"e1tcq1pd0\",\n    label: \"ImgModal\"\n  })(true ? {\n    name: \"1czw170\",\n    styles: \"max-width:100%!important;min-width:100%!important;max-height:100%!important;min-height:100%!important;cursor:pointer\"\n  } : {\n    name: \"1czw170\",\n    styles: \"max-width:100%!important;min-width:100%!important;max-height:100%!important;min-height:100%!important;cursor:pointer\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var _useState = useState(false),\n      abiertoAnuncios = _useState[0],\n      cambiarAbiertoAnuncios = _useState[1];\n\n  var _useState2 = useState(true),\n      abiertoCupon = _useState2[0],\n      cambiarAbiertoCupon = _useState2[1];\n\n  var cerrarModal = function cerrarModal() {\n    cambiarAbiertoAnuncios(false);\n  }; //  const cerrarModalCupon = () => {\n  //    cambiarAbiertoCupon(false);\n  //    setTimeout(() => {\n  //      cambiarAbiertoAnuncios(true);\n  //    }, 6000);\n  //  };\n\n\n  useEffect(function () {\n    setTimeout(function () {\n      cambiarAbiertoAnuncios(true);\n    }, 6000);\n  }, []);\n  return ___EmotionJSX(\"div\", {\n    className: \"ya\"\n  }, ___EmotionJSX(Head, null, ___EmotionJSX(\"html\", {\n    lang: \"es\"\n  }), ___EmotionJSX(\"title\", null, \"Venta de Lectores de C\\xF3digos de Barras | Lectores Inal\\xE1mbricos | Esc\\xE1neres de C\\xF3digos de Barras\"), ___EmotionJSX(\"link\", {\n    rel: \"shortcut icon\",\n    href: \"/logo-copia.png\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"description\",\n    content: \"Venta de Lectores de C\\xF3digos de Barras y C\\xF3digos QR. Contamos con Equipos para Lectura 1D y 2D. \\xA1Cr\\xE9dito Inicial y Planes de Financiamiento! Soporte T\\xE9cnico Postventa. \\xA1Cotice ahora! Equipos Honeywell y Zebra.\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"keywords\",\n    content: \"Venta, compra, precio, scanner, lector de c\\xF3digos, esc\\xE1ner, c\\xF3digos de barras, honeywell, symbol, motorola, intermec, zebra, c\\xF3digos qr, lector inal\\xE1mbrico\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"robots\",\n    content: \"index,follow,all\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:title\",\n    content: \"Venta de Lectores de C\\xF3digos de Barras | Lectores Inal\\xE1mbricos | Esc\\xE1neres de C\\xF3digos de Barras\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:image\",\n    content: \"https://i.ibb.co/42K3Zdn/logo-copia.png\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:type\",\n    content: \"website\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:description\",\n    content: \"Venta de Lectores de C\\xF3digos de Barras y C\\xF3digos QR. Contamos con Equipos para Lectura 1D y 2D. \\xA1Cr\\xE9dito Inicial y Planes de Financiamiento! Soporte T\\xE9cnico Postventa. \\xA1Cotice ahora! Equipos Honeywell y Zebra.\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\"\n  }), ___EmotionJSX(\"link\", {\n    rel: \"icon\",\n    type: \"image/png\",\n    sizes: \"160x99\",\n    href: \"https://i.ibb.co/42K3Zdn/logo-copia.png\"\n  }), ___EmotionJSX(\"link\", {\n    rel: \"preconnect\",\n    href: \"https://fonts.gstatic.com\"\n  }), ___EmotionJSX(\"link\", {\n    href: \"https://fonts.googleapis.com/css2?family=Raleway&display=swap\",\n    rel: \"stylesheet\"\n  }), ___EmotionJSX(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: \"(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start': new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\\n                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\\n                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\\n                })(window,document,'script','dataLayer','GTM-KXHWDC2');\"\n    }\n  }), ___EmotionJSX(\"script\", {\n    async: true,\n    src: \"https://www.googletagmanager.com/gtag/js?id=AW-728249895\"\n  }), ___EmotionJSX(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: \"window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'AW-728249895');\"\n    }\n  })), ___EmotionJSX(\"noscript\", {\n    dangerouslySetInnerHTML: {\n      __html: \"<iframe src=\\\"https://www.googletagmanager.com/ns.html?id=GTM-KXHWDC2\\\"\\n          height=\\\"0\\\" width=\\\"0\\\" style=\\\"display:none;visibility:hidden\\\"></iframe>\"\n    }\n  }), ___EmotionJSX(Header, null), ___EmotionJSX(VentaL, null), ___EmotionJSX(ContenedorFlexa, null, ___EmotionJSX(IconosVentaGeneral, {\n    unoi: \"/img/Contamos con lectores 1D y 2D.webp\",\n    unom: \"Contamos con lectores 1D y 2D.\",\n    dosm: \"\\xBFNecesita dar mantenimiento a sus lectores?.\",\n    tresm: \"\\xBFNecesita un plan de renta para lectores?.\",\n    luno: \"reparacion-de-lectores-de-codigos-de-barras\",\n    ldos: \"renta-de-lectores-de-codigos-de-barras\"\n  }), ___EmotionJSX(Form, null)), ___EmotionJSX(ContenedorBotona, null, ___EmotionJSX(BotonesMovilCinco, {\n    muno: \"\\xBFNecesita dar mantenimiento a sus lectores?.\",\n    mdos: \"\\xA1Conozca nuestro servicio de Reparaci\\xF3n!\",\n    mtres: \"\\xBFNecesita un plan de renta para lectores?.\",\n    mcuatro: \"\\xA1Conozca nuestro servicio de Renta!\",\n    mcinco: \"Adquiera los accesorios y consumibles que necesita.\",\n    mseis: \"\\xA1Cont\\xE1ctenos!\",\n    msiete: \"Ponemos a su disposici\\xF3n la soluci\\xF3n \\\"DSD\\\" para venta en ruta.\",\n    mocho: \"\\xA1Con\\xF3zcalo!\",\n    mnueve: \"Contamos con fundas dise\\xF1adas a la medida para cumplir con sus necesidades.\",\n    mdiez: \"\\xA1Adquiera la protecci\\xF3n que sus equipos necesitan!\",\n    luno: \"reparacion-de-lectores-de-codigos-de-barras\",\n    ldos: \"renta-de-lectores-de-codigos-de-barras\",\n    ltres: \"venta-de-accesorios-y-consumibles\",\n    lcuatro: \"DSD-venta-en-ruta\",\n    lcinco: \"venta-fundas-handheld-impresora-portatil\"\n  })), ___EmotionJSX(ContenedorFlex, null, ___EmotionJSX(Ubicacion, null), ___EmotionJSX(Servicios, null)), ___EmotionJSX(MapaDuns, null), ___EmotionJSX(Footer, null), ___EmotionJSX(Modal, {\n    show: abiertoAnuncios,\n    onHide: cerrarModal,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura ppp \"\n  }, ___EmotionJSX(Modal.Body, null, ___EmotionJSX(Link, {\n    href: \"/renta-de-lectores-de-codigos-de-barras\"\n  }, ___EmotionJSX(ImgModal, {\n    src: \"img/RVlectores.webp\",\n    alt: \"enlace renta venta de lectores\"\n  }))), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModal\n  }, \"Cerrar\"))));\n};\n\nexport default VLectores;","map":null,"metadata":{},"sourceType":"module"}