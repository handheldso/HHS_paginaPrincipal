{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState } from \"react\";\nimport Link from \"next/link\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst IAyC = () => {\n  const Contenedor = _styled(\"div\", true ? {\n    target: \"eieai797\"\n  } : {\n    target: \"eieai797\",\n    label: \"Contenedor\"\n  })(true ? {\n    name: \"99fmuj\",\n    styles: \"width:100%;display:grid;grid-template-columns:50% 50%\"\n  } : {\n    name: \"99fmuj\",\n    styles: \"width:100%;display:grid;grid-template-columns:50% 50%\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const ContenedorD = _styled(\"div\", true ? {\n    target: \"eieai796\"\n  } : {\n    target: \"eieai796\",\n    label: \"ContenedorD\"\n  })(true ? {\n    name: \"1akbdyk\",\n    styles: \"width:100%;margin-top:4rem;@media (max-width: 995px){display:none;}\"\n  } : {\n    name: \"1akbdyk\",\n    styles: \"width:100%;margin-top:4rem;@media (max-width: 995px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const IconoDiv = _styled(\"div\", true ? {\n    target: \"eieai795\"\n  } : {\n    target: \"eieai795\",\n    label: \"IconoDiv\"\n  })(true ? {\n    name: \"desyct\",\n    styles: \"width:60%;text-align:center;margin:0px auto\"\n  } : {\n    name: \"desyct\",\n    styles: \"width:60%;text-align:center;margin:0px auto\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Icono = _styled(\"img\", true ? {\n    target: \"eieai794\"\n  } : {\n    target: \"eieai794\",\n    label: \"Icono\"\n  })(true ? {\n    name: \"17792o1\",\n    styles: \"width:70%;cursor:pointer\"\n  } : {\n    name: \"17792o1\",\n    styles: \"width:70%;cursor:pointer\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNFUlxcRGVza3RvcFxcbnVldm8gY29kaWdvIEhIU1xcY29tcG9uZW50c1xccGVzdGFuYXNcXEljb25vc0FjY2Vzb3Jpb3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkIwQiIsImZpbGUiOiJDOlxcVXNlcnNcXFVTRVJcXERlc2t0b3BcXG51ZXZvIGNvZGlnbyBISFNcXGNvbXBvbmVudHNcXHBlc3RhbmFzXFxJY29ub3NBY2Nlc29yaW9zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcbmltcG9ydCBMaW5rIGZyb20gXCJuZXh0L2xpbmtcIjtcbmltcG9ydCB7IE1vZGFsLCBCdXR0b24gfSBmcm9tIFwicmVhY3QtYm9vdHN0cmFwXCI7XG5cbmNvbnN0IElBeUMgPSAoKSA9PiB7XG4gIGNvbnN0IENvbnRlbmVkb3IgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MCUgNTAlO1xuICBgO1xuXG4gIGNvbnN0IENvbnRlbmVkb3JEID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiA0cmVtO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5NXB4KSB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBJY29ub0RpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDYwJTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwcHggYXV0bztcbiAgYDtcblxuICBjb25zdCBJY29ubyA9IHN0eWxlZC5pbWdgXG4gICAgd2lkdGg6IDcwJTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIGA7XG5cbiAgY29uc3QgVGV4dERpdiA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDgwJTtcbiAgICBtYXJnaW46IDBweCBhdXRvO1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE0MDBweCkge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuICBgO1xuXG4gIGNvbnN0IFRleHQgPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE5cHg7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogODk5cHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNjk5cHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDUwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgT3ZhVGV4RGl2ID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNzAlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDc2YzA7XG4gICAgYm9yZGVyLXJhZGl1czogNHJlbTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA4OTlweCkge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgT3ZhVGV4ID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxNTAwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTlweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTM1NXB4KSB7XG4gICAgICBmb250LXNpemU6IDE3cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEyNTBweCkge1xuICAgICAgZm9udC1zaXplOiAxNXB4O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBbYWJpZXJ0b01vZGFsLCBjYW1iaWFyQWJpZXJ0b01vZGFsXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2FiaWVydG9Nb2RhbEQsIGNhbWJpYXJBYmllcnRvTW9kYWxEXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2FiaWVydG9Nb2RhbFQsIGNhbWJpYXJBYmllcnRvTW9kYWxUXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2FiaWVydG9Nb2RhbEMsIGNhbWJpYXJBYmllcnRvTW9kYWxDXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2FiaWVydG9Nb2RhbENJLCBjYW1iaWFyQWJpZXJ0b01vZGFsQ0ldID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbYWJpZXJ0b01vZGFsUywgY2FtYmlhckFiaWVydG9Nb2RhbFNdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGFicmlyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9Nb2RhbCh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBjZXJyYXJNb2RhbCA9ICgpID0+IHtcbiAgICBjYW1iaWFyQWJpZXJ0b01vZGFsKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCBhYnJpck1vZGFsRCA9ICgpID0+IHtcbiAgICBjYW1iaWFyQWJpZXJ0b01vZGFsRCh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBjZXJyYXJNb2RhbEQgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9Nb2RhbEQoZmFsc2UpO1xuICB9O1xuXG4gIGNvbnN0IGFicmlyTW9kYWxUID0gKCkgPT4ge1xuICAgIGNhbWJpYXJBYmllcnRvTW9kYWxUKHRydWUpO1xuICB9O1xuXG4gIGNvbnN0IGNlcnJhck1vZGFsVCA9ICgpID0+IHtcbiAgICBjYW1iaWFyQWJpZXJ0b01vZGFsVChmYWxzZSk7XG4gIH07XG5cbiAgY29uc3QgYWJyaXJNb2RhbEMgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9Nb2RhbEModHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgY2VycmFyTW9kYWxDID0gKCkgPT4ge1xuICAgIGNhbWJpYXJBYmllcnRvTW9kYWxDKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCBhYnJpck1vZGFsQ0kgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9Nb2RhbENJKHRydWUpO1xuICB9O1xuXG4gIGNvbnN0IGNlcnJhck1vZGFsQ0kgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9Nb2RhbENJKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCBhYnJpck1vZGFsUyA9ICgpID0+IHtcbiAgICBjYW1iaWFyQWJpZXJ0b01vZGFsUyh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBjZXJyYXJNb2RhbFMgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9Nb2RhbFMoZmFsc2UpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3Ryb1wiPlxuICAgICAgICA8Q29udGVuZWRvcj5cbiAgICAgICAgICA8SWNvbm9EaXYgY2xhc3NOYW1lPVwiaWNvblwiPlxuICAgICAgICAgICAgPEljb25vXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RpaGF3cXJudC9pbWFnZS91cGxvYWQvdjE2MjU3NjI0NTgvTnVldm9zJTIwSWNvbm9zL01lam9yZXNfcHJlY2lvc19hY29yZGVzX2Ffc3VfZWNvbm9tJUMzJUFEYV94NXg2emwucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiTWVqb3JlcyBwcmVjaW9zXCJcbiAgICAgICAgICAgICAgb25DbGljaz17YWJyaXJNb2RhbH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8VGV4dERpdj5cbiAgICAgICAgICAgICAgPFRleHQ+TG9zIG1lam9yZXMgcHJlY2lvcyBkZWwgbWVyY2Fkby48L1RleHQ+XG4gICAgICAgICAgICA8L1RleHREaXY+XG4gICAgICAgICAgPC9JY29ub0Rpdj5cbiAgICAgICAgICA8SWNvbm9EaXYgY2xhc3NOYW1lPVwiaVwiPlxuICAgICAgICAgICAgPEljb25vXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RpaGF3cXJudC9pbWFnZS91cGxvYWQvdjE2MjU3NjI0NTkvTnVldm9zJTIwSWNvbm9zL1NlZ3VpbWllbnRvX2hvbWJyb19jb25faG9tYnJvX2R1cmFudGVfcHJ1ZWJhc19lX2luc3RhbGFjaW9uZXNfY3pxZXppLnBuZ1wiXG4gICAgICAgICAgICAgIGFsdD1cIlBydWViYXMgZSBpbnN0YWxhY2lvbmVzIGRlIEhhbmQgSGVsZHMgSW1wcmVzb3JhcyBkZSBFdGlxdWV0YXMgeSBMZWN0b3JlcyBkZSBDb2RpZ28gZGUgQmFycmFzXCJcbiAgICAgICAgICAgICAgb25DbGljaz17YWJyaXJNb2RhbER9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFRleHREaXY+XG4gICAgICAgICAgICAgIDxUZXh0PlxuICAgICAgICAgICAgICAgIFNlZ3VpbWllbnRvIGhvbWJybyBjb24gaG9tYnJvIGR1cmFudGUgcHJ1ZWJhcyBlIGltcGxlbWVudGFjacOzbi5cbiAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPC9UZXh0RGl2PlxuICAgICAgICAgIDwvSWNvbm9EaXY+XG4gICAgICAgICAgPEljb25vRGl2IGNsYXNzTmFtZT1cImljb24gdG9wXCI+XG4gICAgICAgICAgICA8SWNvbm9cbiAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGloYXdxcm50L2ltYWdlL3VwbG9hZC92MTYyNTc2MjQ1Ny9OdWV2b3MlMjBJY29ub3MvQXNlc29yJUMzJUFEYV9jb21lcmNpYWxfeV90JUMzJUE5Y25pY2FfcHJldmlhLl91Y2IxMmkucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiQXNlc29yw61hIGNvbWVyY2lhbCB5IHTDqWNuaWNhXCJcbiAgICAgICAgICAgICAgb25DbGljaz17YWJyaXJNb2RhbFR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFRleHREaXY+XG4gICAgICAgICAgICAgIDxUZXh0PkFzZXNvcsOtYSBjb21lcmNpYWwgeSB0w6ljbmljYSBwcmV2aWEuPC9UZXh0PlxuICAgICAgICAgICAgPC9UZXh0RGl2PlxuICAgICAgICAgIDwvSWNvbm9EaXY+XG4gICAgICAgICAgPEljb25vRGl2IGNsYXNzTmFtZT1cInRvcCBpXCI+XG4gICAgICAgICAgICA8SWNvbm9cbiAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGloYXdxcm50L2ltYWdlL3VwbG9hZC92MTYyNTc2MjQ1Ny9OdWV2b3MlMjBJY29ub3MvQWNjZXNvcmlvc195X2NvbnN1bWlibGVzX3ByZWNpc29zX3BhcmFfY2FkYV9lcXVpcG9feV9uZWNlc2lkYWRfeWd2cjNoLnBuZ1wiXG4gICAgICAgICAgICAgIGFsdD1cIkFjY2Vzb3Jpb3MgeSBDb25zdW1pYmxlcyBIYW5kIEhlbGRzIEltcHJlc29yYXMgZGUgRXRpcXVldGFzIHkgTGVjdG9yZXMgZGUgQ29kaWdvIGRlIEJhcnJhc1wiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e2FicmlyTW9kYWxDfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxUZXh0RGl2PlxuICAgICAgICAgICAgICA8VGV4dD5cbiAgICAgICAgICAgICAgICBBY2Nlc29yaW9zIHkgY29uc3VtaWJsZXMgcGFyYSBjYWRhIGVxdWlwbyB5IG5lY2VzaWRhZC5cbiAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPC9UZXh0RGl2PlxuICAgICAgICAgIDwvSWNvbm9EaXY+XG4gICAgICAgICAgPEljb25vRGl2IGNsYXNzTmFtZT1cImljb24gdG9wXCI+XG4gICAgICAgICAgICA8SWNvbm9cbiAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGloYXdxcm50L2ltYWdlL3VwbG9hZC92MTYyNTc2MjQ1OS9OdWV2b3MlMjBJY29ub3MvU29wb3J0ZV90JUMzJUE5Y25pY29fcG9zdHZlbnRhLl95dmppaGoucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiU29wb3J0ZSBUZWNuaWNvIFBvc3RWZW50YVwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e2FicmlyTW9kYWxDSX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8VGV4dERpdj5cbiAgICAgICAgICAgICAgPFRleHQ+XG4gICAgICAgICAgICAgICAgU29wb3J0ZSB0w6ljbmljb1xuICAgICAgICAgICAgICAgIDxiciAvPiBwb3N0dmVudGEuXG4gICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgIDwvVGV4dERpdj5cbiAgICAgICAgICA8L0ljb25vRGl2PlxuICAgICAgICAgIDxJY29ub0RpdiBjbGFzc05hbWU9XCJ0b3AgaVwiPlxuICAgICAgICAgICAgPEljb25vXG4gICAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RpaGF3cXJudC9pbWFnZS91cGxvYWQvdjE2MjY0NjE2ODkvTnVldm9zJTIwSWNvbm9zL0NvcGlhX2RlX0lDT05PU19XRUJfMl9sd3VrZXAucG5nXCJcbiAgICAgICAgICAgICAgYWx0PVwiRW52w61vIGdyYXRpc1wiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e2FicmlyTW9kYWxTfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxUZXh0RGl2PlxuICAgICAgICAgICAgICA8VGV4dD5cbiAgICAgICAgICAgICAgICBFbnbDrW8gZ3JhdGlzXG4gICAgICAgICAgICAgICAgPGJyIC8+IGEgdG9kYSBsYSBSZXDDumJsaWNhIE1leGljYW5hLlxuICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICA8L1RleHREaXY+XG4gICAgICAgICAgPC9JY29ub0Rpdj5cbiAgICAgICAgPC9Db250ZW5lZG9yPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkRpdlJcIj5cbiAgICAgICAgICA8Q29udGVuZWRvckQ+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNlblwiPlxuICAgICAgICAgICAgICA8TGluayBocmVmPVwiLyNyZW50YVwiPlxuICAgICAgICAgICAgICAgIDxPdmFUZXhEaXYgY2xhc3NOYW1lPVwiYlwiPlxuICAgICAgICAgICAgICAgICAgPE92YVRleD5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiblwiPlxuICAgICAgICAgICAgICAgICAgICAgIMKhQ29ub3pjYSBudWVzdHJvIHNlcnZpY2lvIGRlIFJlbnRhIVxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8L092YVRleD5cbiAgICAgICAgICAgICAgICA8L092YVRleERpdj5cbiAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICA8TGluayBocmVmPVwiLyNyZXBhcmFjaW9uXCI+XG4gICAgICAgICAgICAgICAgPE92YVRleERpdiBjbGFzc05hbWU9XCJiXCI+XG4gICAgICAgICAgICAgICAgICA8T3ZhVGV4PlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgwqFDb25vemNhIG51ZXN0cm8gc2VydmljaW8gZGUgUmVwYXJhY2nDs24hXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDwvT3ZhVGV4PlxuICAgICAgICAgICAgICAgIDwvT3ZhVGV4RGl2PlxuICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvI3ZlbnRhXCI+XG4gICAgICAgICAgICAgICAgPE92YVRleERpdiBjbGFzc05hbWU9XCJiXCI+XG4gICAgICAgICAgICAgICAgICA8T3ZhVGV4PlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgwqFDb25vemNhIG51ZXN0cm8gc2VydmljaW8gZGUgVmVudGEhXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDwvT3ZhVGV4PlxuICAgICAgICAgICAgICAgIDwvT3ZhVGV4RGl2PlxuICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvRFNELXZlbnRhLWVuLXJ1dGFcIj5cbiAgICAgICAgICAgICAgICA8T3ZhVGV4RGl2IGNsYXNzTmFtZT1cImJcIj5cbiAgICAgICAgICAgICAgICAgIDxPdmFUZXg+XG4gICAgICAgICAgICAgICAgICAgIFBvbmVtb3MgYSBzdSBkaXNwb3NpY2nDs24gbGEgc29sdWNpw7NuIFwiRFNEXCIgcGFyYSB2ZW50YSBlblxuICAgICAgICAgICAgICAgICAgICBydXRhLlxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiblwiPsKhQ29uw7N6Y2FsbyE8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8L092YVRleD5cbiAgICAgICAgICAgICAgICA8L092YVRleERpdj5cbiAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICA8TGluayBocmVmPVwiL2ltcHJlc2lvbi1jcmVkZW5jaWFsZXMtdGFyamV0YXMtZ2FmZXRlcy1wdmNcIj5cbiAgICAgICAgICAgICAgICA8T3ZhVGV4RGl2IGNsYXNzTmFtZT1cImJcIj5cbiAgICAgICAgICAgICAgICAgIDxPdmFUZXg+XG4gICAgICAgICAgICAgICAgICBDb25vemNhIG51ZXN0cm8gc2VydmljaW8gZGUgaW1wcmVzaW9uIGRlIGNyZWRlbmNpYWxlc1xuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiblwiPsKhQ29uw7N6Y2FsbyE8L3NwYW4+XG4gICAgICAgICAgICAgICAgICA8L092YVRleD5cbiAgICAgICAgICAgICAgICA8L092YVRleERpdj5cbiAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICA8TGluayBocmVmPVwiL3ZlbnRhLWZ1bmRhcy1oYW5kaGVsZC1pbXByZXNvcmEtcG9ydGF0aWxcIj5cbiAgICAgICAgICAgICAgICA8T3ZhVGV4RGl2PlxuICAgICAgICAgICAgICAgICAgPE92YVRleD5cbiAgICAgICAgICAgICAgICAgICAgQ29udGFtb3MgY29uIGZ1bmRhcyBkaXNlw7FhZGFzIGEgbGEgbWVkaWRhIHBhcmEgY3VtcGxpciBjb25cbiAgICAgICAgICAgICAgICAgICAgc3VzIG5lY2VzaWRhZGVzLlxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiblwiPlxuICAgICAgICAgICAgICAgICAgICAgIMKhQWRxdWllcmEgbGEgcHJvdGVjY2nDs24gcXVlIHN1cyBlcXVpcG9zIG5lY2VzaXRhbiFcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgPC9PdmFUZXg+XG4gICAgICAgICAgICAgICAgPC9PdmFUZXhEaXY+XG4gICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvQ29udGVuZWRvckQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxNb2RhbFxuICAgICAgICBzaG93PXthYmllcnRvTW9kYWx9XG4gICAgICAgIG9uSGlkZT17Y2VycmFyTW9kYWx9XG4gICAgICAgIGtleWJvYXJkPXtmYWxzZX1cbiAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgY2xhc3NOYW1lPVwibW9kYWwtYWx0dXJhXCJcbiAgICAgID5cbiAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cbiAgICAgICAgICA8TW9kYWwuVGl0bGU+TG9zIG1lam9yZXMgcHJlY2lvcyBkZWwgbWVyY2Fkby48L01vZGFsLlRpdGxlPlxuICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgRW4gSGFuZCBIZWxkIFNvbHV0aW9ucywgbm9zIGNvbXByb21ldGVtb3MgYSBicmluZGFybGUgbG9zIG1lam9yZXNcbiAgICAgICAgICBwcmVjaW9zLCBwYXJhIG5vc290cm9zIGVzIGltcG9ydGFudGUgcXVlIGN1ZW50ZSBjb24gbG9zIGVxdWlwb3NcbiAgICAgICAgICByZXF1ZXJpZG9zIGEgdW4gcHJlY2lvIGFjY2VzaWJsZS5cbiAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImxpZ2h0XCIgb25DbGljaz17Y2VycmFyTW9kYWx9PlxuICAgICAgICAgICAgQ2VycmFyXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgICAgPC9Nb2RhbD5cbiAgICAgIDxNb2RhbFxuICAgICAgICBzaG93PXthYmllcnRvTW9kYWxEfVxuICAgICAgICBvbkhpZGU9e2NlcnJhck1vZGFsRH1cbiAgICAgICAga2V5Ym9hcmQ9e2ZhbHNlfVxuICAgICAgICBzaXplPVwibGdcIlxuICAgICAgICBjbGFzc05hbWU9XCJtb2RhbC1hbHR1cmFcIlxuICAgICAgPlxuICAgICAgICA8TW9kYWwuSGVhZGVyIGNsb3NlQnV0dG9uPlxuICAgICAgICAgIDxNb2RhbC5UaXRsZT5cbiAgICAgICAgICAgIFNlZ3VpbWllbnRvIGhvbWJybyBjb24gaG9tYnJvIGR1cmFudGUgcHJ1ZWJhcyBlIGltcGxlbWVudGFjacOzbi5cbiAgICAgICAgICA8L01vZGFsLlRpdGxlPlxuICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgTm9zIGNvbXByb21ldGVtb3MgYSBicmluZGFybGUgYXNpc3RlbmNpYSB0w6ljbmljYSB5IGNvbWVyY2lhbCBzaW4gY29zdG9cbiAgICAgICAgICBlbiB0b2RvIG1vbWVudG8sIHBhcmEgcXVlIHB1ZWRhIHJlYWxpemFyIGxhcyBwcnVlYmFzIGNvcnJlc3BvbmRpZW50ZXNcbiAgICAgICAgICB5IGxhIGltcGxlbWVudGFjacOzbiBkZSBjYWRhIGVxdWlwbyBzZWEgYWRlY3VhZGEgYSBzdXMgbmVjZXNpZGFkZXMuXG4gICAgICAgIDwvTW9kYWwuQm9keT5cbiAgICAgICAgPE1vZGFsLkZvb3Rlcj5cbiAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJsaWdodFwiIG9uQ2xpY2s9e2NlcnJhck1vZGFsRH0+XG4gICAgICAgICAgICBDZXJyYXJcbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICA8L01vZGFsPlxuICAgICAgPE1vZGFsXG4gICAgICAgIHNob3c9e2FiaWVydG9Nb2RhbFR9XG4gICAgICAgIG9uSGlkZT17Y2VycmFyTW9kYWxUfVxuICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgIHNpemU9XCJsZ1wiXG4gICAgICAgIGNsYXNzTmFtZT1cIm1vZGFsLWFsdHVyYVwiXG4gICAgICA+XG4gICAgICAgIDxNb2RhbC5IZWFkZXIgY2xvc2VCdXR0b24+XG4gICAgICAgICAgPE1vZGFsLlRpdGxlPkFzZXNvcsOtYSBjb21lcmNpYWwgeSB0w6ljbmljYSBwcmV2aWEuPC9Nb2RhbC5UaXRsZT5cbiAgICAgICAgPC9Nb2RhbC5IZWFkZXI+XG4gICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgIENvbnRhbW9zIGNvbiBhc2Vzb3LDrWEgY29tZXJjaWFsIHkgdMOpY25pY2EgcGVyc29uYWxpemFkYSBlbiB0b2RvXG4gICAgICAgICAgbW9tZW50bywgcGFyYSBhcG95YXJsbyBlbiBsYSBlbGVjY2nDs24gZGVsIGVxdWlwbyBxdWUgbWVqb3Igc2UgYWRhcHRlIGFcbiAgICAgICAgICBzdXMgbmVjZXNpZGFkZXMgeSBwcmVzdXB1ZXN0by4gTnVlc3Ryb3MgYXNlc29yZXMgZSBpbmdlbmllcm9zIGxlXG4gICAgICAgICAgYnJpbmRhcsOhbiB1bmEgYXNpc3RlbmNpYSBpbm1lZGlhdGEgc2luIGNvc3RvIGFkaWNpb25hbCB5IHJlc29sdmVyw6FuXG4gICAgICAgICAgdG9kYXMgc3VzIGR1ZGFzLlxuICAgICAgICA8L01vZGFsLkJvZHk+XG4gICAgICAgIDxNb2RhbC5Gb290ZXI+XG4gICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBvbkNsaWNrPXtjZXJyYXJNb2RhbFR9PlxuICAgICAgICAgICAgQ2VycmFyXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgICAgPC9Nb2RhbD5cbiAgICAgIDxNb2RhbFxuICAgICAgICBzaG93PXthYmllcnRvTW9kYWxDfVxuICAgICAgICBvbkhpZGU9e2NlcnJhck1vZGFsQ31cbiAgICAgICAga2V5Ym9hcmQ9e2ZhbHNlfVxuICAgICAgICBzaXplPVwibGdcIlxuICAgICAgICBjbGFzc05hbWU9XCJtb2RhbC1hbHR1cmFcIlxuICAgICAgPlxuICAgICAgICA8TW9kYWwuSGVhZGVyIGNsb3NlQnV0dG9uPlxuICAgICAgICAgIDxNb2RhbC5UaXRsZT5cbiAgICAgICAgICAgIEFjY2Vzb3Jpb3MgeSBjb25zdW1pYmxlcyBwYXJhIGNhZGEgZXF1aXBvIHkgbmVjZXNpZGFkLlxuICAgICAgICAgIDwvTW9kYWwuVGl0bGU+XG4gICAgICAgIDwvTW9kYWwuSGVhZGVyPlxuICAgICAgICA8TW9kYWwuQm9keT5cbiAgICAgICAgICBQb25lbW9zIGEgc3UgZGlzcG9zaWNpw7NuIGxvcyBjb21wbGVtZW50b3MgYWRlY3VhZG9zIHF1ZSBsZSBwZXJtaXRpcsOhblxuICAgICAgICAgIGEgc3VzIGVxdWlwb3Mgb3BlcmFyIGVuIGxhcyBtZWpvcmVzIGNvbmRpY2lvbmVzLiBDb250YW1vcyBjb246XG4gICAgICAgICAgYmF0ZXLDrWFzLCBmdW5kYXMsIG1hbmdvcyBwYXJhIFBEQSwgZnVlbnRlcyBkZSBjYXJnYSwgc3R5bHVzLCBjYXJjYXNhcyxcbiAgICAgICAgICByaWJib25zLCByb2xsb3MgZGUgZXRpcXVldGFzLCBjb3JyZWFzIHkgbcOhcy4gVG9kbyBsbyBxdWUgdXN0ZWRcbiAgICAgICAgICBuZWNlc2l0YSBwYXJhIHN1cyBoYW5kaGVsZHMsIGltcHJlc29yYXMgeSBsZWN0b3JlcyBkZSBjw7NkaWdvcy5cbiAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImxpZ2h0XCIgb25DbGljaz17Y2VycmFyTW9kYWxDfT5cbiAgICAgICAgICAgIENlcnJhclxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L01vZGFsLkZvb3Rlcj5cbiAgICAgIDwvTW9kYWw+XG4gICAgICA8TW9kYWxcbiAgICAgICAgc2hvdz17YWJpZXJ0b01vZGFsQ0l9XG4gICAgICAgIG9uSGlkZT17Y2VycmFyTW9kYWxDSX1cbiAgICAgICAga2V5Ym9hcmQ9e2ZhbHNlfVxuICAgICAgICBzaXplPVwibGdcIlxuICAgICAgICBjbGFzc05hbWU9XCJtb2RhbC1hbHR1cmFcIlxuICAgICAgPlxuICAgICAgICA8TW9kYWwuSGVhZGVyIGNsb3NlQnV0dG9uPlxuICAgICAgICAgIDxNb2RhbC5UaXRsZT5Tb3BvcnRlIHTDqWNuaWNvIHBvc3R2ZW50YS48L01vZGFsLlRpdGxlPlxuICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgRW4gdG9kbyBtb21lbnRvIGNvbnRhcsOhIGNvbiB1biB0w6ljbmljbyBhIHN1IGRpc3Bvc2ljacOzbiBwb3IgdsOtYVxuICAgICAgICAgIHRlbGVmw7NuaWNhLCBhw7puIGRlc3B1w6lzIGRlIGhhYmVyIGNvbmNsdWlkbyBsYSBpbXBsZW1lbnRhY2nDs24gZGUgbG9zXG4gICAgICAgICAgZXF1aXBvcyB5IGVsIHByb2Nlc28gZGUgY29tcHJhLCBkZSBlc3RhIG1hbmVyYSBwb2RlciBhc2Vzb3JhcmxvIGFudGVcbiAgICAgICAgICBjdWFscXVpZXIgZHVkYS5cbiAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImxpZ2h0XCIgb25DbGljaz17Y2VycmFyTW9kYWxDSX0+XG4gICAgICAgICAgICBDZXJyYXJcbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICA8L01vZGFsPlxuICAgICAgPE1vZGFsXG4gICAgICAgIHNob3c9e2FiaWVydG9Nb2RhbFN9XG4gICAgICAgIG9uSGlkZT17Y2VycmFyTW9kYWxTfVxuICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgIHNpemU9XCJsZ1wiXG4gICAgICAgIGNsYXNzTmFtZT1cIm1vZGFsLWFsdHVyYVwiXG4gICAgICA+XG4gICAgICAgIDxNb2RhbC5IZWFkZXIgY2xvc2VCdXR0b24+XG4gICAgICAgICAgPE1vZGFsLlRpdGxlPkVudsOtbyBncmF0aXMgYSB0b2RhIGxhIFJlcMO6YmxpY2EgTWV4aWNhbmEuPC9Nb2RhbC5UaXRsZT5cbiAgICAgICAgPC9Nb2RhbC5IZWFkZXI+XG4gICAgICAgIDxNb2RhbC5Cb2R5PlxuICAgICAgICAgIENvbnRhbW9zIGNvbiBlbnbDrW8gZ3JhdGlzIGEgdG9kYSBsYSBSZXDDumJsaWNhIE1leGljYW5hLCBub3NvdHJvcyBsZVxuICAgICAgICAgIG1hbmRhbW9zIHNpbiBjb3N0byBhbGd1bm8sIGxvcyBlcXVpcG9zIHF1ZSB2YXlhIGEgcmVudGFyLFxuICAgICAgICAgIGRpYWdub3N0aWNhciwgcmVwYXJhciBvIGFkcXVpcmlyLlxuICAgICAgICA8L01vZGFsLkJvZHk+XG4gICAgICAgIDxNb2RhbC5Gb290ZXI+XG4gICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBvbkNsaWNrPXtjZXJyYXJNb2RhbFN9PlxuICAgICAgICAgICAgQ2VycmFyXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgICAgPC9Nb2RhbD5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IElBeUM7XG4iXX0= */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TextDiv = _styled(\"div\", true ? {\n    target: \"eieai793\"\n  } : {\n    target: \"eieai793\",\n    label: \"TextDiv\"\n  })(true ? {\n    name: \"q68gb5\",\n    styles: \"width:80%;margin:0px auto;@media (max-width: 1400px){width:100%;}\"\n  } : {\n    name: \"q68gb5\",\n    styles: \"width:80%;margin:0px auto;@media (max-width: 1400px){width:100%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Text = _styled(\"p\", true ? {\n    target: \"eieai792\"\n  } : {\n    target: \"eieai792\",\n    label: \"Text\"\n  })(true ? {\n    name: \"1i3yt9k\",\n    styles: \"font-size:19px;font-weight:bold;@media (max-width: 899px){font-size:14px;}@media (max-width: 699px){font-size:12px;}@media (max-width: 450px){font-size:10px;}\"\n  } : {\n    name: \"1i3yt9k\",\n    styles: \"font-size:19px;font-weight:bold;@media (max-width: 899px){font-size:14px;}@media (max-width: 699px){font-size:12px;}@media (max-width: 450px){font-size:10px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const OvaTexDiv = _styled(\"div\", true ? {\n    target: \"eieai791\"\n  } : {\n    target: \"eieai791\",\n    label: \"OvaTexDiv\"\n  })(true ? {\n    name: \"y3op85\",\n    styles: \"width:70%;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\"\n  } : {\n    name: \"y3op85\",\n    styles: \"width:70%;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const OvaTex = _styled(\"p\", true ? {\n    target: \"eieai790\"\n  } : {\n    target: \"eieai790\",\n    label: \"OvaTex\"\n  })(true ? {\n    name: \"1i04rfa\",\n    styles: \"font-size:20px;padding-top:20px;padding-bottom:10px;color:white;@media (max-width: 1500px){font-size:19px;}@media (max-width: 1355px){font-size:17px;}@media (max-width: 1250px){font-size:15px;}\"\n  } : {\n    name: \"1i04rfa\",\n    styles: \"font-size:20px;padding-top:20px;padding-bottom:10px;color:white;@media (max-width: 1500px){font-size:19px;}@media (max-width: 1355px){font-size:17px;}@media (max-width: 1250px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const {\n    0: abiertoModal,\n    1: cambiarAbiertoModal\n  } = useState(false);\n  const {\n    0: abiertoModalD,\n    1: cambiarAbiertoModalD\n  } = useState(false);\n  const {\n    0: abiertoModalT,\n    1: cambiarAbiertoModalT\n  } = useState(false);\n  const {\n    0: abiertoModalC,\n    1: cambiarAbiertoModalC\n  } = useState(false);\n  const {\n    0: abiertoModalCI,\n    1: cambiarAbiertoModalCI\n  } = useState(false);\n  const {\n    0: abiertoModalS,\n    1: cambiarAbiertoModalS\n  } = useState(false);\n\n  const abrirModal = () => {\n    cambiarAbiertoModal(true);\n  };\n\n  const cerrarModal = () => {\n    cambiarAbiertoModal(false);\n  };\n\n  const abrirModalD = () => {\n    cambiarAbiertoModalD(true);\n  };\n\n  const cerrarModalD = () => {\n    cambiarAbiertoModalD(false);\n  };\n\n  const abrirModalT = () => {\n    cambiarAbiertoModalT(true);\n  };\n\n  const cerrarModalT = () => {\n    cambiarAbiertoModalT(false);\n  };\n\n  const abrirModalC = () => {\n    cambiarAbiertoModalC(true);\n  };\n\n  const cerrarModalC = () => {\n    cambiarAbiertoModalC(false);\n  };\n\n  const abrirModalCI = () => {\n    cambiarAbiertoModalCI(true);\n  };\n\n  const cerrarModalCI = () => {\n    cambiarAbiertoModalCI(false);\n  };\n\n  const abrirModalS = () => {\n    cambiarAbiertoModalS(true);\n  };\n\n  const cerrarModalS = () => {\n    cambiarAbiertoModalS(false);\n  };\n\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(\"div\", {\n    className: \"otro\"\n  }, ___EmotionJSX(Contenedor, null, ___EmotionJSX(IconoDiv, {\n    className: \"icon\"\n  }, ___EmotionJSX(Icono, {\n    src: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1625762458/Nuevos%20Iconos/Mejores_precios_acordes_a_su_econom%C3%ADa_x5x6zl.png\",\n    alt: \"Mejores precios\",\n    onClick: abrirModal\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, \"Los mejores precios del mercado.\"))), ___EmotionJSX(IconoDiv, {\n    className: \"i\"\n  }, ___EmotionJSX(Icono, {\n    src: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1625762459/Nuevos%20Iconos/Seguimiento_hombro_con_hombro_durante_pruebas_e_instalaciones_czqezi.png\",\n    alt: \"Pruebas e instalaciones de Hand Helds Impresoras de Etiquetas y Lectores de Codigo de Barras\",\n    onClick: abrirModalD\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, \"Seguimiento hombro con hombro durante pruebas e implementaci\\xF3n.\"))), ___EmotionJSX(IconoDiv, {\n    className: \"icon top\"\n  }, ___EmotionJSX(Icono, {\n    src: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1625762457/Nuevos%20Iconos/Asesor%C3%ADa_comercial_y_t%C3%A9cnica_previa._ucb12i.png\",\n    alt: \"Asesor\\xEDa comercial y t\\xE9cnica\",\n    onClick: abrirModalT\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, \"Asesor\\xEDa comercial y t\\xE9cnica previa.\"))), ___EmotionJSX(IconoDiv, {\n    className: \"top i\"\n  }, ___EmotionJSX(Icono, {\n    src: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1625762457/Nuevos%20Iconos/Accesorios_y_consumibles_precisos_para_cada_equipo_y_necesidad_ygvr3h.png\",\n    alt: \"Accesorios y Consumibles Hand Helds Impresoras de Etiquetas y Lectores de Codigo de Barras\",\n    onClick: abrirModalC\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, \"Accesorios y consumibles para cada equipo y necesidad.\"))), ___EmotionJSX(IconoDiv, {\n    className: \"icon top\"\n  }, ___EmotionJSX(Icono, {\n    src: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1625762459/Nuevos%20Iconos/Soporte_t%C3%A9cnico_postventa._yvjihj.png\",\n    alt: \"Soporte Tecnico PostVenta\",\n    onClick: abrirModalCI\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, \"Soporte t\\xE9cnico\", ___EmotionJSX(\"br\", null), \" postventa.\"))), ___EmotionJSX(IconoDiv, {\n    className: \"top i\"\n  }, ___EmotionJSX(Icono, {\n    src: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1626461689/Nuevos%20Iconos/Copia_de_ICONOS_WEB_2_lwukep.png\",\n    alt: \"Env\\xEDo gratis\",\n    onClick: abrirModalS\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, \"Env\\xEDo gratis\", ___EmotionJSX(\"br\", null), \" a toda la Rep\\xFAblica Mexicana.\")))), ___EmotionJSX(\"div\", {\n    className: \"DivR\"\n  }, ___EmotionJSX(ContenedorD, null, ___EmotionJSX(\"div\", {\n    className: \"cen\"\n  }, ___EmotionJSX(Link, {\n    href: \"/#renta\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestro servicio de Renta!\")))), ___EmotionJSX(Link, {\n    href: \"/#reparacion\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestro servicio de Reparaci\\xF3n!\")))), ___EmotionJSX(Link, {\n    href: \"/#venta\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Conozca nuestro servicio de Venta!\")))), ___EmotionJSX(Link, {\n    href: \"/DSD-venta-en-ruta\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, \"Ponemos a su disposici\\xF3n la soluci\\xF3n \\\"DSD\\\" para venta en ruta.\", ___EmotionJSX(\"br\", null), ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Con\\xF3zcalo!\")))), ___EmotionJSX(Link, {\n    href: \"/impresion-credenciales-tarjetas-gafetes-pvc\"\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, \"Conozca nuestro servicio de impresion de credenciales\", ___EmotionJSX(\"br\", null), ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Con\\xF3zcalo!\")))), ___EmotionJSX(Link, {\n    href: \"/venta-fundas-handheld-impresora-portatil\"\n  }, ___EmotionJSX(OvaTexDiv, null, ___EmotionJSX(OvaTex, null, \"Contamos con fundas dise\\xF1adas a la medida para cumplir con sus necesidades.\", ___EmotionJSX(\"br\", null), ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, \"\\xA1Adquiera la protecci\\xF3n que sus equipos necesitan!\")))))))), ___EmotionJSX(Modal, {\n    show: abiertoModal,\n    onHide: cerrarModal,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Los mejores precios del mercado.\")), ___EmotionJSX(Modal.Body, null, \"En Hand Held Solutions, nos comprometemos a brindarle los mejores precios, para nosotros es importante que cuente con los equipos requeridos a un precio accesible.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModal\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalD,\n    onHide: cerrarModalD,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Seguimiento hombro con hombro durante pruebas e implementaci\\xF3n.\")), ___EmotionJSX(Modal.Body, null, \"Nos comprometemos a brindarle asistencia t\\xE9cnica y comercial sin costo en todo momento, para que pueda realizar las pruebas correspondientes y la implementaci\\xF3n de cada equipo sea adecuada a sus necesidades.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalD\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalT,\n    onHide: cerrarModalT,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Asesor\\xEDa comercial y t\\xE9cnica previa.\")), ___EmotionJSX(Modal.Body, null, \"Contamos con asesor\\xEDa comercial y t\\xE9cnica personalizada en todo momento, para apoyarlo en la elecci\\xF3n del equipo que mejor se adapte a sus necesidades y presupuesto. Nuestros asesores e ingenieros le brindar\\xE1n una asistencia inmediata sin costo adicional y resolver\\xE1n todas sus dudas.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalT\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalC,\n    onHide: cerrarModalC,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Accesorios y consumibles para cada equipo y necesidad.\")), ___EmotionJSX(Modal.Body, null, \"Ponemos a su disposici\\xF3n los complementos adecuados que le permitir\\xE1n a sus equipos operar en las mejores condiciones. Contamos con: bater\\xEDas, fundas, mangos para PDA, fuentes de carga, stylus, carcasas, ribbons, rollos de etiquetas, correas y m\\xE1s. Todo lo que usted necesita para sus handhelds, impresoras y lectores de c\\xF3digos.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalC\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalCI,\n    onHide: cerrarModalCI,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Soporte t\\xE9cnico postventa.\")), ___EmotionJSX(Modal.Body, null, \"En todo momento contar\\xE1 con un t\\xE9cnico a su disposici\\xF3n por v\\xEDa telef\\xF3nica, a\\xFAn despu\\xE9s de haber concluido la implementaci\\xF3n de los equipos y el proceso de compra, de esta manera poder asesorarlo ante cualquier duda.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalCI\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalS,\n    onHide: cerrarModalS,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Env\\xEDo gratis a toda la Rep\\xFAblica Mexicana.\")), ___EmotionJSX(Modal.Body, null, \"Contamos con env\\xEDo gratis a toda la Rep\\xFAblica Mexicana, nosotros le mandamos sin costo alguno, los equipos que vaya a rentar, diagnosticar, reparar o adquirir.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalS\n  }, \"Cerrar\"))));\n};\n\nexport default IAyC;","map":null,"metadata":{},"sourceType":"module"}