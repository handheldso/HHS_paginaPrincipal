{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState } from \"react\";\nimport Link from \"next/link\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst IconosRentaGeneral = ({\n  unom,\n  dosm,\n  tresm,\n  cuatrom,\n  cincom,\n  seism,\n  sietem,\n  ochom,\n  nuevem,\n  diezm,\n  oncem,\n  docem,\n  trecem,\n  catorcem,\n  quincem,\n  diezseism,\n  diezsietem,\n  luno,\n  ldos,\n  ltres,\n  lcuatro,\n  lcinco,\n  ecem,\n  ecuatro\n}) => {\n  const Contenedor = _styled(\"div\", true ? {\n    target: \"eev979b9\"\n  } : {\n    target: \"eev979b9\",\n    label: \"Contenedor\"\n  })(true ? {\n    name: \"1ut8sl\",\n    styles: \"width:100%;display:grid;grid-template-columns:50% 50%;@media (max-width: 1700px){margin-top:4rem;}@media (max-width: 995px){margin-top:1rem;}\"\n  } : {\n    name: \"1ut8sl\",\n    styles: \"width:100%;display:grid;grid-template-columns:50% 50%;@media (max-width: 1700px){margin-top:4rem;}@media (max-width: 995px){margin-top:1rem;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const ContenedorD = _styled(\"div\", true ? {\n    target: \"eev979b8\"\n  } : {\n    target: \"eev979b8\",\n    label: \"ContenedorD\"\n  })(true ? {\n    name: \"1akbdyk\",\n    styles: \"width:100%;margin-top:4rem;@media (max-width: 995px){display:none;}\"\n  } : {\n    name: \"1akbdyk\",\n    styles: \"width:100%;margin-top:4rem;@media (max-width: 995px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const IconoDiv = _styled(\"div\", true ? {\n    target: \"eev979b7\"\n  } : {\n    target: \"eev979b7\",\n    label: \"IconoDiv\"\n  })(true ? {\n    name: \"desyct\",\n    styles: \"width:60%;text-align:center;margin:0px auto\"\n  } : {\n    name: \"desyct\",\n    styles: \"width:60%;text-align:center;margin:0px auto\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Icono = _styled(\"img\", true ? {\n    target: \"eev979b6\"\n  } : {\n    target: \"eev979b6\",\n    label: \"Icono\"\n  })(true ? {\n    name: \"17792o1\",\n    styles: \"width:70%;cursor:pointer\"\n  } : {\n    name: \"17792o1\",\n    styles: \"width:70%;cursor:pointer\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const IconoDiv2 = _styled(\"div\", true ? {\n    target: \"eev979b5\"\n  } : {\n    target: \"eev979b5\",\n    label: \"IconoDiv2\"\n  })(true ? {\n    name: \"1svedb\",\n    styles: \"width:47%;text-align:center\"\n  } : {\n    name: \"1svedb\",\n    styles: \"width:47%;text-align:center\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Icono2 = _styled(\"img\", true ? {\n    target: \"eev979b4\"\n  } : {\n    target: \"eev979b4\",\n    label: \"Icono2\"\n  })(true ? {\n    name: \"1q3aild\",\n    styles: \"width:46%!important;cursor:pointer;@media (max-width: 1400px){width:50%!important;}\"\n  } : {\n    name: \"1q3aild\",\n    styles: \"width:46%!important;cursor:pointer;@media (max-width: 1400px){width:50%!important;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const TextDiv = _styled(\"div\", true ? {\n    target: \"eev979b3\"\n  } : {\n    target: \"eev979b3\",\n    label: \"TextDiv\"\n  })(true ? {\n    name: \"q68gb5\",\n    styles: \"width:80%;margin:0px auto;@media (max-width: 1400px){width:100%;}\"\n  } : {\n    name: \"q68gb5\",\n    styles: \"width:80%;margin:0px auto;@media (max-width: 1400px){width:100%;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const Text = _styled(\"p\", true ? {\n    target: \"eev979b2\"\n  } : {\n    target: \"eev979b2\",\n    label: \"Text\"\n  })(true ? {\n    name: \"1i3yt9k\",\n    styles: \"font-size:19px;font-weight:bold;@media (max-width: 899px){font-size:14px;}@media (max-width: 699px){font-size:12px;}@media (max-width: 450px){font-size:10px;}\"\n  } : {\n    name: \"1i3yt9k\",\n    styles: \"font-size:19px;font-weight:bold;@media (max-width: 899px){font-size:14px;}@media (max-width: 699px){font-size:12px;}@media (max-width: 450px){font-size:10px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const OvaTexDiv = _styled(\"div\", true ? {\n    target: \"eev979b1\"\n  } : {\n    target: \"eev979b1\",\n    label: \"OvaTexDiv\"\n  })(true ? {\n    name: \"1xutzvp\",\n    styles: \"width:78%;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\"\n  } : {\n    name: \"1xutzvp\",\n    styles: \"width:78%;background-color:#0076c0;border-radius:4rem;text-align:center;margin:auto;cursor:pointer;@media (max-width: 899px){display:none;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const OvaTex = _styled(\"p\", true ? {\n    target: \"eev979b0\"\n  } : {\n    target: \"eev979b0\",\n    label: \"OvaTex\"\n  })(true ? {\n    name: \"1i04rfa\",\n    styles: \"font-size:20px;padding-top:20px;padding-bottom:10px;color:white;@media (max-width: 1500px){font-size:19px;}@media (max-width: 1355px){font-size:17px;}@media (max-width: 1250px){font-size:15px;}\"\n  } : {\n    name: \"1i04rfa\",\n    styles: \"font-size:20px;padding-top:20px;padding-bottom:10px;color:white;@media (max-width: 1500px){font-size:19px;}@media (max-width: 1355px){font-size:17px;}@media (max-width: 1250px){font-size:15px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  const {\n    0: abiertoModal,\n    1: cambiarAbiertoModal\n  } = useState(false);\n  const {\n    0: abiertoModalD,\n    1: cambiarAbiertoModalD\n  } = useState(false);\n  const {\n    0: abiertoModalT,\n    1: cambiarAbiertoModalT\n  } = useState(false);\n  const {\n    0: abiertoModalC,\n    1: cambiarAbiertoModalC\n  } = useState(false);\n  const {\n    0: abiertoModalCI,\n    1: cambiarAbiertoModalCI\n  } = useState(false);\n  const {\n    0: abiertoModalS,\n    1: cambiarAbiertoModalS\n  } = useState(false);\n  const {\n    0: abiertoModalSI,\n    1: cambiarAbiertoModalSI\n  } = useState(false);\n\n  const abrirModal = () => {\n    cambiarAbiertoModal(true);\n  };\n\n  const cerrarModal = () => {\n    cambiarAbiertoModal(false);\n  };\n\n  const abrirModalD = () => {\n    cambiarAbiertoModalD(true);\n  };\n\n  const cerrarModalD = () => {\n    cambiarAbiertoModalD(false);\n  };\n\n  const abrirModalT = () => {\n    cambiarAbiertoModalT(true);\n  };\n\n  const cerrarModalT = () => {\n    cambiarAbiertoModalT(false);\n  };\n\n  const abrirModalC = () => {\n    cambiarAbiertoModalC(true);\n  };\n\n  const cerrarModalC = () => {\n    cambiarAbiertoModalC(false);\n  };\n\n  const abrirModalCI = () => {\n    cambiarAbiertoModalCI(true);\n  };\n\n  const cerrarModalCI = () => {\n    cambiarAbiertoModalCI(false);\n  };\n\n  const abrirModalS = () => {\n    cambiarAbiertoModalS(true);\n  };\n\n  const cerrarModalS = () => {\n    cambiarAbiertoModalS(false);\n  };\n\n  const abrirModalSI = () => {\n    cambiarAbiertoModalSI(true);\n  };\n\n  const cerrarModalSI = () => {\n    cambiarAbiertoModalSI(false);\n  };\n\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(\"div\", {\n    className: \"otro\"\n  }, ___EmotionJSX(Contenedor, null, ___EmotionJSX(IconoDiv, {\n    className: \"icon\"\n  }, ___EmotionJSX(Icono, {\n    src: \"/img/Cr\\xE9dito inicial y esquemas de pago.webp\",\n    alt: \"Cr\\xE9dito inicial y esquemas de pagos\",\n    onClick: abrirModal\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, unom))), ___EmotionJSX(IconoDiv, {\n    className: \"i\"\n  }, ___EmotionJSX(Icono, {\n    src: \"/img/Equipo de respaldo para asegurar los tiempos de reparaci\\xF3n.webp\",\n    alt: \"Equipo de respaldo\",\n    onClick: abrirModalD\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, dosm))), ___EmotionJSX(IconoDiv, {\n    className: \"icon top\"\n  }, ___EmotionJSX(Icono, {\n    src: \"/img/P\\xF3liza de reparaci\\xF3n contra da\\xF1os por uso normal y accidentes.webp\",\n    alt: \"P\\xF3liza de reparaci\\xF3n Hand Held Impresora de Etiqueta y Lectores de Codigos\",\n    onClick: abrirModalT\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, tresm))), ___EmotionJSX(IconoDiv, {\n    className: \"top i\"\n  }, ___EmotionJSX(Icono, {\n    src: \"/img/Primero tendr\\xE1 el equipo operando en sus instalaciones y despu\\xE9s se tramitar\\xE1 el pago.webp\",\n    alt: \"Equipo operando en sus instalaciones\",\n    onClick: abrirModalC\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, cuatrom))), ___EmotionJSX(IconoDiv, {\n    className: \"icon top\"\n  }, ___EmotionJSX(Icono, {\n    src: \"/img/Equipo demo sin costo, para pruebas en sus instalaciones.webp\",\n    alt: \"Equipo demo sin costo\",\n    onClick: abrirModalCI\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, cincom))), ___EmotionJSX(IconoDiv, {\n    className: \"top i\"\n  }, ___EmotionJSX(Icono, {\n    src: \"/img/deducible de impuestos.webp\",\n    alt: \"100% deducible de impuestos\",\n    onClick: abrirModalS\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, seism)))), ___EmotionJSX(\"div\", {\n    className: \"iconodivdos\"\n  }, ___EmotionJSX(IconoDiv2, {\n    className: \"iconul top\"\n  }, ___EmotionJSX(Icono2, {\n    src: \"/img/Envio gratis.webp\",\n    alt: \"Env\\xEDo gratis\",\n    onClick: abrirModalSI\n  }), ___EmotionJSX(TextDiv, null, ___EmotionJSX(Text, null, sietem)))), ___EmotionJSX(\"div\", {\n    className: \"DivR\"\n  }, ___EmotionJSX(ContenedorD, null, ___EmotionJSX(Link, {\n    href: luno\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ochom, ___EmotionJSX(\"br\", null), ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, nuevem)))), ___EmotionJSX(Link, {\n    href: ldos\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, diezm, ___EmotionJSX(\"br\", null), ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, oncem)))), ___EmotionJSX(Link, {\n    href: ltres\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, docem, ___EmotionJSX(\"br\", null), ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, trecem)))), ___EmotionJSX(Link, {\n    href: lcuatro\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, catorcem, ___EmotionJSX(\"br\", null), ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, quincem)))), ___EmotionJSX(Link, {\n    href: ecuatro\n  }, ___EmotionJSX(OvaTexDiv, {\n    className: \"b\"\n  }, ___EmotionJSX(OvaTex, null, ecem, ___EmotionJSX(\"br\", null), ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, quincem)))), ___EmotionJSX(Link, {\n    href: lcinco\n  }, ___EmotionJSX(OvaTexDiv, null, ___EmotionJSX(OvaTex, null, diezseism, ___EmotionJSX(\"br\", null), ___EmotionJSX(\"span\", {\n    className: \"n\"\n  }, diezsietem))))))), ___EmotionJSX(Modal, {\n    show: abiertoModal,\n    onHide: cerrarModal,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Cr\\xE9dito y esquemas de pagos.\")), ___EmotionJSX(Modal.Body, null, \"En Hand Held Solutions le otorgamos facilidades y contamos con diferentes esquemas de financiamiento.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModal\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalD,\n    onHide: cerrarModalD,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Equipo de respaldo para asegurar su operaci\\xF3n.\")), ___EmotionJSX(Modal.Body, null, \"Le otorgamos sin costo equipo de respaldo, en caso de que alguno de los equipos que est\\xE1 rentando o mande a reparaci\\xF3n con nosotros, presente alg\\xFAn problema.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalD\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalT,\n    onHide: cerrarModalT,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"P\\xF3liza de reparaci\\xF3n contra accidentes mayores y uso normal.\")), ___EmotionJSX(Modal.Body, null, \"Nuestras p\\xF3lizas le ofrecen mantenimiento preventivo y reparaci\\xF3n de equipos ante fallas o accidentes mayores y ca\\xEDdas sobre concreto. Cuenta con reparaciones ilimitadas y soporte t\\xE9cnico v\\xEDa telef\\xF3nica para cualquier asistencia en fallas de configuraci\\xF3n.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalT\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalC,\n    onHide: cerrarModalC,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Facilidades para su operaci\\xF3n\")), ___EmotionJSX(Modal.Body, null, \"Primero nos encargaremos de que usted cuente con los equipos requeridos lo antes posible y despu\\xE9s tramitaremos el pago. En Hand Held Solutions nuestra prioridad siempre ha sido brindar a nuestros clientes la facilidad de realizar sus operaciones con lo \\xFAltimo en tecnolog\\xEDa.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalC\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalCI,\n    onHide: cerrarModalCI,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Equipo demo sin costo, para pruebas en sus instalaciones.\")), ___EmotionJSX(Modal.Body, null, \"Ponemos a su disposici\\xF3n equipos demo sin costo, que le permitir\\xE1n realizar pruebas en sus instalaciones. Nosotros lo asesoraremos para la elecci\\xF3n del modelo que mejor se adapte a sus necesidades y funcione en su operaci\\xF3n.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalCI\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalS,\n    onHide: cerrarModalS,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"100% deducible de impuestos.\")), ___EmotionJSX(Modal.Body, null, \"Nuestro servicio de renta le permitir\\xE1 contar con los equipos que requiera con una m\\xEDnima inversi\\xF3n.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalS\n  }, \"Cerrar\"))), ___EmotionJSX(Modal, {\n    show: abiertoModalSI,\n    onHide: cerrarModalSI,\n    keyboard: false,\n    size: \"lg\",\n    w: true,\n    className: \"modal-altura\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Env\\xEDo gratis a toda la Rep\\xFAblica Mexicana.\")), ___EmotionJSX(Modal.Body, null, \"Contamos con env\\xEDo gratis a toda la Rep\\xFAblica Mexicana, nosotros le mandamos sin costo alguno, los equipos que vaya a rentar, diagnosticar, reparar o adquirir.\"), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModalSI\n  }, \"Cerrar\"))));\n};\n\nexport default IconosRentaGeneral;","map":null,"metadata":{},"sourceType":"module"}