{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Head from \"next/head\";\nimport Header from \"../components/layout/Header\";\nimport ReparacionL from \"../components/pestanas/ReparacionL\";\nimport IconosReparacionGeneral from \"../components/pestanas/IconosReparacionGeneral\";\nimport Form from \"../components/pestanas/Form\";\nimport Ubicacion from \"../components/pestanas/Ubicacion\";\nimport Servicios from \"../components/pestanas/DnuestrosS\";\nimport MapaDuns from \"../components/pestanas/MapaDuns\";\nimport BotonesMovilCinco from \"../components/pestanas/BotonesMovilCinco\";\nimport Footer from \"../components/layout/Footer\";\nimport { Modal, Button, Carousel } from \"react-bootstrap\";\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar RepLectores = function RepLectores() {\n  var ContenedorFlexa = _styled(\"div\", true ? {\n    target: \"ea468eu4\"\n  } : {\n    target: \"ea468eu4\",\n    label: \"ContenedorFlexa\"\n  })(true ? {\n    name: \"ec4ln7\",\n    styles: \"display:flex;margin-top:-150px;@media (max-width: 1750px){margin-top:-70px;}@media (max-width: 1676px){margin-top:-10px;}@media (max-width: 1500px){margin-top:20px;}@media (max-width: 1230px){margin-top:130px;}@media (max-width: 995px){display:block;}@media (max-width: 600px){margin-top:-10px;}\"\n  } : {\n    name: \"ec4ln7\",\n    styles: \"display:flex;margin-top:-150px;@media (max-width: 1750px){margin-top:-70px;}@media (max-width: 1676px){margin-top:-10px;}@media (max-width: 1500px){margin-top:20px;}@media (max-width: 1230px){margin-top:130px;}@media (max-width: 995px){display:block;}@media (max-width: 600px){margin-top:-10px;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var ContenedorFlex = _styled(\"div\", true ? {\n    target: \"ea468eu3\"\n  } : {\n    target: \"ea468eu3\",\n    label: \"ContenedorFlex\"\n  })(true ? {\n    name: \"o0r707\",\n    styles: \"display:flex;@media (max-width: 700px){display:block;}\"\n  } : {\n    name: \"o0r707\",\n    styles: \"display:flex;@media (max-width: 700px){display:block;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var ContenedorBotona = _styled(\"div\", true ? {\n    target: \"ea468eu2\"\n  } : {\n    target: \"ea468eu2\",\n    label: \"ContenedorBotona\"\n  })(true ? {\n    name: \"udt92q\",\n    styles: \"@media (max-width: 995px){display:block;}\"\n  } : {\n    name: \"udt92q\",\n    styles: \"@media (max-width: 995px){display:block;}\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var ImgModal = _styled(\"img\", true ? {\n    target: \"ea468eu1\"\n  } : {\n    target: \"ea468eu1\",\n    label: \"ImgModal\"\n  })(true ? {\n    name: \"16na1d5\",\n    styles: \"max-width:100%!important;min-width:100%!important;max-height:100%!important;min-height:100%!important\"\n  } : {\n    name: \"16na1d5\",\n    styles: \"max-width:100%!important;min-width:100%!important;max-height:100%!important;min-height:100%!important\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var Puntero = _styled(\"a\", true ? {\n    target: \"ea468eu0\"\n  } : {\n    target: \"ea468eu0\",\n    label: \"Puntero\"\n  })(true ? {\n    name: \"e0dnmk\",\n    styles: \"cursor:pointer\"\n  } : {\n    name: \"e0dnmk\",\n    styles: \"cursor:pointer\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var Redirigir = function Redirigir(e) {\n    e.preventDefault();\n    cambiarAbiertoAnuncios(false);\n    document.location.href = \"/#reparacion\";\n  };\n\n  var _useState = useState(false),\n      abiertoAnuncios = _useState[0],\n      cambiarAbiertoAnuncios = _useState[1];\n\n  var _useState2 = useState(true),\n      abiertoCupon = _useState2[0],\n      cambiarAbiertoCupon = _useState2[1];\n\n  var cerrarModal = function cerrarModal() {\n    cambiarAbiertoAnuncios(false);\n  }; //  const cerrarModalCupon = () => {\n  //    cambiarAbiertoCupon(false);\n  //    setTimeout(() => {\n  //      cambiarAbiertoAnuncios(true);\n  //    }, 6000);\n  //  };\n\n\n  useEffect(function () {\n    setTimeout(function () {\n      cambiarAbiertoAnuncios(true);\n    }, 6000);\n  }, []);\n  return ___EmotionJSX(\"div\", {\n    className: \"ya\"\n  }, ___EmotionJSX(Head, null, ___EmotionJSX(\"html\", {\n    lang: \"es\"\n  }), ___EmotionJSX(\"title\", null, \"Reparaci\\xF3n de Lectores De C\\xF3digos de Barras | Mantenimiento de Lectores Honeywell y Zebra | Esc\\xE1neres de C\\xF3digos de Barras\"), ___EmotionJSX(\"meta\", {\n    name: \"description\",\n    content: \"Reparaci\\xF3n de Lectores de C\\xF3digos de Barras, Mantenimiento de Lectores QR. \\xA1Diagnostico Sin Costo y con Atenci\\xF3n en Sitio! Proporcionamos Equipos de Respaldo para que Contin\\xFAe con sus Operaciones en Lo que sus Equipos son Reparados. \\xA1Llame Ahora!\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"keywords\",\n    content: \"Reparaci\\xF3n, servicio t\\xE9cnico, mantenimiento, diagn\\xF3stico, mantenimiento preventivo, mantenimiento correctivo, scanner, lector de c\\xF3digos, esc\\xE1ner, c\\xF3digos de barras, honeywell, symbol, motorola, intermec, zebra, c\\xF3digos qr, lector inal\\xE1mbrico\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"robots\",\n    content: \"index,follow,all\"\n  }), ___EmotionJSX(\"link\", {\n    rel: \"shortcut icon\",\n    href: \"/logo-copia.png\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:title\",\n    content: \"Reparaci\\xF3n de Lectores De C\\xF3digos de Barras | Mantenimiento de Lectores Honeywell y Zebra | Esc\\xE1neres de C\\xF3digos de Barras\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:image\",\n    content: \"https://i.ibb.co/42K3Zdn/logo-copia.png\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:type\",\n    content: \"website\"\n  }), ___EmotionJSX(\"meta\", {\n    property: \"og:description\",\n    content: \"Reparaci\\xF3n de Lectores de C\\xF3digos de Barras, Mantenimiento de Lectores QR. \\xA1Diagnostico Sin Costo y con Atenci\\xF3n en Sitio! Proporcionamos Equipos de Respaldo para que Contin\\xFAe con sus Operaciones en Lo que sus Equipos son Reparados. \\xA1Llame Ahora!\"\n  }), ___EmotionJSX(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\"\n  }), ___EmotionJSX(\"link\", {\n    rel: \"icon\",\n    type: \"image/png\",\n    sizes: \"160x99\",\n    href: \"https://i.ibb.co/42K3Zdn/logo-copia.png\"\n  }), ___EmotionJSX(\"link\", {\n    rel: \"preconnect\",\n    href: \"https://fonts.gstatic.com\"\n  }), ___EmotionJSX(\"link\", {\n    href: \"https://fonts.googleapis.com/css2?family=Raleway&display=swap\",\n    rel: \"stylesheet\"\n  }), ___EmotionJSX(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: \"(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start': new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\\n                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\\n                'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\\n                })(window,document,'script','dataLayer','GTM-KXHWDC2');\"\n    }\n  }), ___EmotionJSX(\"script\", {\n    async: true,\n    src: \"https://www.googletagmanager.com/gtag/js?id=AW-728249895\"\n  }), ___EmotionJSX(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: \"window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'AW-728249895');\"\n    }\n  })), ___EmotionJSX(\"noscript\", {\n    dangerouslySetInnerHTML: {\n      __html: \"<iframe src=\\\"https://www.googletagmanager.com/ns.html?id=GTM-KXHWDC2\\\"\\n          height=\\\"0\\\" width=\\\"0\\\" style=\\\"display:none;visibility:hidden\\\"></iframe>\"\n    }\n  }), ___EmotionJSX(Header, null), ___EmotionJSX(ReparacionL, null), ___EmotionJSX(ContenedorFlexa, null, ___EmotionJSX(IconosReparacionGeneral, {\n    unom: \"Cr\\xE9dito y esquemas de pagos.\",\n    dosm: \"Reparaci\\xF3n de equipo en sus instalaciones.\",\n    tresm: \"Recolecci\\xF3n y entrega de equipo sin costo.\",\n    cuatrom: \"P\\xF3liza de reparaci\\xF3n contra accidentes mayores y uso normal.\",\n    cincom: \"Diagn\\xF3stico sin costo en sus instalaciones.\",\n    seism: \"Equipo de respaldo para asegurar su operaci\\xF3n\",\n    sietem: \"Env\\xEDo gratis a toda la Rep\\xFAblica Mexicana.\",\n    ochom: \"Mantenimiento preventivo y correctivo.\",\n    nuevem: \"\\xBFNecesita un plan de renta para lectores?.\",\n    diezm: \"\\xA1Conozca nuestro servicio de Renta!\",\n    oncem: \"Adquiera los lectores que mejor se adapten a sus necesidades.\",\n    docem: \"\\xA1Conozca nuestro servicio de Venta!\",\n    trecem: \"Adquiera los accesorios y consumibles que necesita.\",\n    catorcem: \"\\xA1Cont\\xE1ctenos\",\n    quincem: \"Ponemos a su disposici\\xF3n la soluci\\xF3n \\\"DSD\\\" para venta en ruta.\",\n    diezseism: \"\\xA1Con\\xF3zcalo!\",\n    diezsietem: \"Contamos con fundas dise\\xF1adas a la medida para cumplir con sus necesidades.\",\n    diezochom: \"\\xA1Adquiera la protecci\\xF3n que sus equipos necesitan!\",\n    luno: \"renta-de-lectores-de-codigos-de-barras\",\n    ldos: \"venta-de-lectores-de-codigos-de-barras\",\n    ltres: \"venta-de-accesorios-y-consumibles\",\n    lcuatro: \"DSD-venta-en-ruta\",\n    lcinco: \"venta-fundas-handheld-impresora-portatil\",\n    ecuatro: \"impresion-credenciales-tarjetas-gafetes-pvc\",\n    euno: \"Conozca nuestro servicio de impresion de credenciales\"\n  }), ___EmotionJSX(Form, null)), ___EmotionJSX(ContenedorBotona, null, ___EmotionJSX(BotonesMovilCinco, {\n    muno: \"\\xBFNecesita un plan de renta para lectores?.\",\n    mdos: \"\\xA1Conozca nuestro servicio de Renta!\",\n    mtres: \"Adquiera los lectores que mejor se adapten a sus necesidades.\",\n    mcuatro: \"\\xA1Conozca nuestro servicio de Venta!\",\n    mcinco: \"Adquiera los accesorios y consumibles que necesita.\",\n    mseis: \"\\xA1Cont\\xE1ctenos!\",\n    msiete: \"Ponemos a su disposici\\xF3n la soluci\\xF3n \\\"DSD\\\" para venta en ruta.\",\n    mocho: \"\\xA1Con\\xF3zcalo!\",\n    mnueve: \"Contamos con fundas dise\\xF1adas a la medida para cumplir con sus necesidades.\",\n    mdiez: \"\\xA1Adquiera la protecci\\xF3n que sus equipos necesitan!\",\n    luno: \"renta-de-lectores-de-codigos-de-barras\",\n    ldos: \"venta-de-lectores-de-codigos-de-barras\",\n    ltres: \"venta-de-accesorios-y-consumibles\",\n    lcuatro: \"DSD-venta-en-ruta\",\n    lcinco: \"venta-fundas-handheld-impresora-portatil\"\n  })), ___EmotionJSX(ContenedorFlex, null, ___EmotionJSX(Ubicacion, null), ___EmotionJSX(Servicios, null)), ___EmotionJSX(MapaDuns, null), ___EmotionJSX(Footer, null), ___EmotionJSX(Modal, {\n    show: abiertoAnuncios,\n    onHide: cerrarModal,\n    keyboard: false,\n    size: \"lg\",\n    className: \"modal-altura ppp\"\n  }, ___EmotionJSX(Modal.Header, {\n    closeButton: true\n  }, ___EmotionJSX(Modal.Title, null, \"Noticias\")), ___EmotionJSX(Modal.Body, null, ___EmotionJSX(Carousel, null, ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/Promoci\\xF3n_mc9090_funcional_po83sk.webp\",\n    alt: \"Hand Held MC9090\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/Promoci\\xF3n_CN51.webp\",\n    alt: \"Hand Held Intermec Honeywell CN51\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/evolis_adikio.webp\",\n    alt: \"evolis adikio\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/evolis_impresoras.webp\",\n    alt: \"evolis impresoras\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"img\", {\n    className: \"d-block w-100\",\n    src: \"/img/IMAGEN_ZEBRA_BANNER_800X500_lyqnpu.webp\",\n    alt: \"Zebra Hand Held Impresoras Lectores\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(Puntero, {\n    onClick: Redirigir\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/Copia_de_p\\xF3lizas_reparaci\\xF3n_sg0xim.webp\",\n    alt: \"Polizas de reparacion handheld impresoras de etiquetas y lectores\"\n  }))), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(\"a\", {\n    className: \"clicks\",\n    href: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1623098014/banner/publicaci%C3%B3n_nuevo_lanzamiento_ec50_y_ec55_fmwnhz.png\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/Copia_de_ec50_y_ec55_en_web_kyx6mp.webp\",\n    alt: \"Zebra Handheld EC50 EC55\"\n  }))), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/IMAGEN_ZEBRA_BANNER_800X500_vr6p1d.webp\",\n    alt: \"Zebra Hand Held Impresoras Lectores\"\n  })), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(Puntero, {\n    href: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1623098012/banner/EDA61K_FB_o2obod.png\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/EDA61K_WEB_luqnfs.webp\",\n    alt: \"Hand Held EDA61K Zebra\"\n  }))), ___EmotionJSX(Carousel.Item, null, ___EmotionJSX(Puntero, {\n    href: \"https://res.cloudinary.com/dihawqrnt/image/upload/v1623098010/banner/ck65_FB_1_rj8z3u.png\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, ___EmotionJSX(ImgModal, {\n    className: \"d-block \",\n    src: \"/img/CK65_WEB_l9akm3.webp\",\n    alt: \"Hand Held CK65 Zebra\"\n  }))))), ___EmotionJSX(Modal.Footer, null, ___EmotionJSX(Button, {\n    variant: \"light\",\n    onClick: cerrarModal\n  }, \"Cerrar\"))));\n};\n\nexport default RepLectores;","map":null,"metadata":{},"sourceType":"module"}