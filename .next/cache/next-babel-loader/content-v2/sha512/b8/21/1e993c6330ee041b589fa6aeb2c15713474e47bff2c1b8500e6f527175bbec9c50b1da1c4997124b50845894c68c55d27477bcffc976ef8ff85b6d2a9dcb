{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alan\\\\Desktop\\\\C\\xF3digo actual p\\xE1gina web\\\\C\\xF3digo actual p\\xE1gina web\\\\components\\\\layout\\\\VideoCarousel.js\";\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { PrevButton, NextButton, PlayButton } from \"./carouselButtons\";\nimport useEmblaCarousel from \"embla-carousel-react\";\nimport { videoIndex, videoThumbnail } from \"../CarouselMedia\";\nimport { VideoModal } from './VideoModal';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nconst EmblaCarousel = ({\n  slides\n}) => {\n  const [viewportRef, embla] = useEmblaCarousel({\n    slidesToScroll: 2,\n    skipSnaps: false,\n    loop: true\n  });\n  const {\n    0: prevBtnEnabled,\n    1: setPrevBtnEnabled\n  } = useState(false);\n  const {\n    0: nextBtnEnabled,\n    1: setNextBtnEnabled\n  } = useState(false);\n  const defaultScrollState = true;\n  const {\n    0: scrolling,\n    1: setScrollState\n  } = useState(defaultScrollState);\n  const scrollingRef = useRef(defaultScrollState);\n  const {\n    0: modalVideoUrl,\n    1: setModalUrl\n  } = useState(\"\");\n  let scrollingForward = true;\n  let interval = undefined;\n  const {\n    0: videoModalOpen,\n    1: showVideoModal\n  } = useState(false);\n  const scrollPrev = useCallback(() => embla && embla.scrollPrev(), [embla]);\n  const scrollNext = useCallback(() => embla && embla.scrollNext(), [embla]);\n  const onSelect = useCallback(() => {\n    if (!embla) return;\n    setPrevBtnEnabled(embla.canScrollPrev());\n    setNextBtnEnabled(embla.canScrollNext());\n  }, [embla]);\n\n  const ShowVideo = videoID => {\n    setModalUrl(videoID);\n    setScrollState(false);\n    showVideoModal(prev => !prev);\n    console.log(\"Playing video: \" + modalVideoUrl);\n  };\n\n  const setModalVisibility = isOpen => {\n    showVideoModal(isOpen);\n    setScrollState(prev => !prev);\n  };\n\n  useEffect(() => {\n    scrollingRef.current = scrolling;\n  });\n  useEffect(() => {\n    if (!embla) return;\n    embla.on(\"select\", onSelect);\n    onSelect();\n\n    if (interval == undefined) {\n      startInterval();\n      setScrollState(true);\n    }\n  }, [embla, onSelect]);\n\n  const startInterval = () => {\n    interval = setInterval(() => {\n      if (scrollingRef.current == true) {\n        if (scrollingForward == true) {\n          if (embla.canScrollNext()) scrollNext();else {\n            scrollingForward = false;\n            scrollPrev();\n          }\n        } else {\n          if (embla.canScrollPrev()) scrollPrev();else {\n            scrollingForward = true;\n            scrollNext();\n          }\n        }\n      }\n    }, 3000);\n  };\n\n  return ___EmotionJSX(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"embla\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"embla__viewport\",\n    ref: viewportRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"embla__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, slides.map(index => ___EmotionJSX(\"div\", {\n    className: \"embla__slide\",\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 14\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"embla__slide__inner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"div\", {\n    className: \"video__carousel_slot\",\n    onClick: () => {\n      ShowVideo(videoIndex(index));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, ___EmotionJSX(\"img\", {\n    src: videoThumbnail(videoIndex(index)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }), ___EmotionJSX(PlayButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }))))))), ___EmotionJSX(PrevButton, {\n    onClick: scrollPrev,\n    enabled: prevBtnEnabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }), ___EmotionJSX(NextButton, {\n    onClick: scrollNext,\n    enabled: nextBtnEnabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  })), ___EmotionJSX(VideoModal, {\n    showModal: videoModalOpen,\n    setShowModal: setModalVisibility,\n    videoID: modalVideoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default EmblaCarousel;","map":{"version":3,"sources":["C:/Users/Alan/Desktop/C칩digo actual p치gina web/C칩digo actual p치gina web/components/layout/VideoCarousel.js"],"names":["React","useState","useEffect","useCallback","useRef","PrevButton","NextButton","PlayButton","useEmblaCarousel","videoIndex","videoThumbnail","VideoModal","EmblaCarousel","slides","viewportRef","embla","slidesToScroll","skipSnaps","loop","prevBtnEnabled","setPrevBtnEnabled","nextBtnEnabled","setNextBtnEnabled","defaultScrollState","scrolling","setScrollState","scrollingRef","modalVideoUrl","setModalUrl","scrollingForward","interval","undefined","videoModalOpen","showVideoModal","scrollPrev","scrollNext","onSelect","canScrollPrev","canScrollNext","ShowVideo","videoID","prev","console","log","setModalVisibility","isOpen","current","on","startInterval","setInterval","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback,useRef } from \"react\";\r\nimport { PrevButton, NextButton, PlayButton } from \"./carouselButtons\";\r\nimport useEmblaCarousel from \"embla-carousel-react\";\r\nimport { videoIndex, videoThumbnail } from \"../CarouselMedia\";\r\nimport { VideoModal } from './VideoModal';\r\n\r\nconst EmblaCarousel = ({slides}) =>{\r\n\r\n const [viewportRef, embla] = useEmblaCarousel({\r\n    slidesToScroll: 2,\r\n    skipSnaps: false,\r\n    loop:true\r\n  });\r\n  const [prevBtnEnabled, setPrevBtnEnabled] = useState(false);\r\n  const [nextBtnEnabled, setNextBtnEnabled] = useState(false);\r\n\r\n  const defaultScrollState = true;\r\n  const [scrolling,setScrollState] = useState(defaultScrollState);\r\n  const scrollingRef = useRef(defaultScrollState);\r\n\r\n  const[modalVideoUrl,setModalUrl] = useState(\"\");\r\n\r\n  let scrollingForward = true;\r\n  let interval = undefined;\r\n\r\n  const [videoModalOpen,showVideoModal] = useState(false);\r\n  \r\n  const scrollPrev = useCallback(() => embla && embla.scrollPrev(), [embla]);\r\n  const scrollNext = useCallback(() => embla && embla.scrollNext(), [embla]);\r\n  \r\n  const onSelect = useCallback(() => {\r\n    if (!embla) return;\r\n    setPrevBtnEnabled(embla.canScrollPrev());\r\n    setNextBtnEnabled(embla.canScrollNext());\r\n  }, [embla]);\r\n\r\n\r\n  const ShowVideo = (videoID)=>{\r\n      setModalUrl(videoID);\r\n      setScrollState(false);\r\n      showVideoModal(prev=>!prev);\r\n\r\n      console.log(\"Playing video: \"+modalVideoUrl);\r\n  }\r\n\r\n  const setModalVisibility = (isOpen)=>{\r\n    showVideoModal(isOpen);\r\n    setScrollState(prev=>!prev);\r\n  }\r\n\r\n  useEffect(()=>{\r\n      scrollingRef.current = scrolling;\r\n  });\r\n  \r\n  useEffect(() => {\r\n    if (!embla) return;\r\n\r\n    embla.on(\"select\", onSelect);\r\n    onSelect();\r\n    if(interval == undefined){\r\n        startInterval();\r\n        setScrollState(true);\r\n    }\r\n    \r\n  }, [embla, onSelect]);\r\n\r\n    const startInterval = ()=>{\r\n        interval = setInterval(()=>{\r\n\r\n            if(scrollingRef.current == true){\r\n                if( scrollingForward == true){\r\n\r\n                    if(embla.canScrollNext())\r\n                        scrollNext();\r\n                    else{\r\n                        scrollingForward = false;\r\n                        scrollPrev();\r\n                    }\r\n                }\r\n                else{\r\n                    if(embla.canScrollPrev())\r\n                        scrollPrev();\r\n                    else{\r\n                        scrollingForward = true;\r\n                        scrollNext();\r\n                    }\r\n                }\r\n            }\r\n        },3000);\r\n    };\r\n\r\n\r\n  return (\r\n\r\n    <div>\r\n\r\n        <div className=\"embla\">\r\n        <div className=\"embla__viewport\" ref={viewportRef}>\r\n            <div className=\"embla__container\">\r\n            {slides.map((index) => \r\n            (<div className=\"embla__slide\" key={index}>\r\n                <div className=\"embla__slide__inner\">\r\n                    \r\n                <div className=\"video__carousel_slot\" onClick={()=>{ShowVideo(videoIndex(index));}}>\r\n                    <img src={videoThumbnail(videoIndex(index))}/>\r\n                    <PlayButton/>\r\n                </div>\r\n\r\n                </div>\r\n                </div>\r\n            )\r\n            )}\r\n            </div>\r\n        </div>\r\n        <PrevButton onClick={scrollPrev} enabled={prevBtnEnabled} />\r\n            <NextButton onClick={scrollNext} enabled={nextBtnEnabled} />\r\n        </div>\r\n\r\n        <VideoModal showModal={videoModalOpen} setShowModal={setModalVisibility} videoID={modalVideoUrl} />\r\n\t\t</div>\r\n        \r\n  );\r\n};\r\n\r\nexport default EmblaCarousel;"]},"metadata":{},"sourceType":"module"}