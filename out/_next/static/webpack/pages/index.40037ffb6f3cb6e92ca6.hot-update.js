webpackHotUpdate_N_E("pages/index",{

/***/ "./components/layout/Header.js":
/*!*************************************!*\
  !*** ./components/layout/Header.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ "./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/head */ "./node_modules/next/head.js");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _layout_Tarjeta__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../layout/Tarjeta */ "./components/layout/Tarjeta.js");
/* harmony import */ var _layout_TarjetaDos__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../layout/TarjetaDos */ "./components/layout/TarjetaDos.js");
/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-bootstrap */ "./node_modules/react-bootstrap/esm/index.js");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/router */ "./node_modules/next/router.js");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _hooks_useWindowSize__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../hooks/useWindowSize */ "./hooks/useWindowSize.js");
/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @emotion/react */ "./node_modules/@emotion/react/dist/emotion-react.browser.esm.js");


var _jsxFileName = "C:\\Users\\jhino\\Desktop\\codigo de prueba HHS\\components\\layout\\Header.js",
    _this = undefined,
    _s = $RefreshSig$();

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }











var Header = function Header() {
  _s();

  var Bienvenido = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {
    target: "ea6yc6s20",
    label: "Bienvenido"
  })(false ? undefined : {
    name: "pq3keu",
    styles: "min-width:100%!important;background-color:#0076c0;display:flex;padding-top:11px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var TextoBienvenido = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("h1", false ? undefined : {
    target: "ea6yc6s19",
    label: "TextoBienvenido"
  })(false ? undefined : {
    name: "jagj6i",
    styles: "color:white;font-size:25px;font-weight:bold;margin-left:25px;margin-top:4px;font-family:\"Raleway\",sans-serif;@media (max-width: 1950px){font-size:19px;}@media (max-width: 881px){margin-top:0px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var SocialMedia = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {
    target: "ea6yc6s18",
    label: "SocialMedia"
  })(false ? undefined : {
    name: "x2u97t",
    styles: "height:100%;display:flex;margin-bottom:10px;@media (max-width: 481px){margin-bottom:0px;}@media (max-width: 428px){margin-bottom:8px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var LogoRedes = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("img", false ? undefined : {
    target: "ea6yc6s17",
    label: "LogoRedes"
  })(false ? undefined : {
    name: "s3yf4g",
    styles: "width:40px;height:40px;margin-right:25px;@media (max-width: 1950px){width:25px;height:25px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var LogoRedesYT = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("img", false ? undefined : {
    target: "ea6yc6s16",
    label: "LogoRedesYT"
  })(false ? undefined : {
    name: "q8yu1w",
    styles: "width:50px;height:40px;margin-right:25px;@media (max-width: 1950px){width:30px;height:25px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var HeaderContacto = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {
    target: "ea6yc6s15",
    label: "HeaderContacto"
  })(false ? undefined : {
    name: "raobkm",
    styles: "background-color:white;min-width:100%!important",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var Logo = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("img", false ? undefined : {
    target: "ea6yc6s14",
    label: "Logo"
  })(false ? undefined : {
    name: "6nsv97",
    styles: "height:93px;@media (max-width: 1950px){height:120px;}@media (max-width: 450px){height:80px;}@media (max-width: 350px){height:65px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var LogoC = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("img", false ? undefined : {
    target: "ea6yc6s13",
    label: "LogoC"
  })(false ? undefined : {
    name: "15gsnyh",
    styles: "height:93px;@media (max-width: 1950px){height:120px;}@media (max-width: 450px){height:80px;}@media (max-width: 350px){height:60px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXEhlYWRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0RnlCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXEhlYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5pbXBvcnQgTGluayBmcm9tIFwibmV4dC9saW5rXCI7XG5pbXBvcnQgSGVhZCBmcm9tIFwibmV4dC9oZWFkXCI7XG5pbXBvcnQgVGFyamV0YSBmcm9tIFwiLi4vbGF5b3V0L1RhcmpldGFcIjtcbmltcG9ydCBUYXJqZXRhRG9zIGZyb20gXCIuLi9sYXlvdXQvVGFyamV0YURvc1wiO1xuaW1wb3J0IHsgTW9kYWwsIENhcm91c2VsLCBCdXR0b24sIE5hdmJhciwgTmF2LCBOYXZEcm9wZG93biwgSXRlbSB9IGZyb20gXCJyZWFjdC1ib290c3RyYXBcIjtcbmltcG9ydCBSb3V0ZXIgZnJvbSBcIm5leHQvcm91dGVyXCI7XG5cbmltcG9ydCB1c2VXaW5kb3dTaXplIGZyb20gXCIuLi8uLi9ob29rcy91c2VXaW5kb3dTaXplXCI7XG5cbmNvbnN0IEhlYWRlciA9ICgpID0+IHtcbiAgY29uc3QgQmllbnZlbmlkbyA9IHN0eWxlZC5kaXZgXG4gICAgbWluLXdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNzZjMDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHBhZGRpbmctdG9wOiAxMXB4O1xuICBgO1xuXG4gIGNvbnN0IFRleHRvQmllbnZlbmlkbyA9IHN0eWxlZC5oMWBcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgZm9udC1zaXplOiAyNXB4O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIG1hcmdpbi1sZWZ0OiAyNXB4O1xuICAgIG1hcmdpbi10b3A6IDRweDtcbiAgICBmb250LWZhbWlseTogXCJSYWxld2F5XCIsIHNhbnMtc2VyaWY7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTk1MHB4KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTlweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogODgxcHgpIHtcbiAgICAgIG1hcmdpbi10b3A6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgU29jaWFsTWVkaWEgPSBzdHlsZWQuZGl2YFxuICAgIGhlaWdodDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDgxcHgpIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDBweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDI4cHgpIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDhweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgTG9nb1JlZGVzID0gc3R5bGVkLmltZ2BcbiAgICB3aWR0aDogNDBweDtcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAgbWFyZ2luLXJpZ2h0OiAyNXB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE5NTBweCkge1xuICAgICAgICB3aWR0aDogMjVweDtcbiAgICAgICAgaGVpZ2h0OiAyNXB4O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBMb2dvUmVkZXNZVCA9IHN0eWxlZC5pbWdgXG4gICAgd2lkdGg6IDUwcHg7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIG1hcmdpbi1yaWdodDogMjVweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgICAgd2lkdGg6IDMwcHg7XG4gICAgICAgIGhlaWdodDogMjVweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSGVhZGVyQ29udGFjdG8gPSBzdHlsZWQuZGl2YFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIG1pbi13aWR0aDogMTAwJSAhaW1wb3J0YW50O1xuICBgO1xuXG4gIGNvbnN0IExvZ28gPSBzdHlsZWQuaW1nYFxuICAgIGhlaWdodDogOTNweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgICAgaGVpZ2h0OiAxMjBweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDUwcHgpIHtcbiAgICAgIGhlaWdodDogODBweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMzUwcHgpIHtcbiAgICAgIGhlaWdodDogNjVweDtcbiAgICB9XG4gIGA7XG4gIGNvbnN0IExvZ29DPSBzdHlsZWQuaW1nYFxuICAgIGhlaWdodDogOTNweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgICAgaGVpZ2h0OiAxMjBweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDUwcHgpIHtcbiAgICAgIGhlaWdodDogODBweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMzUwcHgpIHtcbiAgICAgIGhlaWdodDogNjBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgTGxhbWFub3MgPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgY29sb3I6IGJsYWNrO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBwYWRkaW5nLXRvcDogNXB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE5NTBweCkge1xuICAgICAgICBmb250LXNpemU6IDE4cHg7XG4gICAgICAgIHBhZGRpbmctdG9wOiAwcHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDExcHg7XG4gICAgICBtYXJnaW4tbGVmdDogMzJweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzgxcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMTFweDtcbiAgICAgIG1hcmdpbi1sZWZ0OiAyMnB4O1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xuICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgICBtYXJnaW4tbGVmdDogMTlweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMzAwcHgpIHtcbiAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgTnVtZXJvID0gc3R5bGVkLmFgXG4gICAgbWFyZ2luLXRvcDogLTE1cHg7XG4gICAgXG4gIGA7XG5cbiAgY29uc3QgTnVtZXJvUmVzcG9uc2l2ZSA9IHN0eWxlZC5hYFxuICAgIG1hcmdpbi10b3A6IDBweDtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc4MXB4KSB7XG4gICAgICB3aWR0aDogNDQlO1xuICAgICAgZm9udC1zaXplOiAxM3B4ICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDU0MHB4KSB7XG4gICAgICB3aWR0aDogNDUlO1xuICAgICAgZm9udC1zaXplOiAxMXB4ICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDQ1MHB4KSB7XG4gICAgICB3aWR0aDogNDYlO1xuICAgICAgZm9udC1zaXplOiA5cHggIWltcG9ydGFudDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgQm90b25Db3JyZW8gPSBzdHlsZWQuYWBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAxN3B4O1xuICAgIGhlaWdodDogMzhweDtcbiAgICB3aWR0aDogNjQlO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTk1MHB4KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweCAhaW1wb3J0YW50O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBCb3RvbkNvcnJlb1Jlc3BvbnNpdmUgPSBzdHlsZWQuYWBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAxN3B4O1xuICAgIGhlaWdodDogMzhweDtcbiAgICB3aWR0aDogNjQlO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzgxcHgpIHtcbiAgICAgIHdpZHRoOiA0MyU7XG4gICAgICBmb250LXNpemU6IDEzcHggIWltcG9ydGFudDtcbiAgICAgIGhlaWdodDogMzJweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTQwcHgpIHtcbiAgICAgIHdpZHRoOiAzOSU7XG4gICAgICBmb250LXNpemU6IDExcHggIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDUwcHgpIHtcbiAgICAgIHdpZHRoOiA0MCU7XG4gICAgICBmb250LXNpemU6IDlweCAhaW1wb3J0YW50O1xuICAgICAgaGVpZ2h0OiAyNnB4O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBEaXJlY2Npb24gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgcGFkZGluZy10b3A6IDExcHg7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTk1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuICBgO1xuXG4vKiBjb25zdCBBdXRvcml6YWRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxMHB4O1xuICAgIHBhZGRpbmctdG9wOiAxMXB4O1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgd2lkdGg6IDIwJTtcbiAgICBtYXJnaW46IDE1cHggYXV0bztcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTBweDtcbiAgICB9XG4gIGA7ICovXG5cbiAgY29uc3QgTWVudSA9IHN0eWxlZC5kaXZgXG4gICAgaGVpZ2h0OiBhdXRvO1xuICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xuICAgIHBhZGRpbmctdG9wOiA1cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTk1MHB4KSB7XG4gICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICBwYWRkaW5nLXRvcDogM3B4O1xuICAgIH1cblxuICBgO1xuXG4gIGNvbnN0IE1lbnVSZXMgPSBzdHlsZWQuZGl2YFxuICAgIGhlaWdodDogMzdweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcbiAgICBwYWRkaW5nLXRvcDogNXB4O1xuICBgO1xuXG4gIGNvbnN0IFBlc3RhbmFzID0gc3R5bGVkLm5hdmBcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBtYXJnaW4tdG9wOiAtNHB4O1xuICAgIG1heC1oZWlnaHQ6IDUwcHg7XG4gIGA7XG5cbiAgY29uc3QgUGVzdGFuYXNMaXN0YSA9IHN0eWxlZC51bGBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGhlaWdodDogYXV0bztcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgYDtcblxuICBjb25zdCBQdW50ZXJvID0gc3R5bGVkLmFgXG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICBgO1xuXG4gIGNvbnN0IEltZ01vZGFsID0gc3R5bGVkLmltZ2BcbiAgICBtYXgtd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcbiAgICBtaW4td2lkdGg6IDEwMCUgIWltcG9ydGFudDtcbiAgICBtYXgtaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7XG4gICAgbWluLWhlaWdodDogMTAwJSAhaW1wb3J0YW50O1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb3NIZWFkZXIgPSBzdHlsZWQucGBcbiAgICBtYXJnaW4tdG9wOiAwcHggIWltcG9ydGFudDtcbiAgYDtcblxuICBjb25zdCBzaXplID0gdXNlV2luZG93U2l6ZSgpO1xuXG4gIGNvbnN0IFthYmllcnRvQW51bmNpb3MsIGNhbWJpYXJBYmllcnRvQW51bmNpb3NdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbYWJpZXJ0b1Byb21vY2lvbmVzLCBjYW1iaWFyUHJvbW9jaW9uZXNdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGFicmlyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBjZXJyYXJNb2RhbCA9ICgpID0+IHtcbiAgICBjYW1iaWFyQWJpZXJ0b0FudW5jaW9zKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCBhYnJpck1vZGFsUHJvbW9jaW9uZXMgPSAoKSA9PiB7XG4gICAgY2FtYmlhclByb21vY2lvbmVzKHRydWUpO1xuICB9O1xuXG4gIGNvbnN0IGNlcnJhck1vZGFsUHJvbW9jaW9uZXMgPSAoKSA9PiB7XG4gICAgY2FtYmlhclByb21vY2lvbmVzKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCBSZWRpcmlnaXIgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3MoZmFsc2UpO1xuXG4gICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IFwiLyNyZXBhcmFjaW9uXCI7XG4gIH07XG5cbiAgY29uc3QgUmVkaXJpZ2lyQ29udGFjdG8gPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3MoZmFsc2UpO1xuXG4gICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IFwiLyNjb250YWN0b1wiO1xuXG4gICAgUm91dGVyLnB1c2goXCIjaG9tZVwiKTtcbiAgfTtcblxuICBjb25zdCBSZWRpcmlnaXJWaWRlb3MgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3MoZmFsc2UpO1xuXG4gICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IFwiLyN2aWRlb3NcIjtcblxuICAgIFJvdXRlci5wdXNoKFwiI2hvbWVcIik7XG4gIH07XG5cbiAgY29uc3QgUmVkaXJpZ2lySU1HID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjYW1iaWFyQWJpZXJ0b0FudW5jaW9zKGZhbHNlKTtcblxuICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBcIi8jcHVudG9hXCI7XG5cbiAgICBSb3V0ZXIucHVzaChcIiNob21lXCIpO1xuICB9O1xuXG4gIGNvbnN0IFJlZGlyaWdpckluaWNpbyA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyhmYWxzZSk7XG5cbiAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gXCIvI3B1bnRvYVwiO1xuXG4gICAgUm91dGVyLnB1c2goXCIjaG9tZVwiKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPGxpbmtcbiAgICAgICAgICByZWw9XCJzdHlsZXNoZWV0IHByZWxvYWRcIlxuICAgICAgICAgIGFzPVwic3R5bGVcIlxuICAgICAgICAgIGhyZWY9XCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Jvb3RzdHJhcEA0LjYuMC9kaXN0L2Nzcy9ib290c3RyYXAubWluLmNzc1wiXG4gICAgICAgICAgaW50ZWdyaXR5PVwic2hhMzg0LUIwdlA1eG1BVHcxK0s5S1JRalFFUkp2VHVtUVcwblBFenZGNkwvWjZucm9uSjNvVU9GVUZwQ2pFVVFvdXEyK2xcIlxuICAgICAgICAgIGNyb3NzT3JpZ2luPVwiYW5vbnltb3VzXCJcbiAgICAgICAgLz5cbiAgICAgIDwvSGVhZD5cbiAgICAgIDxzcGFuIGlkPVwicHVudG9hXCI+PC9zcGFuPlxuICAgICAgPHNlY3Rpb24gaWQ9XCJoZWFkZXJcIiBjbGFzc05hbWU9XCJzdGlja3ktdG9wXCI+XG4gICAgICAgIDxkaXYgaWQ9XCJoZWFkZXJkb3NcIj5cbiAgICAgICAgICA8QmllbnZlbmlkbyBjbGFzc05hbWU9XCJqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlblwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkaXZCaWVudmVuaWRvXCI+XG4gICAgICAgICAgICAgIDxUZXh0b0JpZW52ZW5pZG8gaWQ9XCJ3ZWxjb21lXCI+XG4gICAgICAgICAgICAgICAgQmllbnZlbmlkbyBhIEhhbmQgSGVsZCBTb2x1dGlvbnNcbiAgICAgICAgICAgICAgPC9UZXh0b0JpZW52ZW5pZG8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxTb2NpYWxNZWRpYT5cbiAgICAgICAgICAgICAgPGRpdiBpZD1cIndhXCI+XG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL3dhLm1lL21lc3NhZ2UvS1pTSFg1Rk9XQVNHRjFcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxMb2dvUmVkZXNcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicmVkZXNcIlxuICAgICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL3doYXRzX2xzdHFlZC53ZWJwXCJcbiAgICAgICAgICAgICAgICAgICAgYWx0PVwibG9nbyB3aGF0c2FwcFwiXG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgaWQ9XCJmYlwiPlxuICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0hhbmRIZWxkU29sdXRpb25zT2ZpY2lhbFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPExvZ29SZWRlc1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZWRlc1wiXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvMl9ycjZmZ3oud2VicFwiXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cImxvZ28gZmFjZWJvb2tcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGlkPVwiaW5cIj5cbiAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9jb21wYW55L2hhbmRoZWxkc29sdXRpb25zL1wiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPExvZ29SZWRlc1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZWRlc1wiXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvaW5fd2ZhMngyLndlYnBcIlxuICAgICAgICAgICAgICAgICAgICBhbHQ9XCJsb2dvIGxpbmtlZGluXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBpZD1cInl0XCI+XG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDalZQS1RWVnMwTi1vVnB1TGl6RUZhd1wiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPExvZ29SZWRlc1lUXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJlZGVzXCJcbiAgICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy95b3V0dWJlX283NXk0Zi53ZWJwXCJcbiAgICAgICAgICAgICAgICAgICAgYWx0PVwibG9nbyB5b3V0dWJlXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICA8ZGl2IGlkPVwidGlrdG9rXCI+XG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL3d3dy50aWt0b2suY29tL0BoYW5kaGVsZHNvbHV0aW9uc2hoc1wiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPExvZ29SZWRlc1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZWRlc1wiXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvdGlrdG9rLWljb24ud2VicFwiXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cImxvZ28gdGlrdG9rXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICA8L2Rpdj5cblx0XHRcdCAgXG4gICAgICAgICAgICAgIDxkaXYgaWQ9XCJpbnN0YWdyYW1cIj5cbiAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaGFuZF9oZWxkX3NvbHV0aW9ucy9cIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxMb2dvUmVkZXNcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicmVkZXNcIlxuICAgICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL2luc3RhZ3JhbS1pY29uLndlYnBcIlxuICAgICAgICAgICAgICAgICAgICBhbHQ9XCJsb2dvIGluc3RhZ3JhbVwiXG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgaWQ9XCJUd2l0dGVyXCI+XG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL3R3aXR0ZXIuY29tL0hhbmRIU29sdXRpb25zXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8TG9nb1JlZGVzXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJlZGVzXCJcbiAgICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9Ud2l0dGVyLWxvZ28ud2VicFwiXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cImxvZ28gaW5zdGFncmFtXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPC9Tb2NpYWxNZWRpYT5cbiAgICAgICAgICA8L0JpZW52ZW5pZG8+XG4gICAgICAgICAgPEhlYWRlckNvbnRhY3RvPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXBhcmFjaW9uXCI+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGEgb25DbGljaz17UmVkaXJpZ2lySU1HfT5cbiAgICAgICAgICAgICAgICAgIDxMb2dvXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvTE9HTy1ISFMud2VicFwiXG4gICAgICAgICAgICAgICAgICAgIC8qIHNyYz1cIi9pbWcvTE9HTy1BTklWRVJTQVJJTy5wbmdcIiAqL1xuICAgICAgICAgICAgICAgICAgICBhbHQ9XCJMb2dvIGhhbmQgaGVsZCBzb2x1dGlvbnNcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICB7c2l6ZSA8IDk5MSA/IChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFkZHJlc3NcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGFiZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPExsYW1hbm9zPsKhTGzDoW1hbm9zITwvTGxhbWFub3M+XG4gICAgICAgICAgICAgICAgICAgIDxOdW1lcm9SZXNwb25zaXZlXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICBocmVmPVwidGVsOiAoNTUpIDU1IDUxMTUgNjA0M1wiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPigrNTIpIDU1IDUxMTUgNjA0Mzwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICA8L051bWVyb1Jlc3BvbnNpdmU+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxMb2dvQ1xuICAgICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0xvZ290aXBvIENlbnRybyBkZSBTZXJ2aWNpbyBBdXRvcml6YWRvLnBuZ1wiXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cIkNlbnRybyBkZSBTZXJ2aWNpbyBBdXRvcml6YWRvXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8Qm90b25Db3JyZW9SZXNwb25zaXZlXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeSBidG4tYmxvY2sgYi1jb250XCJcbiAgICAgICAgICAgICAgICAgICAgaHJlZj1cIiNjb250YWN0b1wiXG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+Y29udGFjdG9AaGFuZGhlbGRzb2x1dGlvbnMuY29tLm14PC9zdHJvbmc+XG4gICAgICAgICAgICAgICAgICA8L0JvdG9uQ29ycmVvUmVzcG9uc2l2ZT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO1xuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsbGFtYW5vc1wiPlxuICAgICAgICAgICAgICAgICAgICA8TGxhbWFub3M+wqFMbMOhbWFub3MhPC9MbGFtYW5vcz5cbiAgICAgICAgICAgICAgICAgICAgPE51bWVyb1xuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeSBudW1ub1wiXG4gICAgICAgICAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgaHJlZj1cInRlbDooNTUpIDU1IDUxMTUgNjA0M1wiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPigrNTIpIDU1IDUxMTUgNjA0Mzwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICA8L051bWVybz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPExvZ29DXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvTG9nb3RpcG8gQ2VudHJvIGRlIFNlcnZpY2lvIEF1dG9yaXphZG8ucG5nXCJcbiAgICAgICAgICAgICAgICAgICAgYWx0PVwiQ2VudHJvIGRlIFNlcnZpY2lvIEF1dG9yaXphZG9cIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIHsvKiA8QXV0b3JpemFkbyBjbGFzc05hbWU9XCJsZVwiPlxuICAgICAgICAgICAgICAgICAgPHN0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2VudHJvIGRlIFNlcnZpY2lvIEF1dG9yaXphZG9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJyPjwvYnI+XG4gICAgICAgICAgICAgICAgICAgICAgICBDb250YW1vcyBjb24gSW5nZW5pZXJvcyBDZXJ0aWZpY2Fkb3MsIGhlcnJhbWllbnRhcyBlc3BlY2lhbGl6YWRhc1xuICAgICAgICAgICAgICAgICAgICAgICAgIHkgc29wb3J0ZSBuZWNlc2FyaW8gcGFyYSBsbGV2YXIgYSBjYWJvLCB0YXJlYXMgZGUgbWFudGVuaW1pZW50byB5IFxuICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGFyYWNpw7NuIGRlIGVxdWlwb3MgTmV3bGFuZC5cbiAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICA8L0F1dG9yaXphZG8+ICovfVxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZGRyZXNzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxCb3RvbkNvcnJlb1xuICAgICAgICAgICAgICAgICAgICAgIGhyZWY9XCIjY29udGFjdG9cIlxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeSBidG4tYmxvY2sgYi1jb250IHRhbVwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPmNvbnRhY3RvQGhhbmRoZWxkc29sdXRpb25zLmNvbS5teDwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICA8L0JvdG9uQ29ycmVvPlxuICAgICAgICAgICAgICAgICAgICA8RGlyZWNjaW9uIGNsYXNzTmFtZT1cImxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICAgIENhbGxlLiBQYWxlbnF1ZSwmbmJzcDtDb2wuIExldHLDoW4gVmFsbGUsIEFsY2FsZMOtYSBCZW5pdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIEp1w6FyZXpcbiAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICA8YnI+PC9icj5cbiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPiZuYnNwO0NETVgsIEMuUC4gMDM2NTAsIE3DqXhpY288L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICA8YnI+PC9icj5cbiAgICAgICAgICAgICAgICAgICAgPC9EaXJlY2Npb24+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvSGVhZGVyQ29udGFjdG8+XG4gICAgICAgICAge3NpemUgPCA4MDAgPyA8VGFyamV0YURvcyAvPiA6IDxUYXJqZXRhIC8+fVxuICAgICAgICAgIFxuICAgICAgICAgICAge3NpemUgPCA5OTUgPyBcbiAgICAgICAgICAgIDxNZW51UmVzPlxuICAgICAgICAgICAgPE5hdmJhciBjb2xsYXBzZU9uU2VsZWN0ICBleHBhbmQ9J3h4bCcgYmc9J2RhcmsnIHZhcmlhbnQ9J2RhcmsnID5cbiAgICAgICAgICAgICAgICA8TmF2YmFyLlRvZ2dsZSBhcmlhLWNvbnRyb2xzPSdyZXNwb25zaXZlLW5hdmJhci1uYXYnIGNsYXNzTmFtZT1cIm5hdmJhdVwiLz5cbiAgICAgICAgICAgICAgICA8TmF2YmFyLkNvbGxhcHNlIGlkPSdyZXNwb25zaXZlLW5hdmJhci1uYXYnPlxuICAgICAgICAgICAgICAgICAgPE5hdj5cbiAgICAgICAgICAgICAgICAgICAgPE5hdi5MaW5rIGhyZWY9XCIvXCI+SW5pY2lvPC9OYXYuTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPE5hdkRyb3Bkb3duIHRpdGxlPVwiUmVudGFcIiBpZD1cImJhc2ljLW5hdi1kcm9wZG93blwiID5cbiAgICAgICAgICAgICAgICAgICAgICA8TmF2RHJvcGRvd24uSXRlbSBocmVmPVwicmVudGEtZGUtaGFuZGhlbGRzXCI+SGFuZGhlbGRzPC9OYXZEcm9wZG93bi5JdGVtPlxuICAgICAgICAgICAgICAgICAgICAgIDxOYXZEcm9wZG93bi5JdGVtIGhyZWY9XCJyZW50YS1kZS1pbXByZXNvcmFzLWRlLWV0aXF1ZXRhc1wiPkltcHJlc29yYXM8L05hdkRyb3Bkb3duLkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPE5hdkRyb3Bkb3duLkl0ZW0gaHJlZj1cInJlbnRhLWRlLWxlY3RvcmVzLWRlLWNvZGlnb3MtZGUtYmFycmFzXCI+TGVjdG9yZXM8L05hdkRyb3Bkb3duLkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgIDwvTmF2RHJvcGRvd24+XG4gICAgICAgICAgICAgICAgICAgIDxOYXZEcm9wZG93biB0aXRsZT1cIlJlcGFyYWNpw7NuXCIgaWQ9XCJiYXNpYy1uYXYtZHJvcGRvd25cIj5cbiAgICAgICAgICAgICAgICAgICAgICA8TmF2RHJvcGRvd24uSXRlbSBocmVmPVwicmVwYXJhY2lvbi1kZS1oYW5kaGVsZHNcIj5IYW5kaGVsZHM8L05hdkRyb3Bkb3duLkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPE5hdkRyb3Bkb3duLkl0ZW0gaHJlZj1cInJlcGFyYWNpb24tZGUtaW1wcmVzb3Jhcy1kZS1ldGlxdWV0YXNcIj5JbXByZXNvcmFzPC9OYXZEcm9wZG93bi5JdGVtPlxuICAgICAgICAgICAgICAgICAgICAgIDxOYXZEcm9wZG93bi5JdGVtIGhyZWY9XCJyZXBhcmFjaW9uLWRlLWxlY3RvcmVzLWRlLWNvZGlnb3MtZGUtYmFycmFzXCI+TGVjdG9yZXM8L05hdkRyb3Bkb3duLkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgIDwvTmF2RHJvcGRvd24+XG4gICAgICAgICAgICAgICAgICAgIDxOYXZEcm9wZG93biB0aXRsZT1cIlZlbnRhXCIgaWQ9XCJiYXNpYy1uYXYtZHJvcGRvd25cIj5cbiAgICAgICAgICAgICAgICAgICAgICA8TmF2RHJvcGRvd24uSXRlbSBocmVmPVwidmVudGEtZGUtaGFuZGhlbGRzXCI+SGFuZGhlbGRzPC9OYXZEcm9wZG93bi5JdGVtPlxuICAgICAgICAgICAgICAgICAgICAgIDxOYXZEcm9wZG93bi5JdGVtIGhyZWY9XCJ2ZW50YS1kZS1pbXByZXNvcmFzLWRlLWV0aXF1ZXRhc1wiPkltcHJlc29yYXM8L05hdkRyb3Bkb3duLkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPE5hdkRyb3Bkb3duLkl0ZW0gaHJlZj1cInZlbnRhLWRlLWxlY3RvcmVzLWRlLWNvZGlnb3MtZGUtYmFycmFzXCI+TGVjdG9yZXM8L05hdkRyb3Bkb3duLkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPE5hdkRyb3Bkb3duLkl0ZW0gaHJlZj1cInZlbnRhLWRlLWFjY2Vzb3Jpb3MteS1jb25zdW1pYmxlc1wiPkFjY2Vzb3Jpb3MgeSBDb25zdW1pYmxlczwvTmF2RHJvcGRvd24uSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICA8TmF2RHJvcGRvd24uSXRlbSBocmVmPVwidmVudGEtZnVuZGFzLWhhbmRoZWxkLWltcHJlc29yYS1wb3J0YXRpbFwiPkZ1bmRhczwvTmF2RHJvcGRvd24uSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgPC9OYXZEcm9wZG93bj5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxOYXYuTGluayBocmVmPVwiL0RTRC12ZW50YS1lbi1ydXRhXCI+U29sdWNpw7NuIERTRDwvTmF2Lkxpbms+XG4gICAgICAgICAgICAgICAgICAgIDxOYXYuTGluayBocmVmPVwiL3ZlbnRhLWZ1bmRhcy1oYW5kaGVsZC1pbXByZXNvcmEtcG9ydGF0aWxcIj5GdW5kYXM8L05hdi5MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8TmF2LkxpbmsgaHJlZj1cIi9pbXByZXNpb24tY3JlZGVuY2lhbGVzLXRhcmpldGFzLWdhZmV0ZXMtcHZjXCI+SW1wcmVzacOzbiBkZSBjcmVkZW5jaWFsZXM8L05hdi5MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8TmF2LkxpbmsgaHJlZj1cIi9pbXByZXNpb24tZXRpcXVldGFzXCI+SW1wcmVzacOzbiBkZSBldGlxdWV0YXM8L05hdi5MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8TmF2IGNsYXNzTmFtZT1cInJlc3Bvbm1lbnVcIiBvbkNsaWNrPXthYnJpck1vZGFsUHJvbW9jaW9uZXN9PlByb21vY2lvbmVzPC9OYXY+XG4gICAgICAgICAgICAgICAgICAgIDxOYXYgY2xhc3NOYW1lPVwicmVzcG9ubWVudVwiIG9uQ2xpY2s9e2FicmlyTW9kYWx9PkFudW5jaW9zPC9OYXY+XG4gICAgICAgICAgICAgICAgICAgIDxOYXYgY2xhc3NOYW1lPVwicmVzcG9ubWVudVwiIG9uQ2xpY2s9e1JlZGlyaWdpclZpZGVvc30+VmlkZW9zPC9OYXY+XG4gICAgICAgICAgICAgICAgICAgIDxOYXYgY2xhc3NOYW1lPVwicmVzcG9ubWVudVwiIG9uQ2xpY2s9e1JlZGlyaWdpckNvbnRhY3RvfT5Db250YWN0bzwvTmF2PlxuICAgICAgICAgICAgICAgICAgPC9OYXY+XG4gICAgICAgICAgICAgICAgPC9OYXZiYXIuQ29sbGFwc2U+XG4gICAgICAgICAgICA8L05hdmJhcj5cbiAgICAgICAgICA8L01lbnVSZXM+XG4gICAgICAgICAgICA6IFxuICAgICAgICAgICAgPE1lbnU+XG4gICAgICAgICAgICA8UGVzdGFuYXMgaWQ9XCJtZW51XCI+XG4gICAgICAgICAgICAgIDxQZXN0YW5hc0xpc3RhPlxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxUaXR1bG9zSGVhZGVyIGNsYXNzTmFtZT1cImVubGFjZXNcIiBvbkNsaWNrPXtSZWRpcmlnaXJJbmljaW99PlxuICAgICAgICAgICAgICAgICAgICBJbmljaW9cbiAgICAgICAgICAgICAgICAgIDwvVGl0dWxvc0hlYWRlcj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxUaXR1bG9zSGVhZGVyIGNsYXNzTmFtZT1cImVubGFjZXNcIj5SZW50YTwvVGl0dWxvc0hlYWRlcj5cbiAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvcmVudGEtZGUtaGFuZGhlbGRzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJsZXRyYXMtZW5sYWNlc1wiPkhhbmRoZWxkczwvYT5cbiAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL3JlbnRhLWRlLWltcHJlc29yYXMtZGUtZXRpcXVldGFzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJsZXRyYXMtZW5sYWNlc1wiPkltcHJlc29yYXM8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9yZW50YS1kZS1sZWN0b3Jlcy1kZS1jb2RpZ29zLWRlLWJhcnJhc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwibGV0cmFzLWVubGFjZXNcIj5MZWN0b3JlczwvYT5cbiAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgPFRpdHVsb3NIZWFkZXIgY2xhc3NOYW1lPVwiZW5sYWNlc1wiPlJlcGFyYWNpw7NuPC9UaXR1bG9zSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9yZXBhcmFjaW9uLWRlLWhhbmRoZWxkc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwibGV0cmFzLWVubGFjZXNcIj5IYW5kaGVsZHM8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9yZXBhcmFjaW9uLWRlLWltcHJlc29yYXMtZGUtZXRpcXVldGFzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJsZXRyYXMtZW5sYWNlc1wiPkltcHJlc29yYXM8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9yZXBhcmFjaW9uLWRlLWxlY3RvcmVzLWRlLWNvZGlnb3MtZGUtYmFycmFzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJsZXRyYXMtZW5sYWNlc1wiPkxlY3RvcmVzPC9hPlxuICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICA8VGl0dWxvc0hlYWRlciBjbGFzc05hbWU9XCJlbmxhY2VzXCI+VmVudGE8L1RpdHVsb3NIZWFkZXI+XG4gICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL3ZlbnRhLWRlLWhhbmRoZWxkc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwibGV0cmFzLWVubGFjZXNcIj5IYW5kaGVsZHM8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi92ZW50YS1kZS1pbXByZXNvcmFzLWRlLWV0aXF1ZXRhc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwibGV0cmFzLWVubGFjZXNcIj5JbXByZXNvcmFzPC9hPlxuICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvdmVudGEtZGUtbGVjdG9yZXMtZGUtY29kaWdvcy1kZS1iYXJyYXNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImxldHJhcy1lbmxhY2VzXCI+TGVjdG9yZXM8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi92ZW50YS1kZS1hY2Nlc29yaW9zLXktY29uc3VtaWJsZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImxldHJhcy1lbmxhY2VzXCI+QWNjZXNvcmlvcyB5IENvbnN1bWlibGVzPC9hPlxuICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvdmVudGEtZnVuZGFzLWhhbmRoZWxkLWltcHJlc29yYS1wb3J0YXRpbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwibGV0cmFzLWVubGFjZXNcIj5GdW5kYXM8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvRFNELXZlbnRhLWVuLXJ1dGFcIj5cbiAgICAgICAgICAgICAgICAgICAgPFRpdHVsb3NIZWFkZXIgY2xhc3NOYW1lPVwiZW5sYWNlc1wiPlxuICAgICAgICAgICAgICAgICAgICAgIFNvbHVjacOzbiBEU0RcbiAgICAgICAgICAgICAgICAgICAgPC9UaXR1bG9zSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi92ZW50YS1mdW5kYXMtaGFuZGhlbGQtaW1wcmVzb3JhLXBvcnRhdGlsXCI+XG4gICAgICAgICAgICAgICAgICAgIDxUaXR1bG9zSGVhZGVyIGNsYXNzTmFtZT1cImVubGFjZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgICBGdW5kYXNcbiAgICAgICAgICAgICAgICAgICAgPC9UaXR1bG9zSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9pbXByZXNpb24tY3JlZGVuY2lhbGVzLXRhcmpldGFzLWdhZmV0ZXMtcHZjXCI+XG4gICAgICAgICAgICAgICAgICAgIDxUaXR1bG9zSGVhZGVyIGNsYXNzTmFtZT1cImVubGFjZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgSW1wcmVzacOzbiBjcmVkZW5jaWFsZXNcbiAgICAgICAgICAgICAgICAgICAgPC9UaXR1bG9zSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9pbXByZXNpb24tZXRpcXVldGFzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxUaXR1bG9zSGVhZGVyIGNsYXNzTmFtZT1cImVubGFjZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgSW1wcmVzacOzbiBldGlxdWV0YXNcbiAgICAgICAgICAgICAgICAgICAgPC9UaXR1bG9zSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgPFRpdHVsb3NIZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZW5sYWNlc1wiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2FicmlyTW9kYWxQcm9tb2Npb25lc31cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgUHJvbW9jaW9uZXNcbiAgICAgICAgICAgICAgICAgIDwvVGl0dWxvc0hlYWRlcj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxUaXR1bG9zSGVhZGVyIGNsYXNzTmFtZT1cImVubGFjZXNcIiBvbkNsaWNrPXthYnJpck1vZGFsfT5cbiAgICAgICAgICAgICAgICAgICAgQW51bmNpb3NcbiAgICAgICAgICAgICAgICAgIDwvVGl0dWxvc0hlYWRlcj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxUaXR1bG9zSGVhZGVyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVubGFjZXNcIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtSZWRpcmlnaXJWaWRlb3N9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIFZpZGVvc1xuICAgICAgICAgICAgICAgICAgPC9UaXR1bG9zSGVhZGVyPlxuICAgICAgICAgICAgICAgIDwvbGk+XG5cbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICA8VGl0dWxvc0hlYWRlclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJlbmxhY2VzXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17UmVkaXJpZ2lyQ29udGFjdG99XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIENvbnRhY3RvXG4gICAgICAgICAgICAgICAgICA8L1RpdHVsb3NIZWFkZXI+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgPC9QZXN0YW5hc0xpc3RhPlxuICAgICAgICAgICAgPC9QZXN0YW5hcz5cbiAgICAgICAgICAgIDwvTWVudT5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPE1vZGFsXG4gICAgICAgICAgc2hvdz17YWJpZXJ0b0FudW5jaW9zfVxuICAgICAgICAgIG9uSGlkZT17Y2VycmFyTW9kYWx9XG4gICAgICAgICAga2V5Ym9hcmQ9e2ZhbHNlfVxuICAgICAgICAgIHNpemU9XCJsZ1wiXG4gICAgICAgICAgY2xhc3NOYW1lPVwibW9kYWwtYWx0dXJhXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxNb2RhbC5IZWFkZXIgY2xvc2VCdXR0b24+XG4gICAgICAgICAgICA8TW9kYWwuVGl0bGU+IEFudW5jaW9zPC9Nb2RhbC5UaXRsZT5cbiAgICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgICA8TW9kYWwuQm9keT5cbiAgICAgICAgICAgIDxDYXJvdXNlbD5cbiAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvTGVjdG9yIFN5YmxlIFhCLTYyNjZNQlQucG5nXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJMZWN0b3IgZGUgY8OzZGlnb3MgWEItNjI2Nk1CVFwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0NUNDAgSG9uZXl3ZWxsLnBuZ1wiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZGhlbGQgQ1Q0MFwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICB7LyogPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9CYW5uZXIgUHJvbW8gM3gyLmdpZlwiXG4gICAgICAgICAgICAgICAgYWx0PVwiQmFubmVyIFByb21vIDN4MlwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0Jhbm5lciBQcm9tbyAyeDEuZ2lmXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJCYW5uZXIgUHJvbW8gMngxXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvY3Vwb24gZGUgZGVzY3VlbnRvIDIwMjIuZ2lmXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJjdXBvbiBkZSBkZXNjdWVudG8gMjAyMlwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+ICovfVxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9SZW50YSBkZSBoYW5kaGVsZCBNQzMzLndlYnBcIlxuICAgICAgICAgICAgICAgIGFsdD1cIlJlbnRhIGRlIGhhbmRoZWxkIE1DMzNcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvUmVudGEgZGUgaGFuZGhlbGQgQ0s2NS53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJSZW50YSBkZSBoYW5kaGVsZCBDSzY1XCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9pbXByZXNvcmFzX2Vwc29uLndlYnBcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiSW1wcmVzb3JhcyBFcHNvblwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL2V2b2xpc19hZGlraW8ud2VicFwiXG4gICAgICAgICAgICAgICAgICBhbHQ9XCJldm9saXMgYWRpa2lvXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9ldm9saXNfaW1wcmVzb3Jhcy53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cImV2b2xpcyBpbXByZXNvcmFzXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIHsvKiA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvaW1wcmVzb3JhX0lNWjMyMC53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIlJlbnRhIGRlIEltcHJlc29yYSBJTVozMjBcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT4gKi99XG4gICAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9JTUFHRU5fWkVCUkFfQkFOTkVSXzgwMFg1MDBfbHlxbnB1LndlYnBcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiWmVicmEgSGFuZCBIZWxkIEltcHJlc29yYXMgTGVjdG9yZXNcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICAgPFB1bnRlcm8gb25DbGljaz17UmVkaXJpZ2lyfT5cbiAgICAgICAgICAgICAgICAgIDxJbWdNb2RhbFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIFwiXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvQ29waWFfZGVfcMOzbGl6YXNfcmVwYXJhY2nDs25fc2cweGltLndlYnBcIlxuICAgICAgICAgICAgICAgICAgICBhbHQ9XCJQb2xpemFzIGRlIHJlcGFyYWNpb24gaGFuZGhlbGQgaW1wcmVzb3JhcyBkZSBldGlxdWV0YXMgeSBsZWN0b3Jlc1wiXG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvUHVudGVybz5cbiAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICB7LyogPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNsaWNrc1wiXG4gICAgICAgICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvX04xYXE4WUprYzRcIlxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxJbWdNb2RhbFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIFwiXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvSGFuZGhlbGQgTUMyMjAwIHkgTUMyNzAwLmdpZlwiXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cIkhhbmRoZWxkcyBNQzIyMDAgeSBNQzI3MDBcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT4gKi99XG4gICAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgIDxJbWdNb2RhbFxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayBcIlxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9JTUFHRU5fWkVCUkFfQkFOTkVSXzgwMFg1MDBfdnI2cDFkLndlYnBcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiWmVicmEgSGFuZCBIZWxkIEltcHJlc29yYXMgTGVjdG9yZXNcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgey8qIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgIDxQdW50ZXJvXG4gICAgICAgICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGloYXdxcm50L2ltYWdlL3VwbG9hZC92MTYyMzA5ODAxMi9iYW5uZXIvRURBNjFLX0ZCX28yb2JvZC5wbmdcIlxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxJbWdNb2RhbFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIFwiXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvRURBNjFLX1dFQl9sdXFuZnMud2VicFwiXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cIkhhbmQgSGVsZCBFREE2MUsgWmVicmFcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L1B1bnRlcm8+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT4gKi99XG4gICAgICAgICAgICAgIHsvKiA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgICA8UHVudGVyb1xuICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RpaGF3cXJudC9pbWFnZS91cGxvYWQvdjE2MjMwOTgwMTAvYmFubmVyL2NrNjVfRkJfMV9yajh6M3UucG5nXCJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8SW1nTW9kYWxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayBcIlxuICAgICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0NLNjVfV0VCX2w5YWttMy53ZWJwXCJcbiAgICAgICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIENLNjUgWmVicmFcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L1B1bnRlcm8+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT4gKi99XG4gICAgICAgICAgICA8L0Nhcm91c2VsPlxuICAgICAgICAgIDwvTW9kYWwuQm9keT5cbiAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBvbkNsaWNrPXtjZXJyYXJNb2RhbH0+XG4gICAgICAgICAgICAgIENlcnJhclxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgIDwvTW9kYWw+XG5cbiAgICAgICAgPE1vZGFsXG4gICAgICAgICAgc2hvdz17YWJpZXJ0b1Byb21vY2lvbmVzfVxuICAgICAgICAgIG9uSGlkZT17Y2VycmFyTW9kYWxQcm9tb2Npb25lc31cbiAgICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJtb2RhbC1hbHR1cmFcIlxuICAgICAgICA+XG4gICAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cbiAgICAgICAgICAgIDxNb2RhbC5UaXRsZT5Qcm9tb2Npb25lczwvTW9kYWwuVGl0bGU+XG4gICAgICAgICAgPC9Nb2RhbC5IZWFkZXI+XG4gICAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgICA8Q2Fyb3VzZWw+XG4gICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0hhbmRoZWxkIEVEQTUyLnBuZ1wiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZGhlbGQgRURBNTJcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9DVDQwIEhvbmV5d2VsbC5wbmdcIlxuICAgICAgICAgICAgICAgIGFsdD1cIkhhbmRoZWxkIENUNDBcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgey8qIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvQmFubmVyIFByb21vIDJ4MS5naWZcIlxuICAgICAgICAgICAgICAgIGFsdD1cIkJhbm5lciBQcm9tbyAyeDFcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9CYW5uZXIgUHJvbW8gM3gyLmdpZlwiXG4gICAgICAgICAgICAgICAgYWx0PVwiQmFubmVyIFByb21vIDN4MlwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL2N1cG9uIGRlIGRlc2N1ZW50byAyMDIyLmdpZlwiXG4gICAgICAgICAgICAgICAgYWx0PVwiY3Vwb24gZGUgZGVzY3VlbnRvIDIwMjJcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvUmVudGEgZGUgaGFuZGhlbGQgQ0s2NS53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJSZW50YSBkZSBoYW5kaGVsZCBDSzY1XCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL1JlbnRhIGRlIGhhbmRoZWxkIE1DMzMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUmVudGEgZGUgaGFuZGhlbGQgTUMzM1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvUHJvbW9jacOzbl9tYzkwOTBfZnVuY2lvbmFsX3BvODNzay53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIkhhbmQgSGVsZCBNQzkwOTBcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgIHsvKiA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL1Byb21vY2nDs25fZHMyMjc4LndlYnBcIlxuICAgICAgICAgICAgICAgIGFsdD1cIkxlY3RvciBEUzIyNzhcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL1Byb21vY2nDs25fQ041MS53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIkhhbmQgSGVsZCBJbnRlcm1lYyBIb25leXdlbGwgQ041MVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgey8qIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9Qcm9tb2Npw7NuX0NLNjUud2VicFwiXG4gICAgICAgICAgICAgICAgICBhbHQ9XCJIYW5kIEhlbGQgQ0s2NVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgICAgey8qIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9jdXBvbmJhbm5lci53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIkhhbmQgSGVsZCBNQzkxOTBcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT4gKi99XG4gICAgICAgICAgICAgIHsvKiA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvUHJvbW9jacOzbl9NQzkxOTBfc3JpY2I2LndlYnBcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIE1DOTE5MFwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgIDwvQ2Fyb3VzZWw+XG4gICAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICAgIDxNb2RhbC5Gb290ZXI+XG4gICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJsaWdodFwiIG9uQ2xpY2s9e2NlcnJhck1vZGFsUHJvbW9jaW9uZXN9PlxuICAgICAgICAgICAgICBDZXJyYXJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgICAgICA8L01vZGFsPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSGVhZGVyO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var Llamanos = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("p", false ? undefined : {
    target: "ea6yc6s12",
    label: "Llamanos"
  })(false ? undefined : {
    name: "odja5w",
    styles: "font-size:20px;color:black;font-weight:bold;text-align:center;padding-top:5px;@media (max-width: 1950px){font-size:18px;padding-top:0px;}@media (max-width: 991px){margin-right:11px;margin-left:32px;}@media (max-width: 781px){font-size:18px;margin-right:11px;margin-left:22px;}@media (max-width: 450px){font-size:12px;margin-right:5px;margin-left:19px;}@media (max-width: 300px){margin-right:5px;margin-left:0px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var Numero = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("a", false ? undefined : {
    target: "ea6yc6s11",
    label: "Numero"
  })(false ? undefined : {
    name: "1gkzyv6",
    styles: "margin-top:-15px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var NumeroResponsive = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("a", false ? undefined : {
    target: "ea6yc6s10",
    label: "NumeroResponsive"
  })(false ? undefined : {
    name: "knfnx4",
    styles: "margin-top:0px;margin-bottom:10px;@media (max-width: 781px){width:44%;font-size:13px!important;}@media (max-width: 540px){width:45%;font-size:11px!important;}@media (max-width: 450px){width:46%;font-size:9px!important;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var BotonCorreo = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("a", false ? undefined : {
    target: "ea6yc6s9",
    label: "BotonCorreo"
  })(false ? undefined : {
    name: "4y5ajl",
    styles: "text-align:center;font-size:17px;height:38px;width:64%;margin:0px auto;font-weight:bold;@media (max-width: 1950px){font-size:16px!important;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var BotonCorreoResponsive = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("a", false ? undefined : {
    target: "ea6yc6s8",
    label: "BotonCorreoResponsive"
  })(false ? undefined : {
    name: "9x144n",
    styles: "text-align:center;font-size:17px;height:38px;width:64%;margin:0px auto;font-weight:bold;@media (max-width: 781px){width:43%;font-size:13px!important;height:32px;}@media (max-width: 540px){width:39%;font-size:11px!important;}@media (max-width: 450px){width:40%;font-size:9px!important;height:26px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var Direccion = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("p", false ? undefined : {
    target: "ea6yc6s7",
    label: "Direccion"
  })(false ? undefined : {
    name: "dj70dl",
    styles: "font-size:14px;padding-top:11px;text-align:center;width:100%;margin:0px auto;@media (max-width: 1950px){font-size:14px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });
  /* const Autorizado = styled.p`
      font-size: 10px;
      padding-top: 11px;
      text-align: left;
      width: 20%;
      margin: 15px auto;
  
      @media (max-width: 1950px) {
        font-size: 10px;
      }
    `; */


  var Menu = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {
    target: "ea6yc6s6",
    label: "Menu"
  })(false ? undefined : {
    name: "cg9k2k",
    styles: "height:auto;background-color:black;padding-top:5px;@media (max-width: 1950px){height:auto;padding-top:3px;}",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var MenuRes = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("div", false ? undefined : {
    target: "ea6yc6s5",
    label: "MenuRes"
  })(false ? undefined : {
    name: "gocyy4",
    styles: "height:37px;background-color:black;padding-top:5px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var Pestanas = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("nav", false ? undefined : {
    target: "ea6yc6s4",
    label: "Pestanas"
  })(false ? undefined : {
    name: "17ynatk",
    styles: "justify-content:center;margin-top:-4px;max-height:50px",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var PestanasLista = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("ul", false ? undefined : {
    target: "ea6yc6s3",
    label: "PestanasLista"
  })(false ? undefined : {
    name: "wioeha",
    styles: "display:flex;height:auto;justify-content:center;text-decoration:none;list-style:none",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var Puntero = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("a", false ? undefined : {
    target: "ea6yc6s2",
    label: "Puntero"
  })(false ? undefined : {
    name: "e0dnmk",
    styles: "cursor:pointer",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var ImgModal = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("img", false ? undefined : {
    target: "ea6yc6s1",
    label: "ImgModal"
  })(false ? undefined : {
    name: "16na1d5",
    styles: "max-width:100%!important;min-width:100%!important;max-height:100%!important;min-height:100%!important",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var TitulosHeader = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__["default"])("p", false ? undefined : {
    target: "ea6yc6s0",
    label: "TitulosHeader"
  })(false ? undefined : {
    name: "1u81noh",
    styles: "margin-top:0px!important",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXEhlYWRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrUmdDIiwiZmlsZSI6IkM6XFxVc2Vyc1xcamhpbm9cXERlc2t0b3BcXGNvZGlnbyBkZSBwcnVlYmEgSEhTXFxjb21wb25lbnRzXFxsYXlvdXRcXEhlYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwiQGVtb3Rpb24vc3R5bGVkXCI7XG5pbXBvcnQgTGluayBmcm9tIFwibmV4dC9saW5rXCI7XG5pbXBvcnQgSGVhZCBmcm9tIFwibmV4dC9oZWFkXCI7XG5pbXBvcnQgVGFyamV0YSBmcm9tIFwiLi4vbGF5b3V0L1RhcmpldGFcIjtcbmltcG9ydCBUYXJqZXRhRG9zIGZyb20gXCIuLi9sYXlvdXQvVGFyamV0YURvc1wiO1xuaW1wb3J0IHsgTW9kYWwsIENhcm91c2VsLCBCdXR0b24sIE5hdmJhciwgTmF2LCBOYXZEcm9wZG93biwgSXRlbSB9IGZyb20gXCJyZWFjdC1ib290c3RyYXBcIjtcbmltcG9ydCBSb3V0ZXIgZnJvbSBcIm5leHQvcm91dGVyXCI7XG5cbmltcG9ydCB1c2VXaW5kb3dTaXplIGZyb20gXCIuLi8uLi9ob29rcy91c2VXaW5kb3dTaXplXCI7XG5cbmNvbnN0IEhlYWRlciA9ICgpID0+IHtcbiAgY29uc3QgQmllbnZlbmlkbyA9IHN0eWxlZC5kaXZgXG4gICAgbWluLXdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNzZjMDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHBhZGRpbmctdG9wOiAxMXB4O1xuICBgO1xuXG4gIGNvbnN0IFRleHRvQmllbnZlbmlkbyA9IHN0eWxlZC5oMWBcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgZm9udC1zaXplOiAyNXB4O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIG1hcmdpbi1sZWZ0OiAyNXB4O1xuICAgIG1hcmdpbi10b3A6IDRweDtcbiAgICBmb250LWZhbWlseTogXCJSYWxld2F5XCIsIHNhbnMtc2VyaWY7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTk1MHB4KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTlweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogODgxcHgpIHtcbiAgICAgIG1hcmdpbi10b3A6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgU29jaWFsTWVkaWEgPSBzdHlsZWQuZGl2YFxuICAgIGhlaWdodDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDgxcHgpIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDBweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDI4cHgpIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDhweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgTG9nb1JlZGVzID0gc3R5bGVkLmltZ2BcbiAgICB3aWR0aDogNDBweDtcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAgbWFyZ2luLXJpZ2h0OiAyNXB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE5NTBweCkge1xuICAgICAgICB3aWR0aDogMjVweDtcbiAgICAgICAgaGVpZ2h0OiAyNXB4O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBMb2dvUmVkZXNZVCA9IHN0eWxlZC5pbWdgXG4gICAgd2lkdGg6IDUwcHg7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIG1hcmdpbi1yaWdodDogMjVweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgICAgd2lkdGg6IDMwcHg7XG4gICAgICAgIGhlaWdodDogMjVweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgSGVhZGVyQ29udGFjdG8gPSBzdHlsZWQuZGl2YFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIG1pbi13aWR0aDogMTAwJSAhaW1wb3J0YW50O1xuICBgO1xuXG4gIGNvbnN0IExvZ28gPSBzdHlsZWQuaW1nYFxuICAgIGhlaWdodDogOTNweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgICAgaGVpZ2h0OiAxMjBweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDUwcHgpIHtcbiAgICAgIGhlaWdodDogODBweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMzUwcHgpIHtcbiAgICAgIGhlaWdodDogNjVweDtcbiAgICB9XG4gIGA7XG4gIGNvbnN0IExvZ29DPSBzdHlsZWQuaW1nYFxuICAgIGhlaWdodDogOTNweDtcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgICAgaGVpZ2h0OiAxMjBweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDUwcHgpIHtcbiAgICAgIGhlaWdodDogODBweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMzUwcHgpIHtcbiAgICAgIGhlaWdodDogNjBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgTGxhbWFub3MgPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgY29sb3I6IGJsYWNrO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBwYWRkaW5nLXRvcDogNXB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE5NTBweCkge1xuICAgICAgICBmb250LXNpemU6IDE4cHg7XG4gICAgICAgIHBhZGRpbmctdG9wOiAwcHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDk5MXB4KSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDExcHg7XG4gICAgICBtYXJnaW4tbGVmdDogMzJweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzgxcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMTFweDtcbiAgICAgIG1hcmdpbi1sZWZ0OiAyMnB4O1xuICAgIH1cblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiA0NTBweCkge1xuICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgICBtYXJnaW4tbGVmdDogMTlweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMzAwcHgpIHtcbiAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgICAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgTnVtZXJvID0gc3R5bGVkLmFgXG4gICAgbWFyZ2luLXRvcDogLTE1cHg7XG4gICAgXG4gIGA7XG5cbiAgY29uc3QgTnVtZXJvUmVzcG9uc2l2ZSA9IHN0eWxlZC5hYFxuICAgIG1hcmdpbi10b3A6IDBweDtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc4MXB4KSB7XG4gICAgICB3aWR0aDogNDQlO1xuICAgICAgZm9udC1zaXplOiAxM3B4ICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDU0MHB4KSB7XG4gICAgICB3aWR0aDogNDUlO1xuICAgICAgZm9udC1zaXplOiAxMXB4ICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDQ1MHB4KSB7XG4gICAgICB3aWR0aDogNDYlO1xuICAgICAgZm9udC1zaXplOiA5cHggIWltcG9ydGFudDtcbiAgICB9XG4gIGA7XG5cbiAgY29uc3QgQm90b25Db3JyZW8gPSBzdHlsZWQuYWBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAxN3B4O1xuICAgIGhlaWdodDogMzhweDtcbiAgICB3aWR0aDogNjQlO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTk1MHB4KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweCAhaW1wb3J0YW50O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBCb3RvbkNvcnJlb1Jlc3BvbnNpdmUgPSBzdHlsZWQuYWBcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAxN3B4O1xuICAgIGhlaWdodDogMzhweDtcbiAgICB3aWR0aDogNjQlO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzgxcHgpIHtcbiAgICAgIHdpZHRoOiA0MyU7XG4gICAgICBmb250LXNpemU6IDEzcHggIWltcG9ydGFudDtcbiAgICAgIGhlaWdodDogMzJweDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNTQwcHgpIHtcbiAgICAgIHdpZHRoOiAzOSU7XG4gICAgICBmb250LXNpemU6IDExcHggIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNDUwcHgpIHtcbiAgICAgIHdpZHRoOiA0MCU7XG4gICAgICBmb250LXNpemU6IDlweCAhaW1wb3J0YW50O1xuICAgICAgaGVpZ2h0OiAyNnB4O1xuICAgIH1cbiAgYDtcblxuICBjb25zdCBEaXJlY2Npb24gPSBzdHlsZWQucGBcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgcGFkZGluZy10b3A6IDExcHg7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTk1MHB4KSB7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgfVxuICBgO1xuXG4vKiBjb25zdCBBdXRvcml6YWRvID0gc3R5bGVkLnBgXG4gICAgZm9udC1zaXplOiAxMHB4O1xuICAgIHBhZGRpbmctdG9wOiAxMXB4O1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgd2lkdGg6IDIwJTtcbiAgICBtYXJnaW46IDE1cHggYXV0bztcblxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxOTUwcHgpIHtcbiAgICAgIGZvbnQtc2l6ZTogMTBweDtcbiAgICB9XG4gIGA7ICovXG5cbiAgY29uc3QgTWVudSA9IHN0eWxlZC5kaXZgXG4gICAgaGVpZ2h0OiBhdXRvO1xuICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xuICAgIHBhZGRpbmctdG9wOiA1cHg7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTk1MHB4KSB7XG4gICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICBwYWRkaW5nLXRvcDogM3B4O1xuICAgIH1cblxuICBgO1xuXG4gIGNvbnN0IE1lbnVSZXMgPSBzdHlsZWQuZGl2YFxuICAgIGhlaWdodDogMzdweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcbiAgICBwYWRkaW5nLXRvcDogNXB4O1xuICBgO1xuXG4gIGNvbnN0IFBlc3RhbmFzID0gc3R5bGVkLm5hdmBcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBtYXJnaW4tdG9wOiAtNHB4O1xuICAgIG1heC1oZWlnaHQ6IDUwcHg7XG4gIGA7XG5cbiAgY29uc3QgUGVzdGFuYXNMaXN0YSA9IHN0eWxlZC51bGBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGhlaWdodDogYXV0bztcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgYDtcblxuICBjb25zdCBQdW50ZXJvID0gc3R5bGVkLmFgXG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICBgO1xuXG4gIGNvbnN0IEltZ01vZGFsID0gc3R5bGVkLmltZ2BcbiAgICBtYXgtd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcbiAgICBtaW4td2lkdGg6IDEwMCUgIWltcG9ydGFudDtcbiAgICBtYXgtaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7XG4gICAgbWluLWhlaWdodDogMTAwJSAhaW1wb3J0YW50O1xuICBgO1xuXG4gIGNvbnN0IFRpdHVsb3NIZWFkZXIgPSBzdHlsZWQucGBcbiAgICBtYXJnaW4tdG9wOiAwcHggIWltcG9ydGFudDtcbiAgYDtcblxuICBjb25zdCBzaXplID0gdXNlV2luZG93U2l6ZSgpO1xuXG4gIGNvbnN0IFthYmllcnRvQW51bmNpb3MsIGNhbWJpYXJBYmllcnRvQW51bmNpb3NdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbYWJpZXJ0b1Byb21vY2lvbmVzLCBjYW1iaWFyUHJvbW9jaW9uZXNdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGFicmlyTW9kYWwgPSAoKSA9PiB7XG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBjZXJyYXJNb2RhbCA9ICgpID0+IHtcbiAgICBjYW1iaWFyQWJpZXJ0b0FudW5jaW9zKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCBhYnJpck1vZGFsUHJvbW9jaW9uZXMgPSAoKSA9PiB7XG4gICAgY2FtYmlhclByb21vY2lvbmVzKHRydWUpO1xuICB9O1xuXG4gIGNvbnN0IGNlcnJhck1vZGFsUHJvbW9jaW9uZXMgPSAoKSA9PiB7XG4gICAgY2FtYmlhclByb21vY2lvbmVzKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCBSZWRpcmlnaXIgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3MoZmFsc2UpO1xuXG4gICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IFwiLyNyZXBhcmFjaW9uXCI7XG4gIH07XG5cbiAgY29uc3QgUmVkaXJpZ2lyQ29udGFjdG8gPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3MoZmFsc2UpO1xuXG4gICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IFwiLyNjb250YWN0b1wiO1xuXG4gICAgUm91dGVyLnB1c2goXCIjaG9tZVwiKTtcbiAgfTtcblxuICBjb25zdCBSZWRpcmlnaXJWaWRlb3MgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNhbWJpYXJBYmllcnRvQW51bmNpb3MoZmFsc2UpO1xuXG4gICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IFwiLyN2aWRlb3NcIjtcblxuICAgIFJvdXRlci5wdXNoKFwiI2hvbWVcIik7XG4gIH07XG5cbiAgY29uc3QgUmVkaXJpZ2lySU1HID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjYW1iaWFyQWJpZXJ0b0FudW5jaW9zKGZhbHNlKTtcblxuICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBcIi8jcHVudG9hXCI7XG5cbiAgICBSb3V0ZXIucHVzaChcIiNob21lXCIpO1xuICB9O1xuXG4gIGNvbnN0IFJlZGlyaWdpckluaWNpbyA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgY2FtYmlhckFiaWVydG9BbnVuY2lvcyhmYWxzZSk7XG5cbiAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gXCIvI3B1bnRvYVwiO1xuXG4gICAgUm91dGVyLnB1c2goXCIjaG9tZVwiKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPGxpbmtcbiAgICAgICAgICByZWw9XCJzdHlsZXNoZWV0IHByZWxvYWRcIlxuICAgICAgICAgIGFzPVwic3R5bGVcIlxuICAgICAgICAgIGhyZWY9XCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Jvb3RzdHJhcEA0LjYuMC9kaXN0L2Nzcy9ib290c3RyYXAubWluLmNzc1wiXG4gICAgICAgICAgaW50ZWdyaXR5PVwic2hhMzg0LUIwdlA1eG1BVHcxK0s5S1JRalFFUkp2VHVtUVcwblBFenZGNkwvWjZucm9uSjNvVU9GVUZwQ2pFVVFvdXEyK2xcIlxuICAgICAgICAgIGNyb3NzT3JpZ2luPVwiYW5vbnltb3VzXCJcbiAgICAgICAgLz5cbiAgICAgIDwvSGVhZD5cbiAgICAgIDxzcGFuIGlkPVwicHVudG9hXCI+PC9zcGFuPlxuICAgICAgPHNlY3Rpb24gaWQ9XCJoZWFkZXJcIiBjbGFzc05hbWU9XCJzdGlja3ktdG9wXCI+XG4gICAgICAgIDxkaXYgaWQ9XCJoZWFkZXJkb3NcIj5cbiAgICAgICAgICA8QmllbnZlbmlkbyBjbGFzc05hbWU9XCJqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlblwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkaXZCaWVudmVuaWRvXCI+XG4gICAgICAgICAgICAgIDxUZXh0b0JpZW52ZW5pZG8gaWQ9XCJ3ZWxjb21lXCI+XG4gICAgICAgICAgICAgICAgQmllbnZlbmlkbyBhIEhhbmQgSGVsZCBTb2x1dGlvbnNcbiAgICAgICAgICAgICAgPC9UZXh0b0JpZW52ZW5pZG8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxTb2NpYWxNZWRpYT5cbiAgICAgICAgICAgICAgPGRpdiBpZD1cIndhXCI+XG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL3dhLm1lL21lc3NhZ2UvS1pTSFg1Rk9XQVNHRjFcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxMb2dvUmVkZXNcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicmVkZXNcIlxuICAgICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL3doYXRzX2xzdHFlZC53ZWJwXCJcbiAgICAgICAgICAgICAgICAgICAgYWx0PVwibG9nbyB3aGF0c2FwcFwiXG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgaWQ9XCJmYlwiPlxuICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0hhbmRIZWxkU29sdXRpb25zT2ZpY2lhbFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPExvZ29SZWRlc1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZWRlc1wiXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvMl9ycjZmZ3oud2VicFwiXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cImxvZ28gZmFjZWJvb2tcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGlkPVwiaW5cIj5cbiAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9jb21wYW55L2hhbmRoZWxkc29sdXRpb25zL1wiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPExvZ29SZWRlc1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZWRlc1wiXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvaW5fd2ZhMngyLndlYnBcIlxuICAgICAgICAgICAgICAgICAgICBhbHQ9XCJsb2dvIGxpbmtlZGluXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBpZD1cInl0XCI+XG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDalZQS1RWVnMwTi1vVnB1TGl6RUZhd1wiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPExvZ29SZWRlc1lUXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJlZGVzXCJcbiAgICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy95b3V0dWJlX283NXk0Zi53ZWJwXCJcbiAgICAgICAgICAgICAgICAgICAgYWx0PVwibG9nbyB5b3V0dWJlXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICA8ZGl2IGlkPVwidGlrdG9rXCI+XG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL3d3dy50aWt0b2suY29tL0BoYW5kaGVsZHNvbHV0aW9uc2hoc1wiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPExvZ29SZWRlc1xuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZWRlc1wiXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvdGlrdG9rLWljb24ud2VicFwiXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cImxvZ28gdGlrdG9rXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICA8L2Rpdj5cblx0XHRcdCAgXG4gICAgICAgICAgICAgIDxkaXYgaWQ9XCJpbnN0YWdyYW1cIj5cbiAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaGFuZF9oZWxkX3NvbHV0aW9ucy9cIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxMb2dvUmVkZXNcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicmVkZXNcIlxuICAgICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL2luc3RhZ3JhbS1pY29uLndlYnBcIlxuICAgICAgICAgICAgICAgICAgICBhbHQ9XCJsb2dvIGluc3RhZ3JhbVwiXG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgaWQ9XCJUd2l0dGVyXCI+XG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL3R3aXR0ZXIuY29tL0hhbmRIU29sdXRpb25zXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8TG9nb1JlZGVzXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJlZGVzXCJcbiAgICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9Ud2l0dGVyLWxvZ28ud2VicFwiXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cImxvZ28gaW5zdGFncmFtXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPC9Tb2NpYWxNZWRpYT5cbiAgICAgICAgICA8L0JpZW52ZW5pZG8+XG4gICAgICAgICAgPEhlYWRlckNvbnRhY3RvPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXBhcmFjaW9uXCI+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGEgb25DbGljaz17UmVkaXJpZ2lySU1HfT5cbiAgICAgICAgICAgICAgICAgIDxMb2dvXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvTE9HTy1ISFMud2VicFwiXG4gICAgICAgICAgICAgICAgICAgIC8qIHNyYz1cIi9pbWcvTE9HTy1BTklWRVJTQVJJTy5wbmdcIiAqL1xuICAgICAgICAgICAgICAgICAgICBhbHQ9XCJMb2dvIGhhbmQgaGVsZCBzb2x1dGlvbnNcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICB7c2l6ZSA8IDk5MSA/IChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFkZHJlc3NcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGFiZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPExsYW1hbm9zPsKhTGzDoW1hbm9zITwvTGxhbWFub3M+XG4gICAgICAgICAgICAgICAgICAgIDxOdW1lcm9SZXNwb25zaXZlXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICBocmVmPVwidGVsOiAoNTUpIDU1IDUxMTUgNjA0M1wiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPigrNTIpIDU1IDUxMTUgNjA0Mzwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICA8L051bWVyb1Jlc3BvbnNpdmU+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxMb2dvQ1xuICAgICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0xvZ290aXBvIENlbnRybyBkZSBTZXJ2aWNpbyBBdXRvcml6YWRvLnBuZ1wiXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cIkNlbnRybyBkZSBTZXJ2aWNpbyBBdXRvcml6YWRvXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8Qm90b25Db3JyZW9SZXNwb25zaXZlXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeSBidG4tYmxvY2sgYi1jb250XCJcbiAgICAgICAgICAgICAgICAgICAgaHJlZj1cIiNjb250YWN0b1wiXG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+Y29udGFjdG9AaGFuZGhlbGRzb2x1dGlvbnMuY29tLm14PC9zdHJvbmc+XG4gICAgICAgICAgICAgICAgICA8L0JvdG9uQ29ycmVvUmVzcG9uc2l2ZT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwO1xuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsbGFtYW5vc1wiPlxuICAgICAgICAgICAgICAgICAgICA8TGxhbWFub3M+wqFMbMOhbWFub3MhPC9MbGFtYW5vcz5cbiAgICAgICAgICAgICAgICAgICAgPE51bWVyb1xuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeSBudW1ub1wiXG4gICAgICAgICAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgaHJlZj1cInRlbDooNTUpIDU1IDUxMTUgNjA0M1wiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPigrNTIpIDU1IDUxMTUgNjA0Mzwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICA8L051bWVybz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPExvZ29DXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvTG9nb3RpcG8gQ2VudHJvIGRlIFNlcnZpY2lvIEF1dG9yaXphZG8ucG5nXCJcbiAgICAgICAgICAgICAgICAgICAgYWx0PVwiQ2VudHJvIGRlIFNlcnZpY2lvIEF1dG9yaXphZG9cIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIHsvKiA8QXV0b3JpemFkbyBjbGFzc05hbWU9XCJsZVwiPlxuICAgICAgICAgICAgICAgICAgPHN0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2VudHJvIGRlIFNlcnZpY2lvIEF1dG9yaXphZG9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJyPjwvYnI+XG4gICAgICAgICAgICAgICAgICAgICAgICBDb250YW1vcyBjb24gSW5nZW5pZXJvcyBDZXJ0aWZpY2Fkb3MsIGhlcnJhbWllbnRhcyBlc3BlY2lhbGl6YWRhc1xuICAgICAgICAgICAgICAgICAgICAgICAgIHkgc29wb3J0ZSBuZWNlc2FyaW8gcGFyYSBsbGV2YXIgYSBjYWJvLCB0YXJlYXMgZGUgbWFudGVuaW1pZW50byB5IFxuICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGFyYWNpw7NuIGRlIGVxdWlwb3MgTmV3bGFuZC5cbiAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICA8L0F1dG9yaXphZG8+ICovfVxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZGRyZXNzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxCb3RvbkNvcnJlb1xuICAgICAgICAgICAgICAgICAgICAgIGhyZWY9XCIjY29udGFjdG9cIlxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeSBidG4tYmxvY2sgYi1jb250IHRhbVwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPmNvbnRhY3RvQGhhbmRoZWxkc29sdXRpb25zLmNvbS5teDwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICA8L0JvdG9uQ29ycmVvPlxuICAgICAgICAgICAgICAgICAgICA8RGlyZWNjaW9uIGNsYXNzTmFtZT1cImxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICAgIENhbGxlLiBQYWxlbnF1ZSwmbmJzcDtDb2wuIExldHLDoW4gVmFsbGUsIEFsY2FsZMOtYSBCZW5pdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIEp1w6FyZXpcbiAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICA8YnI+PC9icj5cbiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPiZuYnNwO0NETVgsIEMuUC4gMDM2NTAsIE3DqXhpY288L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICA8YnI+PC9icj5cbiAgICAgICAgICAgICAgICAgICAgPC9EaXJlY2Npb24+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvSGVhZGVyQ29udGFjdG8+XG4gICAgICAgICAge3NpemUgPCA4MDAgPyA8VGFyamV0YURvcyAvPiA6IDxUYXJqZXRhIC8+fVxuICAgICAgICAgIFxuICAgICAgICAgICAge3NpemUgPCA5OTUgPyBcbiAgICAgICAgICAgIDxNZW51UmVzPlxuICAgICAgICAgICAgPE5hdmJhciBjb2xsYXBzZU9uU2VsZWN0ICBleHBhbmQ9J3h4bCcgYmc9J2RhcmsnIHZhcmlhbnQ9J2RhcmsnID5cbiAgICAgICAgICAgICAgICA8TmF2YmFyLlRvZ2dsZSBhcmlhLWNvbnRyb2xzPSdyZXNwb25zaXZlLW5hdmJhci1uYXYnIGNsYXNzTmFtZT1cIm5hdmJhdVwiLz5cbiAgICAgICAgICAgICAgICA8TmF2YmFyLkNvbGxhcHNlIGlkPSdyZXNwb25zaXZlLW5hdmJhci1uYXYnPlxuICAgICAgICAgICAgICAgICAgPE5hdj5cbiAgICAgICAgICAgICAgICAgICAgPE5hdi5MaW5rIGhyZWY9XCIvXCI+SW5pY2lvPC9OYXYuTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPE5hdkRyb3Bkb3duIHRpdGxlPVwiUmVudGFcIiBpZD1cImJhc2ljLW5hdi1kcm9wZG93blwiID5cbiAgICAgICAgICAgICAgICAgICAgICA8TmF2RHJvcGRvd24uSXRlbSBocmVmPVwicmVudGEtZGUtaGFuZGhlbGRzXCI+SGFuZGhlbGRzPC9OYXZEcm9wZG93bi5JdGVtPlxuICAgICAgICAgICAgICAgICAgICAgIDxOYXZEcm9wZG93bi5JdGVtIGhyZWY9XCJyZW50YS1kZS1pbXByZXNvcmFzLWRlLWV0aXF1ZXRhc1wiPkltcHJlc29yYXM8L05hdkRyb3Bkb3duLkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPE5hdkRyb3Bkb3duLkl0ZW0gaHJlZj1cInJlbnRhLWRlLWxlY3RvcmVzLWRlLWNvZGlnb3MtZGUtYmFycmFzXCI+TGVjdG9yZXM8L05hdkRyb3Bkb3duLkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgIDwvTmF2RHJvcGRvd24+XG4gICAgICAgICAgICAgICAgICAgIDxOYXZEcm9wZG93biB0aXRsZT1cIlJlcGFyYWNpw7NuXCIgaWQ9XCJiYXNpYy1uYXYtZHJvcGRvd25cIj5cbiAgICAgICAgICAgICAgICAgICAgICA8TmF2RHJvcGRvd24uSXRlbSBocmVmPVwicmVwYXJhY2lvbi1kZS1oYW5kaGVsZHNcIj5IYW5kaGVsZHM8L05hdkRyb3Bkb3duLkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPE5hdkRyb3Bkb3duLkl0ZW0gaHJlZj1cInJlcGFyYWNpb24tZGUtaW1wcmVzb3Jhcy1kZS1ldGlxdWV0YXNcIj5JbXByZXNvcmFzPC9OYXZEcm9wZG93bi5JdGVtPlxuICAgICAgICAgICAgICAgICAgICAgIDxOYXZEcm9wZG93bi5JdGVtIGhyZWY9XCJyZXBhcmFjaW9uLWRlLWxlY3RvcmVzLWRlLWNvZGlnb3MtZGUtYmFycmFzXCI+TGVjdG9yZXM8L05hdkRyb3Bkb3duLkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgIDwvTmF2RHJvcGRvd24+XG4gICAgICAgICAgICAgICAgICAgIDxOYXZEcm9wZG93biB0aXRsZT1cIlZlbnRhXCIgaWQ9XCJiYXNpYy1uYXYtZHJvcGRvd25cIj5cbiAgICAgICAgICAgICAgICAgICAgICA8TmF2RHJvcGRvd24uSXRlbSBocmVmPVwidmVudGEtZGUtaGFuZGhlbGRzXCI+SGFuZGhlbGRzPC9OYXZEcm9wZG93bi5JdGVtPlxuICAgICAgICAgICAgICAgICAgICAgIDxOYXZEcm9wZG93bi5JdGVtIGhyZWY9XCJ2ZW50YS1kZS1pbXByZXNvcmFzLWRlLWV0aXF1ZXRhc1wiPkltcHJlc29yYXM8L05hdkRyb3Bkb3duLkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPE5hdkRyb3Bkb3duLkl0ZW0gaHJlZj1cInZlbnRhLWRlLWxlY3RvcmVzLWRlLWNvZGlnb3MtZGUtYmFycmFzXCI+TGVjdG9yZXM8L05hdkRyb3Bkb3duLkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPE5hdkRyb3Bkb3duLkl0ZW0gaHJlZj1cInZlbnRhLWRlLWFjY2Vzb3Jpb3MteS1jb25zdW1pYmxlc1wiPkFjY2Vzb3Jpb3MgeSBDb25zdW1pYmxlczwvTmF2RHJvcGRvd24uSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICA8TmF2RHJvcGRvd24uSXRlbSBocmVmPVwidmVudGEtZnVuZGFzLWhhbmRoZWxkLWltcHJlc29yYS1wb3J0YXRpbFwiPkZ1bmRhczwvTmF2RHJvcGRvd24uSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgPC9OYXZEcm9wZG93bj5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxOYXYuTGluayBocmVmPVwiL0RTRC12ZW50YS1lbi1ydXRhXCI+U29sdWNpw7NuIERTRDwvTmF2Lkxpbms+XG4gICAgICAgICAgICAgICAgICAgIDxOYXYuTGluayBocmVmPVwiL3ZlbnRhLWZ1bmRhcy1oYW5kaGVsZC1pbXByZXNvcmEtcG9ydGF0aWxcIj5GdW5kYXM8L05hdi5MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8TmF2LkxpbmsgaHJlZj1cIi9pbXByZXNpb24tY3JlZGVuY2lhbGVzLXRhcmpldGFzLWdhZmV0ZXMtcHZjXCI+SW1wcmVzacOzbiBkZSBjcmVkZW5jaWFsZXM8L05hdi5MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8TmF2LkxpbmsgaHJlZj1cIi9pbXByZXNpb24tZXRpcXVldGFzXCI+SW1wcmVzacOzbiBkZSBldGlxdWV0YXM8L05hdi5MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8TmF2IGNsYXNzTmFtZT1cInJlc3Bvbm1lbnVcIiBvbkNsaWNrPXthYnJpck1vZGFsUHJvbW9jaW9uZXN9PlByb21vY2lvbmVzPC9OYXY+XG4gICAgICAgICAgICAgICAgICAgIDxOYXYgY2xhc3NOYW1lPVwicmVzcG9ubWVudVwiIG9uQ2xpY2s9e2FicmlyTW9kYWx9PkFudW5jaW9zPC9OYXY+XG4gICAgICAgICAgICAgICAgICAgIDxOYXYgY2xhc3NOYW1lPVwicmVzcG9ubWVudVwiIG9uQ2xpY2s9e1JlZGlyaWdpclZpZGVvc30+VmlkZW9zPC9OYXY+XG4gICAgICAgICAgICAgICAgICAgIDxOYXYgY2xhc3NOYW1lPVwicmVzcG9ubWVudVwiIG9uQ2xpY2s9e1JlZGlyaWdpckNvbnRhY3RvfT5Db250YWN0bzwvTmF2PlxuICAgICAgICAgICAgICAgICAgPC9OYXY+XG4gICAgICAgICAgICAgICAgPC9OYXZiYXIuQ29sbGFwc2U+XG4gICAgICAgICAgICA8L05hdmJhcj5cbiAgICAgICAgICA8L01lbnVSZXM+XG4gICAgICAgICAgICA6IFxuICAgICAgICAgICAgPE1lbnU+XG4gICAgICAgICAgICA8UGVzdGFuYXMgaWQ9XCJtZW51XCI+XG4gICAgICAgICAgICAgIDxQZXN0YW5hc0xpc3RhPlxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxUaXR1bG9zSGVhZGVyIGNsYXNzTmFtZT1cImVubGFjZXNcIiBvbkNsaWNrPXtSZWRpcmlnaXJJbmljaW99PlxuICAgICAgICAgICAgICAgICAgICBJbmljaW9cbiAgICAgICAgICAgICAgICAgIDwvVGl0dWxvc0hlYWRlcj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxUaXR1bG9zSGVhZGVyIGNsYXNzTmFtZT1cImVubGFjZXNcIj5SZW50YTwvVGl0dWxvc0hlYWRlcj5cbiAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvcmVudGEtZGUtaGFuZGhlbGRzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJsZXRyYXMtZW5sYWNlc1wiPkhhbmRoZWxkczwvYT5cbiAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL3JlbnRhLWRlLWltcHJlc29yYXMtZGUtZXRpcXVldGFzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJsZXRyYXMtZW5sYWNlc1wiPkltcHJlc29yYXM8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9yZW50YS1kZS1sZWN0b3Jlcy1kZS1jb2RpZ29zLWRlLWJhcnJhc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwibGV0cmFzLWVubGFjZXNcIj5MZWN0b3JlczwvYT5cbiAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgPFRpdHVsb3NIZWFkZXIgY2xhc3NOYW1lPVwiZW5sYWNlc1wiPlJlcGFyYWNpw7NuPC9UaXR1bG9zSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9yZXBhcmFjaW9uLWRlLWhhbmRoZWxkc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwibGV0cmFzLWVubGFjZXNcIj5IYW5kaGVsZHM8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9yZXBhcmFjaW9uLWRlLWltcHJlc29yYXMtZGUtZXRpcXVldGFzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJsZXRyYXMtZW5sYWNlc1wiPkltcHJlc29yYXM8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9yZXBhcmFjaW9uLWRlLWxlY3RvcmVzLWRlLWNvZGlnb3MtZGUtYmFycmFzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJsZXRyYXMtZW5sYWNlc1wiPkxlY3RvcmVzPC9hPlxuICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICA8VGl0dWxvc0hlYWRlciBjbGFzc05hbWU9XCJlbmxhY2VzXCI+VmVudGE8L1RpdHVsb3NIZWFkZXI+XG4gICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiL3ZlbnRhLWRlLWhhbmRoZWxkc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwibGV0cmFzLWVubGFjZXNcIj5IYW5kaGVsZHM8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi92ZW50YS1kZS1pbXByZXNvcmFzLWRlLWV0aXF1ZXRhc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwibGV0cmFzLWVubGFjZXNcIj5JbXByZXNvcmFzPC9hPlxuICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvdmVudGEtZGUtbGVjdG9yZXMtZGUtY29kaWdvcy1kZS1iYXJyYXNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImxldHJhcy1lbmxhY2VzXCI+TGVjdG9yZXM8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi92ZW50YS1kZS1hY2Nlc29yaW9zLXktY29uc3VtaWJsZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImxldHJhcy1lbmxhY2VzXCI+QWNjZXNvcmlvcyB5IENvbnN1bWlibGVzPC9hPlxuICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvdmVudGEtZnVuZGFzLWhhbmRoZWxkLWltcHJlc29yYS1wb3J0YXRpbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwibGV0cmFzLWVubGFjZXNcIj5GdW5kYXM8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvRFNELXZlbnRhLWVuLXJ1dGFcIj5cbiAgICAgICAgICAgICAgICAgICAgPFRpdHVsb3NIZWFkZXIgY2xhc3NOYW1lPVwiZW5sYWNlc1wiPlxuICAgICAgICAgICAgICAgICAgICAgIFNvbHVjacOzbiBEU0RcbiAgICAgICAgICAgICAgICAgICAgPC9UaXR1bG9zSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi92ZW50YS1mdW5kYXMtaGFuZGhlbGQtaW1wcmVzb3JhLXBvcnRhdGlsXCI+XG4gICAgICAgICAgICAgICAgICAgIDxUaXR1bG9zSGVhZGVyIGNsYXNzTmFtZT1cImVubGFjZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgICBGdW5kYXNcbiAgICAgICAgICAgICAgICAgICAgPC9UaXR1bG9zSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9pbXByZXNpb24tY3JlZGVuY2lhbGVzLXRhcmpldGFzLWdhZmV0ZXMtcHZjXCI+XG4gICAgICAgICAgICAgICAgICAgIDxUaXR1bG9zSGVhZGVyIGNsYXNzTmFtZT1cImVubGFjZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgSW1wcmVzacOzbiBjcmVkZW5jaWFsZXNcbiAgICAgICAgICAgICAgICAgICAgPC9UaXR1bG9zSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9pbXByZXNpb24tZXRpcXVldGFzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxUaXR1bG9zSGVhZGVyIGNsYXNzTmFtZT1cImVubGFjZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgSW1wcmVzacOzbiBldGlxdWV0YXNcbiAgICAgICAgICAgICAgICAgICAgPC9UaXR1bG9zSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgPFRpdHVsb3NIZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZW5sYWNlc1wiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2FicmlyTW9kYWxQcm9tb2Npb25lc31cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgUHJvbW9jaW9uZXNcbiAgICAgICAgICAgICAgICAgIDwvVGl0dWxvc0hlYWRlcj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxUaXR1bG9zSGVhZGVyIGNsYXNzTmFtZT1cImVubGFjZXNcIiBvbkNsaWNrPXthYnJpck1vZGFsfT5cbiAgICAgICAgICAgICAgICAgICAgQW51bmNpb3NcbiAgICAgICAgICAgICAgICAgIDwvVGl0dWxvc0hlYWRlcj5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgIDxUaXR1bG9zSGVhZGVyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVubGFjZXNcIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtSZWRpcmlnaXJWaWRlb3N9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIFZpZGVvc1xuICAgICAgICAgICAgICAgICAgPC9UaXR1bG9zSGVhZGVyPlxuICAgICAgICAgICAgICAgIDwvbGk+XG5cbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICA8VGl0dWxvc0hlYWRlclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJlbmxhY2VzXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17UmVkaXJpZ2lyQ29udGFjdG99XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIENvbnRhY3RvXG4gICAgICAgICAgICAgICAgICA8L1RpdHVsb3NIZWFkZXI+XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgPC9QZXN0YW5hc0xpc3RhPlxuICAgICAgICAgICAgPC9QZXN0YW5hcz5cbiAgICAgICAgICAgIDwvTWVudT5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPE1vZGFsXG4gICAgICAgICAgc2hvdz17YWJpZXJ0b0FudW5jaW9zfVxuICAgICAgICAgIG9uSGlkZT17Y2VycmFyTW9kYWx9XG4gICAgICAgICAga2V5Ym9hcmQ9e2ZhbHNlfVxuICAgICAgICAgIHNpemU9XCJsZ1wiXG4gICAgICAgICAgY2xhc3NOYW1lPVwibW9kYWwtYWx0dXJhXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxNb2RhbC5IZWFkZXIgY2xvc2VCdXR0b24+XG4gICAgICAgICAgICA8TW9kYWwuVGl0bGU+IEFudW5jaW9zPC9Nb2RhbC5UaXRsZT5cbiAgICAgICAgICA8L01vZGFsLkhlYWRlcj5cbiAgICAgICAgICA8TW9kYWwuQm9keT5cbiAgICAgICAgICAgIDxDYXJvdXNlbD5cbiAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvTGVjdG9yIFN5YmxlIFhCLTYyNjZNQlQucG5nXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJMZWN0b3IgZGUgY8OzZGlnb3MgWEItNjI2Nk1CVFwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0NUNDAgSG9uZXl3ZWxsLnBuZ1wiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZGhlbGQgQ1Q0MFwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICB7LyogPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9CYW5uZXIgUHJvbW8gM3gyLmdpZlwiXG4gICAgICAgICAgICAgICAgYWx0PVwiQmFubmVyIFByb21vIDN4MlwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0Jhbm5lciBQcm9tbyAyeDEuZ2lmXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJCYW5uZXIgUHJvbW8gMngxXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvY3Vwb24gZGUgZGVzY3VlbnRvIDIwMjIuZ2lmXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJjdXBvbiBkZSBkZXNjdWVudG8gMjAyMlwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+ICovfVxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9SZW50YSBkZSBoYW5kaGVsZCBNQzMzLndlYnBcIlxuICAgICAgICAgICAgICAgIGFsdD1cIlJlbnRhIGRlIGhhbmRoZWxkIE1DMzNcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvUmVudGEgZGUgaGFuZGhlbGQgQ0s2NS53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJSZW50YSBkZSBoYW5kaGVsZCBDSzY1XCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9pbXByZXNvcmFzX2Vwc29uLndlYnBcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiSW1wcmVzb3JhcyBFcHNvblwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL2V2b2xpc19hZGlraW8ud2VicFwiXG4gICAgICAgICAgICAgICAgICBhbHQ9XCJldm9saXMgYWRpa2lvXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9ldm9saXNfaW1wcmVzb3Jhcy53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cImV2b2xpcyBpbXByZXNvcmFzXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgIHsvKiA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvaW1wcmVzb3JhX0lNWjMyMC53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIlJlbnRhIGRlIEltcHJlc29yYSBJTVozMjBcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT4gKi99XG4gICAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9JTUFHRU5fWkVCUkFfQkFOTkVSXzgwMFg1MDBfbHlxbnB1LndlYnBcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiWmVicmEgSGFuZCBIZWxkIEltcHJlc29yYXMgTGVjdG9yZXNcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICAgPFB1bnRlcm8gb25DbGljaz17UmVkaXJpZ2lyfT5cbiAgICAgICAgICAgICAgICAgIDxJbWdNb2RhbFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIFwiXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvQ29waWFfZGVfcMOzbGl6YXNfcmVwYXJhY2nDs25fc2cweGltLndlYnBcIlxuICAgICAgICAgICAgICAgICAgICBhbHQ9XCJQb2xpemFzIGRlIHJlcGFyYWNpb24gaGFuZGhlbGQgaW1wcmVzb3JhcyBkZSBldGlxdWV0YXMgeSBsZWN0b3Jlc1wiXG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvUHVudGVybz5cbiAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICB7LyogPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNsaWNrc1wiXG4gICAgICAgICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvX04xYXE4WUprYzRcIlxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxJbWdNb2RhbFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIFwiXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvSGFuZGhlbGQgTUMyMjAwIHkgTUMyNzAwLmdpZlwiXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cIkhhbmRoZWxkcyBNQzIyMDAgeSBNQzI3MDBcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT4gKi99XG4gICAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgIDxJbWdNb2RhbFxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayBcIlxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9JTUFHRU5fWkVCUkFfQkFOTkVSXzgwMFg1MDBfdnI2cDFkLndlYnBcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiWmVicmEgSGFuZCBIZWxkIEltcHJlc29yYXMgTGVjdG9yZXNcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgey8qIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgIDxQdW50ZXJvXG4gICAgICAgICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGloYXdxcm50L2ltYWdlL3VwbG9hZC92MTYyMzA5ODAxMi9iYW5uZXIvRURBNjFLX0ZCX28yb2JvZC5wbmdcIlxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxJbWdNb2RhbFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIFwiXG4gICAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvRURBNjFLX1dFQl9sdXFuZnMud2VicFwiXG4gICAgICAgICAgICAgICAgICAgIGFsdD1cIkhhbmQgSGVsZCBFREE2MUsgWmVicmFcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L1B1bnRlcm8+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT4gKi99XG4gICAgICAgICAgICAgIHsvKiA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgICA8UHVudGVyb1xuICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RpaGF3cXJudC9pbWFnZS91cGxvYWQvdjE2MjMwOTgwMTAvYmFubmVyL2NrNjVfRkJfMV9yajh6M3UucG5nXCJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8SW1nTW9kYWxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayBcIlxuICAgICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0NLNjVfV0VCX2w5YWttMy53ZWJwXCJcbiAgICAgICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIENLNjUgWmVicmFcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L1B1bnRlcm8+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT4gKi99XG4gICAgICAgICAgICA8L0Nhcm91c2VsPlxuICAgICAgICAgIDwvTW9kYWwuQm9keT5cbiAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxuICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwibGlnaHRcIiBvbkNsaWNrPXtjZXJyYXJNb2RhbH0+XG4gICAgICAgICAgICAgIENlcnJhclxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgIDwvTW9kYWw+XG5cbiAgICAgICAgPE1vZGFsXG4gICAgICAgICAgc2hvdz17YWJpZXJ0b1Byb21vY2lvbmVzfVxuICAgICAgICAgIG9uSGlkZT17Y2VycmFyTW9kYWxQcm9tb2Npb25lc31cbiAgICAgICAgICBrZXlib2FyZD17ZmFsc2V9XG4gICAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJtb2RhbC1hbHR1cmFcIlxuICAgICAgICA+XG4gICAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cbiAgICAgICAgICAgIDxNb2RhbC5UaXRsZT5Qcm9tb2Npb25lczwvTW9kYWwuVGl0bGU+XG4gICAgICAgICAgPC9Nb2RhbC5IZWFkZXI+XG4gICAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgICA8Q2Fyb3VzZWw+XG4gICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL0hhbmRoZWxkIEVEQTUyLnBuZ1wiXG4gICAgICAgICAgICAgICAgYWx0PVwiSGFuZGhlbGQgRURBNTJcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9DVDQwIEhvbmV5d2VsbC5wbmdcIlxuICAgICAgICAgICAgICAgIGFsdD1cIkhhbmRoZWxkIENUNDBcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgey8qIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvQmFubmVyIFByb21vIDJ4MS5naWZcIlxuICAgICAgICAgICAgICAgIGFsdD1cIkJhbm5lciBQcm9tbyAyeDFcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9CYW5uZXIgUHJvbW8gM3gyLmdpZlwiXG4gICAgICAgICAgICAgICAgYWx0PVwiQmFubmVyIFByb21vIDN4MlwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL2N1cG9uIGRlIGRlc2N1ZW50byAyMDIyLmdpZlwiXG4gICAgICAgICAgICAgICAgYWx0PVwiY3Vwb24gZGUgZGVzY3VlbnRvIDIwMjJcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvUmVudGEgZGUgaGFuZGhlbGQgQ0s2NS53ZWJwXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJSZW50YSBkZSBoYW5kaGVsZCBDSzY1XCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL1JlbnRhIGRlIGhhbmRoZWxkIE1DMzMud2VicFwiXG4gICAgICAgICAgICAgICAgYWx0PVwiUmVudGEgZGUgaGFuZGhlbGQgTUMzM1wiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvUHJvbW9jacOzbl9tYzkwOTBfZnVuY2lvbmFsX3BvODNzay53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIkhhbmQgSGVsZCBNQzkwOTBcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgIHsvKiA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL1Byb21vY2nDs25fZHMyMjc4LndlYnBcIlxuICAgICAgICAgICAgICAgIGFsdD1cIkxlY3RvciBEUzIyNzhcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XG4gICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZC1ibG9jayB3LTEwMFwiXG4gICAgICAgICAgICAgICAgICBzcmM9XCIvaW1nL1Byb21vY2nDs25fQ041MS53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIkhhbmQgSGVsZCBJbnRlcm1lYyBIb25leXdlbGwgQ041MVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgey8qIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9Qcm9tb2Npw7NuX0NLNjUud2VicFwiXG4gICAgICAgICAgICAgICAgICBhbHQ9XCJIYW5kIEhlbGQgQ0s2NVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgICAgey8qIDxDYXJvdXNlbC5JdGVtPlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImQtYmxvY2sgdy0xMDBcIlxuICAgICAgICAgICAgICAgICAgc3JjPVwiL2ltZy9jdXBvbmJhbm5lci53ZWJwXCJcbiAgICAgICAgICAgICAgICAgIGFsdD1cIkhhbmQgSGVsZCBNQzkxOTBcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT4gKi99XG4gICAgICAgICAgICAgIHsvKiA8Q2Fyb3VzZWwuSXRlbT5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkLWJsb2NrIHctMTAwXCJcbiAgICAgICAgICAgICAgICAgIHNyYz1cIi9pbWcvUHJvbW9jacOzbl9NQzkxOTBfc3JpY2I2LndlYnBcIlxuICAgICAgICAgICAgICAgICAgYWx0PVwiSGFuZCBIZWxkIE1DOTE5MFwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPiAqL31cbiAgICAgICAgICAgIDwvQ2Fyb3VzZWw+XG4gICAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICAgIDxNb2RhbC5Gb290ZXI+XG4gICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJsaWdodFwiIG9uQ2xpY2s9e2NlcnJhck1vZGFsUHJvbW9jaW9uZXN9PlxuICAgICAgICAgICAgICBDZXJyYXJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvTW9kYWwuRm9vdGVyPlxuICAgICAgICA8L01vZGFsPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSGVhZGVyO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  });

  var size = Object(_hooks_useWindowSize__WEBPACK_IMPORTED_MODULE_8__["default"])();

  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false),
      abiertoAnuncios = _useState[0],
      cambiarAbiertoAnuncios = _useState[1];

  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(false),
      abiertoPromociones = _useState2[0],
      cambiarPromociones = _useState2[1];

  var abrirModal = function abrirModal() {
    cambiarAbiertoAnuncios(true);
  };

  var cerrarModal = function cerrarModal() {
    cambiarAbiertoAnuncios(false);
  };

  var abrirModalPromociones = function abrirModalPromociones() {
    cambiarPromociones(true);
  };

  var cerrarModalPromociones = function cerrarModalPromociones() {
    cambiarPromociones(false);
  };

  var Redirigir = function Redirigir(e) {
    e.preventDefault();
    cambiarAbiertoAnuncios(false);
    document.location.href = "/#reparacion";
  };

  var RedirigirContacto = function RedirigirContacto(e) {
    e.preventDefault();
    cambiarAbiertoAnuncios(false);
    document.location.href = "/#contacto";
    next_router__WEBPACK_IMPORTED_MODULE_7___default.a.push("#home");
  };

  var RedirigirVideos = function RedirigirVideos(e) {
    e.preventDefault();
    cambiarAbiertoAnuncios(false);
    document.location.href = "/#videos";
    next_router__WEBPACK_IMPORTED_MODULE_7___default.a.push("#home");
  };

  var RedirigirIMG = function RedirigirIMG(e) {
    e.preventDefault();
    cambiarAbiertoAnuncios(false);
    document.location.href = "/#puntoa";
    next_router__WEBPACK_IMPORTED_MODULE_7___default.a.push("#home");
  };

  var RedirigirInicio = function RedirigirInicio(e) {
    e.preventDefault();
    cambiarAbiertoAnuncios(false);
    document.location.href = "/#puntoa";
    next_router__WEBPACK_IMPORTED_MODULE_7___default.a.push("#home");
  };

  return Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_head__WEBPACK_IMPORTED_MODULE_3___default.a, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 350,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("link", {
    rel: "stylesheet preload",
    as: "style",
    href: "https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css",
    integrity: "sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l",
    crossOrigin: "anonymous",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 351,
      columnNumber: 9
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("span", {
    id: "puntoa",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 359,
      columnNumber: 7
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("section", {
    id: "header",
    className: "sticky-top",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 360,
      columnNumber: 7
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "headerdos",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 361,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Bienvenido, {
    className: "justify-content-between",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 362,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    className: "divBienvenido",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 363,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TextoBienvenido, {
    id: "welcome",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 364,
      columnNumber: 15
    }
  }, "Bienvenido a Hand Held Solutions")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(SocialMedia, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 368,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "wa",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 369,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://wa.me/message/KZSHX5FOWASGF1",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 370,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoRedes, {
    className: "redes",
    src: "/img/whats_lstqed.webp",
    alt: "logo whatsapp",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 375,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "fb",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 382,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://www.facebook.com/HandHeldSolutionsOficial",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 383,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoRedes, {
    className: "redes",
    src: "/img/2_rr6fgz.webp",
    alt: "logo facebook",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 388,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "in",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 395,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://www.linkedin.com/company/handheldsolutions/",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 396,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoRedes, {
    className: "redes",
    src: "/img/in_wfa2x2.webp",
    alt: "logo linkedin",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 401,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "yt",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 408,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://www.youtube.com/channel/UCjVPKTVVs0N-oVpuLizEFaw",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 409,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoRedesYT, {
    className: "redes",
    src: "/img/youtube_o75y4f.webp",
    alt: "logo youtube",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 414,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "tiktok",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 422,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://www.tiktok.com/@handheldsolutionshhs",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 423,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoRedes, {
    className: "redes",
    src: "/img/tiktok-icon.webp",
    alt: "logo tiktok",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 428,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "instagram",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 436,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://www.instagram.com/hand_held_solutions/",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 437,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoRedes, {
    className: "redes",
    src: "/img/instagram-icon.webp",
    alt: "logo instagram",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 442,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    id: "Twitter",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 449,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: "https://twitter.com/HandHSolutions",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 450,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoRedes, {
    className: "redes",
    src: "/img/Twitter-logo.webp",
    alt: "logo instagram",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 455,
      columnNumber: 19
    }
  }))))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(HeaderContacto, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 465,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    className: "separacion",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 466,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 467,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    onClick: RedirigirIMG,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 468,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Logo, {
    src: "/img/LOGO-HHS.webp"
    /* src="/img/LOGO-ANIVERSARIO.png" */
    ,
    alt: "Logo hand held solutions",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 469,
      columnNumber: 19
    }
  }))), size < 991 ? Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    className: "address",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 477,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    className: "haber",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 478,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Llamanos, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 479,
      columnNumber: 21
    }
  }, "\xA1Ll\xE1manos!"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(NumeroResponsive, {
    className: "btn btn-primary",
    role: "button",
    href: "tel: (55) 55 5115 6043",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 480,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("strong", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 485,
      columnNumber: 23
    }
  }, "(+52) 55 5115 6043"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoC, {
    src: "/img/Logotipo Centro de Servicio Autorizado.png",
    alt: "Centro de Servicio Autorizado",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 488,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(BotonCorreoResponsive, {
    className: "btn btn-primary btn-block b-cont",
    href: "#contacto",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 492,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("strong", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 496,
      columnNumber: 21
    }
  }, "contacto@handheldsolutions.com.mx"))) : Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, "\xA0\xA0\xA0\xA0\xA0\xA0", Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    className: "llamanos",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 502,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Llamanos, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 503,
      columnNumber: 21
    }
  }, "\xA1Ll\xE1manos!"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Numero, {
    className: "btn btn-primary numno",
    role: "button",
    href: "tel:(55) 55 5115 6043",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 504,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("strong", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 509,
      columnNumber: 23
    }
  }, "(+52) 55 5115 6043"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(LogoC, {
    src: "/img/Logotipo Centro de Servicio Autorizado.png",
    alt: "Centro de Servicio Autorizado",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 512,
      columnNumber: 19
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("div", {
    className: "address",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 525,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(BotonCorreo, {
    href: "#contacto",
    className: "btn btn-primary btn-block b-cont tam",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 526,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("strong", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 530,
      columnNumber: 23
    }
  }, "contacto@handheldsolutions.com.mx")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Direccion, {
    className: "le",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 532,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("strong", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 533,
      columnNumber: 23
    }
  }, "Calle. Palenque,\xA0Col. Letr\xE1n Valle, Alcald\xEDa Benito Ju\xE1rez"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("br", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 537,
      columnNumber: 23
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("strong", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 538,
      columnNumber: 23
    }
  }, "\xA0CDMX, C.P. 03650, M\xE9xico"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("br", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 539,
      columnNumber: 23
    }
  })))))), size < 800 ? Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_layout_TarjetaDos__WEBPACK_IMPORTED_MODULE_5__["default"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 546,
      columnNumber: 25
    }
  }) : Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(_layout_Tarjeta__WEBPACK_IMPORTED_MODULE_4__["default"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 546,
      columnNumber: 42
    }
  }), size < 995 ? Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(MenuRes, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 549,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Navbar"], {
    collapseOnSelect: true,
    expand: "xxl",
    bg: "dark",
    variant: "dark",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 550,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Navbar"].Toggle, {
    "aria-controls": "responsive-navbar-nav",
    className: "navbau",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 551,
      columnNumber: 17
    }
  }), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Navbar"].Collapse, {
    id: "responsive-navbar-nav",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 552,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 553,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"].Link, {
    href: "/",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 554,
      columnNumber: 21
    }
  }, "Inicio"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"], {
    title: "Renta",
    id: "basic-nav-dropdown",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 555,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "renta-de-handhelds",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 556,
      columnNumber: 23
    }
  }, "Handhelds"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "renta-de-impresoras-de-etiquetas",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 557,
      columnNumber: 23
    }
  }, "Impresoras"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "renta-de-lectores-de-codigos-de-barras",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 558,
      columnNumber: 23
    }
  }, "Lectores")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"], {
    title: "Reparaci\xF3n",
    id: "basic-nav-dropdown",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 560,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "reparacion-de-handhelds",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 561,
      columnNumber: 23
    }
  }, "Handhelds"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "reparacion-de-impresoras-de-etiquetas",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 562,
      columnNumber: 23
    }
  }, "Impresoras"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "reparacion-de-lectores-de-codigos-de-barras",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 563,
      columnNumber: 23
    }
  }, "Lectores")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"], {
    title: "Venta",
    id: "basic-nav-dropdown",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 565,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "venta-de-handhelds",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 566,
      columnNumber: 23
    }
  }, "Handhelds"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "venta-de-impresoras-de-etiquetas",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 567,
      columnNumber: 23
    }
  }, "Impresoras"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "venta-de-lectores-de-codigos-de-barras",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 568,
      columnNumber: 23
    }
  }, "Lectores"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "venta-de-accesorios-y-consumibles",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 569,
      columnNumber: 23
    }
  }, "Accesorios y Consumibles"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["NavDropdown"].Item, {
    href: "venta-fundas-handheld-impresora-portatil",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 570,
      columnNumber: 23
    }
  }, "Fundas")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"].Link, {
    href: "/DSD-venta-en-ruta",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 573,
      columnNumber: 21
    }
  }, "Soluci\xF3n DSD"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"].Link, {
    href: "/venta-fundas-handheld-impresora-portatil",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 574,
      columnNumber: 21
    }
  }, "Fundas"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"].Link, {
    href: "/impresion-credenciales-tarjetas-gafetes-pvc",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 575,
      columnNumber: 21
    }
  }, "Impresi\xF3n de credenciales"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"].Link, {
    href: "/impresion-etiquetas",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 576,
      columnNumber: 21
    }
  }, "Impresi\xF3n de etiquetas"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"], {
    className: "responmenu",
    onClick: abrirModalPromociones,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 577,
      columnNumber: 21
    }
  }, "Promociones"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"], {
    className: "responmenu",
    onClick: abrirModal,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 578,
      columnNumber: 21
    }
  }, "Anuncios"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"], {
    className: "responmenu",
    onClick: RedirigirVideos,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 579,
      columnNumber: 21
    }
  }, "Videos"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Nav"], {
    className: "responmenu",
    onClick: RedirigirContacto,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 580,
      columnNumber: 21
    }
  }, "Contacto"))))) : Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Menu, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 586,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Pestanas, {
    id: "menu",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 587,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(PestanasLista, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 588,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 589,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    onClick: RedirigirInicio,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 590,
      columnNumber: 19
    }
  }, "Inicio")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 594,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 595,
      columnNumber: 19
    }
  }, "Renta"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("ul", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 596,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 597,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/renta-de-handhelds",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 598,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 599,
      columnNumber: 25
    }
  }, "Handhelds"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 602,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/renta-de-impresoras-de-etiquetas",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 603,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 604,
      columnNumber: 25
    }
  }, "Impresoras"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 607,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/renta-de-lectores-de-codigos-de-barras",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 608,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 609,
      columnNumber: 25
    }
  }, "Lectores"))))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 614,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 615,
      columnNumber: 19
    }
  }, "Reparaci\xF3n"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("ul", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 616,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 617,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/reparacion-de-handhelds",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 618,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 619,
      columnNumber: 25
    }
  }, "Handhelds"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 622,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/reparacion-de-impresoras-de-etiquetas",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 623,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 624,
      columnNumber: 25
    }
  }, "Impresoras"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 627,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/reparacion-de-lectores-de-codigos-de-barras",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 628,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 629,
      columnNumber: 25
    }
  }, "Lectores"))))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 634,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 635,
      columnNumber: 19
    }
  }, "Venta"), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("ul", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 636,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 637,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/venta-de-handhelds",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 638,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 639,
      columnNumber: 25
    }
  }, "Handhelds"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 642,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/venta-de-impresoras-de-etiquetas",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 643,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 644,
      columnNumber: 25
    }
  }, "Impresoras"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 647,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/venta-de-lectores-de-codigos-de-barras",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 648,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 649,
      columnNumber: 25
    }
  }, "Lectores"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 652,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/venta-de-accesorios-y-consumibles",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 653,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 654,
      columnNumber: 25
    }
  }, "Accesorios y Consumibles"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 657,
      columnNumber: 21
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/venta-fundas-handheld-impresora-portatil",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 658,
      columnNumber: 23
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("a", {
    className: "letras-enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 659,
      columnNumber: 25
    }
  }, "Fundas"))))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 664,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/DSD-venta-en-ruta",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 665,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 666,
      columnNumber: 21
    }
  }, "Soluci\xF3n DSD"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 671,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/venta-fundas-handheld-impresora-portatil",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 672,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 673,
      columnNumber: 21
    }
  }, "Fundas"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 678,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/impresion-credenciales-tarjetas-gafetes-pvc",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 679,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 680,
      columnNumber: 21
    }
  }, "Impresi\xF3n credenciales"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 685,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: "/impresion-etiquetas",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 686,
      columnNumber: 19
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 687,
      columnNumber: 21
    }
  }, "Impresi\xF3n etiquetas"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 692,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    onClick: abrirModalPromociones,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 693,
      columnNumber: 19
    }
  }, "Promociones")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 700,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    onClick: abrirModal,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 701,
      columnNumber: 19
    }
  }, "Anuncios")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 705,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    onClick: RedirigirVideos,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 706,
      columnNumber: 19
    }
  }, "Videos")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("li", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 714,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(TitulosHeader, {
    className: "enlaces",
    onClick: RedirigirContacto,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 715,
      columnNumber: 19
    }
  }, "Contacto")))))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"], {
    show: abiertoAnuncios,
    onHide: cerrarModal,
    keyboard: false,
    size: "lg",
    className: "modal-altura",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 729,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Header, {
    closeButton: true,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 736,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Title, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 737,
      columnNumber: 13
    }
  }, " Anuncios")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Body, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 739,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 740,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 741,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Lector Syble XB-6266MBT.png",
    alt: "Lector de c\xF3digos XB-6266MBT",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 742,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 748,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/CT40 Honeywell.png",
    alt: "Handheld CT40",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 749,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 776,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Renta de handheld MC33.webp",
    alt: "Renta de handheld MC33",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 777,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 783,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Renta de handheld CK65.webp",
    alt: "Renta de handheld CK65",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 784,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 790,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/impresoras_epson.webp",
    alt: "Impresoras Epson",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 791,
      columnNumber: 17
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 797,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/evolis_adikio.webp",
    alt: "evolis adikio",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 798,
      columnNumber: 17
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 804,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/evolis_impresoras.webp",
    alt: "evolis impresoras",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 805,
      columnNumber: 17
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 818,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/IMAGEN_ZEBRA_BANNER_800X500_lyqnpu.webp",
    alt: "Zebra Hand Held Impresoras Lectores",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 819,
      columnNumber: 17
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 825,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(Puntero, {
    onClick: Redirigir,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 826,
      columnNumber: 17
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(ImgModal, {
    className: "d-block ",
    src: "/img/Copia_de_p\xF3lizas_reparaci\xF3n_sg0xim.webp",
    alt: "Polizas de reparacion handheld impresoras de etiquetas y lectores",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 827,
      columnNumber: 19
    }
  }))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 848,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(ImgModal, {
    className: "d-block ",
    src: "/img/IMAGEN_ZEBRA_BANNER_800X500_vr6p1d.webp",
    alt: "Zebra Hand Held Impresoras Lectores",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 849,
      columnNumber: 17
    }
  })))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Footer, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 883,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Button"], {
    variant: "light",
    onClick: cerrarModal,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 884,
      columnNumber: 13
    }
  }, "Cerrar"))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"], {
    show: abiertoPromociones,
    onHide: cerrarModalPromociones,
    keyboard: false,
    size: "lg",
    className: "modal-altura",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 890,
      columnNumber: 9
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Header, {
    closeButton: true,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 897,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Title, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 898,
      columnNumber: 13
    }
  }, "Promociones")), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Body, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 900,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 901,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 902,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Handheld EDA52.png",
    alt: "Handheld EDA52",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 903,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 909,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/CT40 Honeywell.png",
    alt: "Handheld CT40",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 910,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 937,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Renta de handheld CK65.webp",
    alt: "Renta de handheld CK65",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 938,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 944,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Renta de handheld MC33.webp",
    alt: "Renta de handheld MC33",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 945,
      columnNumber: 16
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 951,
      columnNumber: 13
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Promoci\xF3n_mc9090_funcional_po83sk.webp",
    alt: "Hand Held MC9090",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 952,
      columnNumber: 17
    }
  })), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Carousel"].Item, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 965,
      columnNumber: 15
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])("img", {
    className: "d-block w-100",
    src: "/img/Promoci\xF3n_CN51.webp",
    alt: "Hand Held Intermec Honeywell CN51",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 966,
      columnNumber: 17
    }
  })))), Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Modal"].Footer, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 995,
      columnNumber: 11
    }
  }, Object(_emotion_react__WEBPACK_IMPORTED_MODULE_9__["jsx"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__["Button"], {
    variant: "light",
    onClick: cerrarModalPromociones,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 996,
      columnNumber: 13
    }
  }, "Cerrar")))));
};

_s(Header, "shbe7W2YWmd3pixNHHmHJDRSy1I=", false, function () {
  return [_hooks_useWindowSize__WEBPACK_IMPORTED_MODULE_8__["default"]];
});

_c = Header;
/* harmony default export */ __webpack_exports__["default"] = (Header);

var _c;

$RefreshReg$(_c, "Header");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/next/dist/compiled/webpack/harmony-module.js */ "./node_modules/next/dist/compiled/webpack/harmony-module.js")(module)))

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,